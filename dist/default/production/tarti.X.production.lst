

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 02 17:34:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F628A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009F                     	;# 
    97  001A                     _RCREG	set	26
    98  000C                     _PIR1bits	set	12
    99  0018                     _RCSTAbits	set	24
   100  000B                     _INTCONbits	set	11
   101  0019                     _TXREG	set	25
   102  0006                     _PORTBbits	set	6
   103  0005                     _PORTAbits	set	5
   104  001F                     _CMCON	set	31
   105  0085                     _TRISAbits	set	133
   106  0099                     _SPBRG	set	153
   107  008C                     _PIE1bits	set	140
   108  0086                     _TRISBbits	set	134
   109  0081                     _OPTION_REGbits	set	129
   110  0098                     _TXSTAbits	set	152
   111  0086                     _TRISB	set	134
   112                           
   113                           ; #config settings
   114  0000                     
   115                           	psect	cinit
   116  0011                     start_initialization:	
   117  0011                     __initialization:	
   118                           
   119                           ; Clear objects allocated to COMMON
   120  0011  3075               	movlw	low __pbssCOMMON
   121  0012  0084               	movwf	4
   122  0013  3079               	movlw	low (__pbssCOMMON+4)
   123  0014  23D9               	fcall	clear_ram0
   124                           
   125                           ; Clear objects allocated to BANK0
   126  0015  1383               	bcf	3,7	;select IRP bank0
   127  0016  3020               	movlw	low __pbssBANK0
   128  0017  0084               	movwf	4
   129  0018  3051               	movlw	low (__pbssBANK0+49)
   130  0019  23D9               	fcall	clear_ram0
   131  001A                     end_of_initialization:	
   132                           ;End of C runtime variable initialization code
   133                           
   134  001A                     __end_of__initialization:	
   135  001A  0183               	clrf	3
   136  001B  281C               	ljmp	_main	;jump to C main() function
   137                           
   138                           	psect	bssCOMMON
   139  0075                     __pbssCOMMON:	
   140  0075                     _timetick:	
   141  0075                     	ds	4
   142                           
   143                           	psect	bssBANK0
   144  0020                     __pbssBANK0:	
   145  0020                     _tarti:	
   146  0020                     	ds	28
   147  003C                     _dec_array:	
   148  003C                     	ds	12
   149  0048                     _force:	
   150  0048                     	ds	3
   151  004B                     _offset:	
   152  004B                     	ds	3
   153  004E                     _measure_val:	
   154  004E                     	ds	3
   155                           
   156                           	psect	clrtext
   157  03D9                     clear_ram0:	
   158                           ;	Called with FSR containing the base address, and
   159                           ;	W with the last address+1
   160                           
   161  03D9  0064               	clrwdt	;clear the watchdog before getting into this loop
   162  03DA                     clrloop0:	
   163  03DA  0180               	clrf	0	;clear RAM location pointed to by FSR
   164  03DB  0A84               	incf	4,f	;increment pointer
   165  03DC  0604               	xorwf	4,w	;XOR with final address
   166  03DD  1903               	btfsc	3,2	;have we reached the end yet?
   167  03DE  3400               	retlw	0	;all done for this memory range, return
   168  03DF  0604               	xorwf	4,w	;XOR again to restore value
   169  03E0  2BDA               	goto	clrloop0	;do the next byte
   170                           
   171                           	psect	cstackBANK1
   172  00A0                     __pcstackBANK1:	
   173  00A0                     main@cnt:	
   174                           
   175                           ; 2 bytes @ 0x0
   176  00A0                     	ds	2
   177  00A2                     main@cnt_335:	
   178                           
   179                           ; 2 bytes @ 0x2
   180  00A2                     	ds	2
   181                           
   182                           	psect	cstackCOMMON
   183  0070                     __pcstackCOMMON:	
   184  0070                     ?_T0_init:	
   185  0070                     ?_serial_init:	
   186                           ; 1 bytes @ 0x0
   187                           
   188  0070                     ?_tarti_init:	
   189                           ; 1 bytes @ 0x0
   190                           
   191  0070                     ?_read_tarti:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0070                     ?_set_offset:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0070                     ?_measure_force:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0070                     ?_main:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0070                     ?_kes:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ??_kes:	
   207                           ; 1 bytes @ 0x0
   208                           
   209                           
   210                           ; 1 bytes @ 0x0
   211  0070                     	ds	5
   212  0075                     ??_T0_init:	
   213  0075                     ??_serial_init:	
   214                           ; 1 bytes @ 0x5
   215                           
   216  0075                     ??_tarti_init:	
   217                           ; 1 bytes @ 0x5
   218                           
   219                           
   220                           	psect	cstackBANK0
   221  0051                     __pcstackBANK0:	
   222                           ; 1 bytes @ 0x5
   223                           
   224  0051                     ??_read_tarti:	
   225  0051                     ?___lmul:	
   226                           ; 1 bytes @ 0x0
   227                           
   228  0051                     ?___aldiv:	
   229                           ; 4 bytes @ 0x0
   230                           
   231  0051                     ?___almod:	
   232                           ; 4 bytes @ 0x0
   233                           
   234  0051                     ___lmul@multiplier:	
   235                           ; 4 bytes @ 0x0
   236                           
   237  0051                     ___aldiv@divisor:	
   238                           ; 4 bytes @ 0x0
   239                           
   240  0051                     ___almod@divisor:	
   241                           ; 4 bytes @ 0x0
   242                           
   243                           
   244                           ; 4 bytes @ 0x0
   245  0051                     	ds	4
   246  0055                     read_tarti@kl:	
   247  0055                     ___lmul@multiplicand:	
   248                           ; 2 bytes @ 0x4
   249                           
   250  0055                     ___aldiv@dividend:	
   251                           ; 4 bytes @ 0x4
   252                           
   253  0055                     ___almod@dividend:	
   254                           ; 4 bytes @ 0x4
   255                           
   256                           
   257                           ; 4 bytes @ 0x4
   258  0055                     	ds	2
   259  0057                     read_tarti@i:	
   260                           
   261                           ; 2 bytes @ 0x6
   262  0057                     	ds	2
   263  0059                     ??___lmul:	
   264  0059                     ??___aldiv:	
   265                           ; 1 bytes @ 0x8
   266                           
   267  0059                     ??___almod:	
   268                           ; 1 bytes @ 0x8
   269                           
   270                           
   271                           ; 1 bytes @ 0x8
   272  0059                     	ds	1
   273  005A                     ___aldiv@counter:	
   274  005A                     ___almod@counter:	
   275                           ; 1 bytes @ 0x9
   276                           
   277  005A                     ___lmul@product:	
   278                           ; 1 bytes @ 0x9
   279                           
   280                           
   281                           ; 4 bytes @ 0x9
   282  005A                     	ds	1
   283  005B                     ___aldiv@sign:	
   284  005B                     ___almod@sign:	
   285                           ; 1 bytes @ 0xA
   286                           
   287                           
   288                           ; 1 bytes @ 0xA
   289  005B                     	ds	1
   290  005C                     ___aldiv@quotient:	
   291                           
   292                           ; 4 bytes @ 0xB
   293  005C                     	ds	4
   294  0060                     ?_write_dec:	
   295  0060                     write_dec@value:	
   296                           ; 1 bytes @ 0xF
   297                           
   298                           
   299                           ; 4 bytes @ 0xF
   300  0060                     	ds	4
   301  0064                     ??_write_dec:	
   302                           
   303                           ; 1 bytes @ 0x13
   304  0064                     	ds	1
   305  0065                     write_dec@i:	
   306                           
   307                           ; 2 bytes @ 0x14
   308  0065                     	ds	2
   309  0067                     ??_set_offset:	
   310  0067                     ??_measure_force:	
   311                           ; 1 bytes @ 0x16
   312                           
   313                           
   314                           ; 1 bytes @ 0x16
   315  0067                     	ds	3
   316  006A                     ??_main:	
   317                           
   318                           ; 1 bytes @ 0x19
   319  006A                     	ds	3
   320                           
   321                           	psect	maintext
   322  001C                     __pmaintext:	
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 49 in file "tarti.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;  cnt             2    2[BANK1 ] int 
   333 ;;  cnt             2    0[BANK1 ] int 
   334 ;; Return value:  Size  Location     Type
   335 ;;                  1    wreg      void 
   336 ;; Registers used:
   337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   338 ;; Tracked objects:
   339 ;;		On entry : B00/0
   340 ;;		On exit  : 0/0
   341 ;;		Unchanged: 0/0
   342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   343 ;;      Params:         0       0       0       0
   344 ;;      Locals:         0       0       4       0
   345 ;;      Temps:          0       3       0       0
   346 ;;      Totals:         0       3       4       0
   347 ;;Total ram usage:        7 bytes
   348 ;; Hardware stack levels required when called:    4
   349 ;; This function calls:
   350 ;;		_T0_init
   351 ;;		_measure_force
   352 ;;		_read_tarti
   353 ;;		_serial_init
   354 ;;		_set_offset
   355 ;;		_tarti_init
   356 ;; This function is called by:
   357 ;;		Startup code after reset
   358 ;; This function uses a non-reentrant model
   359 ;;
   360                           
   361                           
   362                           ;psect for function _main
   363  001C                     _main:	
   364                           
   365                           ;tarti.c: 50: CMCON = 0x07;
   366                           
   367                           ;incstack = 0
   368                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   369  001C  3007               	movlw	7
   370  001D  1283               	bcf	3,5	;RP0=0, select bank0
   371  001E  1303               	bcf	3,6	;RP1=0, select bank0
   372  001F  009F               	movwf	31	;volatile
   373                           
   374                           ;tarti.c: 51: TRISB = 0b00000110;
   375  0020  3006               	movlw	6
   376  0021  1683               	bsf	3,5	;RP0=1, select bank1
   377  0022  1303               	bcf	3,6	;RP1=0, select bank1
   378  0023  0086               	movwf	6	;volatile
   379                           
   380                           ;tarti.c: 53: T0_init();
   381  0024  23C4               	fcall	_T0_init
   382                           
   383                           ;tarti.c: 54: serial_init();
   384  0025  23AE               	fcall	_serial_init
   385                           
   386                           ;tarti.c: 55: tarti_init();
   387  0026  23D0               	fcall	_tarti_init
   388                           
   389                           ;tarti.c: 57: tarti.wr_index = 0;
   390  0027  1283               	bcf	3,5	;RP0=0, select bank0
   391  0028  1303               	bcf	3,6	;RP1=0, select bank0
   392  0029  01B8               	clrf	_tarti+24
   393  002A  01B9               	clrf	_tarti+25
   394                           
   395                           ;tarti.c: 58: tarti.rd_index = 0;
   396  002B  01BA               	clrf	_tarti+26
   397  002C  01BB               	clrf	_tarti+27
   398                           
   399                           ;tarti.c: 60: PORTAbits.RA0 = 0;
   400  002D  1005               	bcf	5,0	;volatile
   401                           
   402                           ;tarti.c: 61: PORTBbits.RB7 = 1;
   403  002E  1786               	bsf	6,7	;volatile
   404                           
   405                           ;tarti.c: 63: _delay((unsigned long)((4000)*(20000000/4000.0)));
   406  002F  3066               	movlw	102
   407  0030  1283               	bcf	3,5	;RP0=0, select bank0
   408  0031  1303               	bcf	3,6	;RP1=0, select bank0
   409  0032  00EC               	movwf	??_main+2
   410  0033  3076               	movlw	118
   411  0034  00EB               	movwf	??_main+1
   412  0035  30C0               	movlw	192
   413  0036  00EA               	movwf	??_main
   414  0037                     u1477:	
   415  0037  0BEA               	decfsz	??_main,f
   416  0038  2837               	goto	u1477
   417  0039  0BEB               	decfsz	??_main+1,f
   418  003A  2837               	goto	u1477
   419  003B  0BEC               	decfsz	??_main+2,f
   420  003C  2837               	goto	u1477
   421  003D  283E               	nop2
   422                           
   423                           ;tarti.c: 64: read_tarti();
   424  003E  2268               	fcall	_read_tarti
   425                           
   426                           ;tarti.c: 65: set_offset();
   427  003F  2390               	fcall	_set_offset
   428                           
   429                           ;tarti.c: 66: set_offset();
   430  0040  2390               	fcall	_set_offset
   431                           
   432                           ;tarti.c: 67: set_offset();
   433  0041  2390               	fcall	_set_offset
   434                           
   435                           ;tarti.c: 68: set_offset();
   436  0042  2390               	fcall	_set_offset
   437                           
   438                           ;tarti.c: 71: for(int cnt=0; cnt<10; cnt++){
   439  0043  1683               	bsf	3,5	;RP0=1, select bank1
   440  0044  1303               	bcf	3,6	;RP1=0, select bank1
   441  0045  01A0               	clrf	main@cnt^(0+128)
   442  0046  01A1               	clrf	(main@cnt+1)^(0+128)
   443  0047  0821               	movf	(main@cnt+1)^(0+128),w
   444  0048  3A80               	xorlw	128
   445  0049  00FF               	movwf	127
   446  004A  3080               	movlw	128
   447  004B  027F               	subwf	127,w
   448  004C  1D03               	skipz
   449  004D  2850               	goto	u1365
   450  004E  300A               	movlw	10
   451  004F  0220               	subwf	main@cnt^(0+128),w
   452  0050                     u1365:	
   453  0050  1803               	btfsc	3,0
   454  0051  2871               	goto	l68
   455  0052                     l65:	
   456                           ;tarti.c: 72: while(!TXSTAbits.TRMT);
   457                           
   458  0052  1683               	bsf	3,5	;RP0=1, select bank1
   459  0053  1303               	bcf	3,6	;RP1=0, select bank1
   460  0054  1C98               	btfss	24,1	;volatile
   461  0055  2852               	goto	l65
   462                           
   463                           ;tarti.c: 73: TXREG=(dec_array[cnt]);
   464  0056  0820               	movf	main@cnt^(0+128),w
   465  0057  3E3C               	addlw	(low (_dec_array| 0))& (0+255)
   466  0058  0084               	movwf	4
   467  0059  1383               	bcf	3,7	;select IRP bank0
   468  005A  0800               	movf	0,w
   469  005B  1283               	bcf	3,5	;RP0=0, select bank0
   470  005C  1303               	bcf	3,6	;RP1=0, select bank0
   471  005D  0099               	movwf	25	;volatile
   472  005E  3001               	movlw	1
   473  005F  1683               	bsf	3,5	;RP0=1, select bank1
   474  0060  1303               	bcf	3,6	;RP1=0, select bank1
   475  0061  07A0               	addwf	main@cnt^(0+128),f
   476  0062  1803               	skipnc
   477  0063  0AA1               	incf	(main@cnt+1)^(0+128),f
   478  0064  3000               	movlw	0
   479  0065  07A1               	addwf	(main@cnt+1)^(0+128),f
   480  0066  0821               	movf	(main@cnt+1)^(0+128),w
   481  0067  3A80               	xorlw	128
   482  0068  00FF               	movwf	127
   483  0069  3080               	movlw	128
   484  006A  027F               	subwf	127,w
   485  006B  1D03               	skipz
   486  006C  286F               	goto	u1385
   487  006D  300A               	movlw	10
   488  006E  0220               	subwf	main@cnt^(0+128),w
   489  006F                     u1385:	
   490  006F  1C03               	skipc
   491  0070  2852               	goto	l65
   492  0071                     l68:	
   493                           ;tarti.c: 74: }
   494                           ;tarti.c: 76: while(!TXSTAbits.TRMT);
   495                           
   496  0071  1683               	bsf	3,5	;RP0=1, select bank1
   497  0072  1303               	bcf	3,6	;RP1=0, select bank1
   498  0073  1C98               	btfss	24,1	;volatile
   499  0074  2871               	goto	l68
   500                           
   501                           ;tarti.c: 77: TXREG='\r';
   502  0075  300D               	movlw	13
   503  0076  1283               	bcf	3,5	;RP0=0, select bank0
   504  0077  1303               	bcf	3,6	;RP1=0, select bank0
   505  0078  0099               	movwf	25	;volatile
   506  0079                     l71:	
   507                           ;tarti.c: 78: while(!TXSTAbits.TRMT);
   508                           
   509  0079  1683               	bsf	3,5	;RP0=1, select bank1
   510  007A  1303               	bcf	3,6	;RP1=0, select bank1
   511  007B  1C98               	btfss	24,1	;volatile
   512  007C  2879               	goto	l71
   513                           
   514                           ;tarti.c: 79: TXREG='\n';
   515  007D  300A               	movlw	10
   516  007E  1283               	bcf	3,5	;RP0=0, select bank0
   517  007F  1303               	bcf	3,6	;RP1=0, select bank0
   518  0080  0099               	movwf	25	;volatile
   519  0081                     l74:	
   520                           ;tarti.c: 80: while(!TXSTAbits.TRMT);
   521                           
   522  0081  1683               	bsf	3,5	;RP0=1, select bank1
   523  0082  1303               	bcf	3,6	;RP1=0, select bank1
   524  0083  1C98               	btfss	24,1	;volatile
   525  0084  2881               	goto	l74
   526                           
   527                           ;tarti.c: 81: TXREG='p';
   528  0085  3070               	movlw	112
   529  0086                     L1:	
   530  0086  1283               	bcf	3,5	;RP0=0, select bank0
   531  0087  1303               	bcf	3,6	;RP1=0, select bank0
   532  0088  0099               	movwf	25	;volatile
   533                           
   534                           ;tarti.c: 89: measure_force();
   535                           
   536                           ;tarti.c: 82: while (1) {
   537  0089  2367               	fcall	_measure_force
   538                           
   539                           ;tarti.c: 91: for(int cnt=0; cnt<12; cnt++){
   540  008A  1683               	bsf	3,5	;RP0=1, select bank1
   541  008B  1303               	bcf	3,6	;RP1=0, select bank1
   542  008C  01A2               	clrf	main@cnt_335^(0+128)
   543  008D  01A3               	clrf	(main@cnt_335+1)^(0+128)
   544  008E  0823               	movf	(main@cnt_335+1)^(0+128),w
   545  008F  3A80               	xorlw	128
   546  0090  00FF               	movwf	127
   547  0091  3080               	movlw	128
   548  0092  027F               	subwf	127,w
   549  0093  1D03               	skipz
   550  0094  2897               	goto	u1425
   551  0095  300C               	movlw	12
   552  0096  0222               	subwf	main@cnt_335^(0+128),w
   553  0097                     u1425:	
   554  0097  1803               	btfsc	3,0
   555  0098  28B8               	goto	l83
   556  0099                     l80:	
   557                           ;tarti.c: 92: while(!TXSTAbits.TRMT);
   558                           
   559  0099  1683               	bsf	3,5	;RP0=1, select bank1
   560  009A  1303               	bcf	3,6	;RP1=0, select bank1
   561  009B  1C98               	btfss	24,1	;volatile
   562  009C  2899               	goto	l80
   563                           
   564                           ;tarti.c: 93: TXREG=(dec_array[cnt]);
   565  009D  0822               	movf	main@cnt_335^(0+128),w
   566  009E  3E3C               	addlw	(low (_dec_array| 0))& (0+255)
   567  009F  0084               	movwf	4
   568  00A0  1383               	bcf	3,7	;select IRP bank0
   569  00A1  0800               	movf	0,w
   570  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   571  00A3  1303               	bcf	3,6	;RP1=0, select bank0
   572  00A4  0099               	movwf	25	;volatile
   573  00A5  3001               	movlw	1
   574  00A6  1683               	bsf	3,5	;RP0=1, select bank1
   575  00A7  1303               	bcf	3,6	;RP1=0, select bank1
   576  00A8  07A2               	addwf	main@cnt_335^(0+128),f
   577  00A9  1803               	skipnc
   578  00AA  0AA3               	incf	(main@cnt_335+1)^(0+128),f
   579  00AB  3000               	movlw	0
   580  00AC  07A3               	addwf	(main@cnt_335+1)^(0+128),f
   581  00AD  0823               	movf	(main@cnt_335+1)^(0+128),w
   582  00AE  3A80               	xorlw	128
   583  00AF  00FF               	movwf	127
   584  00B0  3080               	movlw	128
   585  00B1  027F               	subwf	127,w
   586  00B2  1D03               	skipz
   587  00B3  28B6               	goto	u1445
   588  00B4  300C               	movlw	12
   589  00B5  0222               	subwf	main@cnt_335^(0+128),w
   590  00B6                     u1445:	
   591  00B6  1C03               	skipc
   592  00B7  2899               	goto	l80
   593  00B8                     l83:	
   594                           ;tarti.c: 94: }
   595                           ;tarti.c: 95: while(!TXSTAbits.TRMT);
   596                           
   597  00B8  1683               	bsf	3,5	;RP0=1, select bank1
   598  00B9  1303               	bcf	3,6	;RP1=0, select bank1
   599  00BA  1C98               	btfss	24,1	;volatile
   600  00BB  28B8               	goto	l83
   601                           
   602                           ;tarti.c: 96: TXREG='\r';
   603  00BC  300D               	movlw	13
   604  00BD  1283               	bcf	3,5	;RP0=0, select bank0
   605  00BE  1303               	bcf	3,6	;RP1=0, select bank0
   606  00BF  0099               	movwf	25	;volatile
   607  00C0                     l86:	
   608                           ;tarti.c: 97: while(!TXSTAbits.TRMT);
   609                           
   610  00C0  1683               	bsf	3,5	;RP0=1, select bank1
   611  00C1  1303               	bcf	3,6	;RP1=0, select bank1
   612  00C2  1C98               	btfss	24,1	;volatile
   613  00C3  28C0               	goto	l86
   614                           
   615                           ;tarti.c: 98: TXREG='\n';
   616  00C4  300A               	movlw	10
   617  00C5  2886               	goto	L1
   618  00C6                     __end_of_main:	
   619                           ;tarti.c: 102: }
   620                           ;tarti.c: 104: return;
   621                           
   622                           
   623                           	psect	text1
   624  03D0                     __ptext1:	
   625 ;; *************** function _tarti_init *****************
   626 ;; Defined at:
   627 ;;		line 162 in file "tarti.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		None
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   641 ;;      Params:         0       0       0       0
   642 ;;      Locals:         0       0       0       0
   643 ;;      Temps:          0       0       0       0
   644 ;;      Totals:         0       0       0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    1
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           
   656                           ;psect for function _tarti_init
   657  03D0                     _tarti_init:	
   658                           
   659                           ;tarti.c: 164: TRISAbits.TRISA0=0;
   660                           
   661                           ;incstack = 0
   662                           ; Regs used in _tarti_init: []
   663  03D0  1683               	bsf	3,5	;RP0=1, select bank1
   664  03D1  1303               	bcf	3,6	;RP1=0, select bank1
   665  03D2  1005               	bcf	5,0	;volatile
   666                           
   667                           ;tarti.c: 165: TRISAbits.TRISA3=1;
   668  03D3  1585               	bsf	5,3	;volatile
   669                           
   670                           ;tarti.c: 166: TRISAbits.TRISA4=0;
   671  03D4  1205               	bcf	5,4	;volatile
   672                           
   673                           ;tarti.c: 167: PORTAbits.RA0=0;
   674  03D5  1283               	bcf	3,5	;RP0=0, select bank0
   675  03D6  1303               	bcf	3,6	;RP1=0, select bank0
   676  03D7  1005               	bcf	5,0	;volatile
   677  03D8  0008               	return
   678  03D9                     __end_of_tarti_init:	
   679                           
   680                           	psect	text2
   681  0390                     __ptext2:	
   682 ;; *************** function _set_offset *****************
   683 ;; Defined at:
   684 ;;		line 203 in file "tarti.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   698 ;;      Params:         0       0       0       0
   699 ;;      Locals:         0       0       0       0
   700 ;;      Temps:          0       1       0       0
   701 ;;      Totals:         0       1       0       0
   702 ;;Total ram usage:        1 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    3
   705 ;; This function calls:
   706 ;;		_read_tarti
   707 ;;		_write_dec
   708 ;; This function is called by:
   709 ;;		_main
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           
   714                           ;psect for function _set_offset
   715  0390                     _set_offset:	
   716                           
   717                           ;tarti.c: 204: read_tarti();
   718                           
   719                           ;incstack = 0
   720                           ; Regs used in _set_offset: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   721  0390  2268               	fcall	_read_tarti
   722                           
   723                           ;tarti.c: 205: offset = -measure_val;
   724  0391  1283               	bcf	3,5	;RP0=0, select bank0
   725  0392  1303               	bcf	3,6	;RP1=0, select bank0
   726  0393  094E               	comf	_measure_val,w
   727  0394  00CB               	movwf	_offset
   728  0395  094F               	comf	_measure_val+1,w
   729  0396  00CC               	movwf	_offset+1
   730  0397  0950               	comf	_measure_val+2,w
   731  0398  00CD               	movwf	_offset+2
   732  0399  0ACB               	incf	_offset,f
   733  039A  1903               	skipnz
   734  039B  0ACC               	incf	_offset+1,f
   735  039C  1903               	skipnz
   736  039D  0ACD               	incf	_offset+2,f
   737                           
   738                           ;tarti.c: 207: write_dec(offset);
   739  039E  084B               	movf	_offset,w
   740  039F  00E0               	movwf	write_dec@value
   741  03A0  084C               	movf	_offset+1,w
   742  03A1  00E1               	movwf	write_dec@value+1
   743  03A2  084D               	movf	_offset+2,w
   744  03A3  00E2               	movwf	write_dec@value+2
   745  03A4  00E7               	movwf	??_set_offset
   746  03A5  0D67               	rlf	??_set_offset,w
   747  03A6  00E7               	movwf	??_set_offset
   748  03A7  1C03               	skipc
   749  03A8  03E7               	decf	??_set_offset,f
   750  03A9  02E7               	subwf	??_set_offset,f
   751  03AA  0967               	comf	??_set_offset,w
   752  03AB  00E3               	movwf	write_dec@value+3
   753  03AC  20C6               	fcall	_write_dec
   754  03AD  0008               	return
   755  03AE                     __end_of_set_offset:	
   756                           
   757                           	psect	text3
   758  03AE                     __ptext3:	
   759 ;; *************** function _serial_init *****************
   760 ;; Defined at:
   761 ;;		line 121 in file "tarti.c"
   762 ;; Parameters:    Size  Location     Type
   763 ;;		None
   764 ;; Auto vars:     Size  Location     Type
   765 ;;		None
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   775 ;;      Params:         0       0       0       0
   776 ;;      Locals:         0       0       0       0
   777 ;;      Temps:          0       0       0       0
   778 ;;      Totals:         0       0       0       0
   779 ;;Total ram usage:        0 bytes
   780 ;; Hardware stack levels used:    1
   781 ;; Hardware stack levels required when called:    1
   782 ;; This function calls:
   783 ;;		Nothing
   784 ;; This function is called by:
   785 ;;		_main
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789                           
   790                           ;psect for function _serial_init
   791  03AE                     _serial_init:	
   792                           
   793                           ;tarti.c: 122: TXSTAbits.TX9=0;
   794                           
   795                           ;incstack = 0
   796                           ; Regs used in _serial_init: [wreg]
   797  03AE  1683               	bsf	3,5	;RP0=1, select bank1
   798  03AF  1303               	bcf	3,6	;RP1=0, select bank1
   799  03B0  1318               	bcf	24,6	;volatile
   800                           
   801                           ;tarti.c: 123: TXSTAbits.TXEN=1;
   802  03B1  1698               	bsf	24,5	;volatile
   803                           
   804                           ;tarti.c: 124: TXSTAbits.SYNC=0;
   805  03B2  1218               	bcf	24,4	;volatile
   806                           
   807                           ;tarti.c: 125: TXSTAbits.BRGH=1;
   808  03B3  1518               	bsf	24,2	;volatile
   809                           
   810                           ;tarti.c: 127: RCSTAbits.SPEN=1;
   811  03B4  1283               	bcf	3,5	;RP0=0, select bank0
   812  03B5  1303               	bcf	3,6	;RP1=0, select bank0
   813  03B6  1798               	bsf	24,7	;volatile
   814                           
   815                           ;tarti.c: 128: RCSTAbits.RX9=0;
   816  03B7  1318               	bcf	24,6	;volatile
   817                           
   818                           ;tarti.c: 129: RCSTAbits.CREN=1;
   819  03B8  1618               	bsf	24,4	;volatile
   820                           
   821                           ;tarti.c: 131: TRISBbits.TRISB1=1;
   822  03B9  1683               	bsf	3,5	;RP0=1, select bank1
   823  03BA  1303               	bcf	3,6	;RP1=0, select bank1
   824  03BB  1486               	bsf	6,1	;volatile
   825                           
   826                           ;tarti.c: 132: TRISBbits.TRISB2=1;
   827  03BC  1506               	bsf	6,2	;volatile
   828                           
   829                           ;tarti.c: 134: PIE1bits.RCIE=1;
   830  03BD  168C               	bsf	12,5	;volatile
   831                           
   832                           ;tarti.c: 135: SPBRG=129;
   833  03BE  3081               	movlw	129
   834  03BF  0099               	movwf	25	;volatile
   835                           
   836                           ;tarti.c: 137: PIR1bits.RCIF=0;
   837  03C0  1283               	bcf	3,5	;RP0=0, select bank0
   838  03C1  1303               	bcf	3,6	;RP1=0, select bank0
   839  03C2  128C               	bcf	12,5	;volatile
   840  03C3  0008               	return
   841  03C4                     __end_of_serial_init:	
   842                           
   843                           	psect	text4
   844  0367                     __ptext4:	
   845 ;; *************** function _measure_force *****************
   846 ;; Defined at:
   847 ;;		line 210 in file "tarti.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   861 ;;      Params:         0       0       0       0
   862 ;;      Locals:         0       0       0       0
   863 ;;      Temps:          0       3       0       0
   864 ;;      Totals:         0       3       0       0
   865 ;;Total ram usage:        3 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    3
   868 ;; This function calls:
   869 ;;		_read_tarti
   870 ;;		_write_dec
   871 ;; This function is called by:
   872 ;;		_main
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           
   877                           ;psect for function _measure_force
   878  0367                     _measure_force:	
   879                           
   880                           ;tarti.c: 211: read_tarti();
   881                           
   882                           ;incstack = 0
   883                           ; Regs used in _measure_force: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   884  0367  2268               	fcall	_read_tarti
   885                           
   886                           ;tarti.c: 212: force= measure_val + offset;
   887  0368  1283               	bcf	3,5	;RP0=0, select bank0
   888  0369  1303               	bcf	3,6	;RP1=0, select bank0
   889  036A  084E               	movf	_measure_val,w
   890  036B  074B               	addwf	_offset,w
   891  036C  00E7               	movwf	??_measure_force
   892  036D  084C               	movf	_offset+1,w
   893  036E  00E8               	movwf	??_measure_force+1
   894  036F  084F               	movf	_measure_val+1,w
   895  0370  1803               	skipnc
   896  0371  0A4F               	incf	_measure_val+1,w
   897  0372  1D03               	btfss	3,2
   898  0373  07E8               	addwf	??_measure_force+1,f
   899  0374  084D               	movf	_offset+2,w
   900  0375  00E9               	movwf	??_measure_force+2
   901  0376  0850               	movf	_measure_val+2,w
   902  0377  1803               	skipnc
   903  0378  0A50               	incf	_measure_val+2,w
   904  0379  07E9               	addwf	??_measure_force+2,f
   905  037A  0867               	movf	??_measure_force,w
   906  037B  00C8               	movwf	_force
   907  037C  0868               	movf	??_measure_force+1,w
   908  037D  00C9               	movwf	_force+1
   909  037E  0869               	movf	??_measure_force+2,w
   910  037F  00CA               	movwf	_force+2
   911                           
   912                           ;tarti.c: 214: write_dec(force);
   913  0380  0848               	movf	_force,w
   914  0381  00E0               	movwf	write_dec@value
   915  0382  0849               	movf	_force+1,w
   916  0383  00E1               	movwf	write_dec@value+1
   917  0384  084A               	movf	_force+2,w
   918  0385  00E2               	movwf	write_dec@value+2
   919  0386  00E7               	movwf	??_measure_force
   920  0387  0D67               	rlf	??_measure_force,w
   921  0388  00E7               	movwf	??_measure_force
   922  0389  1C03               	skipc
   923  038A  03E7               	decf	??_measure_force,f
   924  038B  02E7               	subwf	??_measure_force,f
   925  038C  0967               	comf	??_measure_force,w
   926  038D  00E3               	movwf	write_dec@value+3
   927  038E  20C6               	fcall	_write_dec
   928  038F  0008               	return
   929  0390                     __end_of_measure_force:	
   930                           
   931                           	psect	text5
   932  00C6                     __ptext5:	
   933 ;; *************** function _write_dec *****************
   934 ;; Defined at:
   935 ;;		line 246 in file "tarti.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;  value           4   15[BANK0 ] long 
   938 ;; Auto vars:     Size  Location     Type
   939 ;;  i               2   20[BANK0 ] int 
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   949 ;;      Params:         0       4       0       0
   950 ;;      Locals:         0       2       0       0
   951 ;;      Temps:          0       1       0       0
   952 ;;      Totals:         0       7       0       0
   953 ;;Total ram usage:        7 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    2
   956 ;; This function calls:
   957 ;;		___aldiv
   958 ;;		___almod
   959 ;;		___lmul
   960 ;; This function is called by:
   961 ;;		_set_offset
   962 ;;		_measure_force
   963 ;;		_bin_to_dec
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           
   968                           ;psect for function _write_dec
   969  00C6                     _write_dec:	
   970                           
   971                           ;tarti.c: 247: int i=0;
   972                           
   973                           ;incstack = 0
   974                           ; Regs used in _write_dec: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   975  00C6  1283               	bcf	3,5	;RP0=0, select bank0
   976  00C7  1303               	bcf	3,6	;RP1=0, select bank0
   977  00C8  01E5               	clrf	write_dec@i
   978  00C9  01E6               	clrf	write_dec@i+1
   979                           
   980                           ;tarti.c: 248: value *= 5;
   981  00CA  3000               	movlw	0
   982  00CB  00D4               	movwf	___lmul@multiplier+3
   983  00CC  3000               	movlw	0
   984  00CD  00D3               	movwf	___lmul@multiplier+2
   985  00CE  3000               	movlw	0
   986  00CF  00D2               	movwf	___lmul@multiplier+1
   987  00D0  3005               	movlw	5
   988  00D1  00D1               	movwf	___lmul@multiplier
   989  00D2  0863               	movf	write_dec@value+3,w
   990  00D3  00D8               	movwf	___lmul@multiplicand+3
   991  00D4  0862               	movf	write_dec@value+2,w
   992  00D5  00D7               	movwf	___lmul@multiplicand+2
   993  00D6  0861               	movf	write_dec@value+1,w
   994  00D7  00D6               	movwf	___lmul@multiplicand+1
   995  00D8  0860               	movf	write_dec@value,w
   996  00D9  00D5               	movwf	___lmul@multiplicand
   997  00DA  2326               	fcall	___lmul
   998  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   999  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  1000  00DD  0854               	movf	?___lmul+3,w
  1001  00DE  00E3               	movwf	write_dec@value+3
  1002  00DF  0853               	movf	?___lmul+2,w
  1003  00E0  00E2               	movwf	write_dec@value+2
  1004  00E1  0852               	movf	?___lmul+1,w
  1005  00E2  00E1               	movwf	write_dec@value+1
  1006  00E3  0851               	movf	?___lmul,w
  1007  00E4  00E0               	movwf	write_dec@value
  1008                           
  1009                           ;tarti.c: 249: if(value < 0)
  1010  00E5  1FE3               	btfss	write_dec@value+3,7
  1011  00E6  28F7               	goto	l1226
  1012                           
  1013                           ;tarti.c: 250: {
  1014                           ;tarti.c: 251: dec_array[0] = '-';
  1015  00E7  302D               	movlw	45
  1016  00E8  00E4               	movwf	??_write_dec
  1017  00E9  0864               	movf	??_write_dec,w
  1018  00EA  00BC               	movwf	_dec_array
  1019                           
  1020                           ;tarti.c: 252: value = -value;
  1021  00EB  09E0               	comf	write_dec@value,f
  1022  00EC  09E1               	comf	write_dec@value+1,f
  1023  00ED  09E2               	comf	write_dec@value+2,f
  1024  00EE  09E3               	comf	write_dec@value+3,f
  1025  00EF  0AE0               	incf	write_dec@value,f
  1026  00F0  1903               	skipnz
  1027  00F1  0AE1               	incf	write_dec@value+1,f
  1028  00F2  1903               	skipnz
  1029  00F3  0AE2               	incf	write_dec@value+2,f
  1030  00F4  1903               	skipnz
  1031  00F5  0AE3               	incf	write_dec@value+3,f
  1032                           
  1033                           ;tarti.c: 253: }
  1034  00F6  28FB               	goto	l1228
  1035  00F7                     l1226:	
  1036                           
  1037                           ;tarti.c: 254: else
  1038                           ;tarti.c: 255: dec_array[0] = '+';
  1039  00F7  302B               	movlw	43
  1040  00F8  00E4               	movwf	??_write_dec
  1041  00F9  0864               	movf	??_write_dec,w
  1042  00FA  00BC               	movwf	_dec_array
  1043  00FB                     l1228:	
  1044                           
  1045                           ;tarti.c: 257: dec_array[12 - 1] = (0);
  1046  00FB  01C7               	clrf	_dec_array+11
  1047                           
  1048                           ;tarti.c: 258: i=12 - 2;
  1049  00FC  300A               	movlw	10
  1050  00FD  00E5               	movwf	write_dec@i
  1051  00FE  3000               	movlw	0
  1052  00FF  00E6               	movwf	write_dec@i+1
  1053  0100                     l1238:	
  1054                           ;tarti.c: 260: while(value){
  1055                           
  1056  0100  0863               	movf	write_dec@value+3,w
  1057  0101  0462               	iorwf	write_dec@value+2,w
  1058  0102  0461               	iorwf	write_dec@value+1,w
  1059  0103  0460               	iorwf	write_dec@value,w
  1060  0104  1903               	btfsc	3,2
  1061  0105  2944               	goto	l1240
  1062                           
  1063                           ;tarti.c: 261: dec_array[i--]= value%10 + '0';
  1064  0106  3000               	movlw	0
  1065  0107  00D4               	movwf	___almod@divisor+3
  1066  0108  3000               	movlw	0
  1067  0109  00D3               	movwf	___almod@divisor+2
  1068  010A  3000               	movlw	0
  1069  010B  00D2               	movwf	___almod@divisor+1
  1070  010C  300A               	movlw	10
  1071  010D  00D1               	movwf	___almod@divisor
  1072  010E  0863               	movf	write_dec@value+3,w
  1073  010F  00D8               	movwf	___almod@dividend+3
  1074  0110  0862               	movf	write_dec@value+2,w
  1075  0111  00D7               	movwf	___almod@dividend+2
  1076  0112  0861               	movf	write_dec@value+1,w
  1077  0113  00D6               	movwf	___almod@dividend+1
  1078  0114  0860               	movf	write_dec@value,w
  1079  0115  00D5               	movwf	___almod@dividend
  1080  0116  21EF               	fcall	___almod
  1081  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1082  0118  1303               	bcf	3,6	;RP1=0, select bank0
  1083  0119  0851               	movf	?___almod,w
  1084  011A  3E30               	addlw	48
  1085  011B  00E4               	movwf	??_write_dec
  1086  011C  0865               	movf	write_dec@i,w
  1087  011D  3E3C               	addlw	(low (_dec_array| 0))& (0+255)
  1088  011E  0084               	movwf	4
  1089  011F  0864               	movf	??_write_dec,w
  1090  0120  1383               	bcf	3,7	;select IRP bank0
  1091  0121  0080               	movwf	0
  1092  0122  30FF               	movlw	255
  1093  0123  07E5               	addwf	write_dec@i,f
  1094  0124  1803               	skipnc
  1095  0125  0AE6               	incf	write_dec@i+1,f
  1096  0126  30FF               	movlw	255
  1097  0127  07E6               	addwf	write_dec@i+1,f
  1098                           
  1099                           ;tarti.c: 262: value /= 10;
  1100  0128  3000               	movlw	0
  1101  0129  00D4               	movwf	___aldiv@divisor+3
  1102  012A  3000               	movlw	0
  1103  012B  00D3               	movwf	___aldiv@divisor+2
  1104  012C  3000               	movlw	0
  1105  012D  00D2               	movwf	___aldiv@divisor+1
  1106  012E  300A               	movlw	10
  1107  012F  00D1               	movwf	___aldiv@divisor
  1108  0130  0863               	movf	write_dec@value+3,w
  1109  0131  00D8               	movwf	___aldiv@dividend+3
  1110  0132  0862               	movf	write_dec@value+2,w
  1111  0133  00D7               	movwf	___aldiv@dividend+2
  1112  0134  0861               	movf	write_dec@value+1,w
  1113  0135  00D6               	movwf	___aldiv@dividend+1
  1114  0136  0860               	movf	write_dec@value,w
  1115  0137  00D5               	movwf	___aldiv@dividend
  1116  0138  2160               	fcall	___aldiv
  1117  0139  1283               	bcf	3,5	;RP0=0, select bank0
  1118  013A  1303               	bcf	3,6	;RP1=0, select bank0
  1119  013B  0854               	movf	?___aldiv+3,w
  1120  013C  00E3               	movwf	write_dec@value+3
  1121  013D  0853               	movf	?___aldiv+2,w
  1122  013E  00E2               	movwf	write_dec@value+2
  1123  013F  0852               	movf	?___aldiv+1,w
  1124  0140  00E1               	movwf	write_dec@value+1
  1125  0141  0851               	movf	?___aldiv,w
  1126  0142  00E0               	movwf	write_dec@value
  1127  0143  2900               	goto	l1238
  1128  0144                     l1240:	
  1129                           
  1130                           ;tarti.c: 263: }
  1131                           ;tarti.c: 265: for(;i>0;i--)
  1132  0144  0866               	movf	write_dec@i+1,w
  1133  0145  3A80               	xorlw	128
  1134  0146  00FF               	movwf	127
  1135  0147  3080               	movlw	128
  1136  0148  027F               	subwf	127,w
  1137  0149  1D03               	skipz
  1138  014A  294D               	goto	u1335
  1139  014B  3001               	movlw	1
  1140  014C  0265               	subwf	write_dec@i,w
  1141  014D                     u1335:	
  1142  014D  1C03               	btfss	3,0
  1143  014E  0008               	return
  1144                           
  1145                           ;tarti.c: 266: dec_array[i] = '0';
  1146  014F  3030               	movlw	48
  1147  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1148  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0152  00E4               	movwf	??_write_dec
  1150  0153  0865               	movf	write_dec@i,w
  1151  0154  3E3C               	addlw	(low (_dec_array| 0))& (0+255)
  1152  0155  0084               	movwf	4
  1153  0156  0864               	movf	??_write_dec,w
  1154  0157  1383               	bcf	3,7	;select IRP bank0
  1155  0158  0080               	movwf	0
  1156  0159  30FF               	movlw	255
  1157  015A  07E5               	addwf	write_dec@i,f
  1158  015B  1803               	skipnc
  1159  015C  0AE6               	incf	write_dec@i+1,f
  1160  015D  30FF               	movlw	255
  1161  015E  07E6               	addwf	write_dec@i+1,f
  1162  015F  2944               	goto	l1240
  1163  0160                     __end_of_write_dec:	
  1164                           
  1165                           	psect	text6
  1166  0326                     __ptext6:	
  1167 ;; *************** function ___lmul *****************
  1168 ;; Defined at:
  1169 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1172 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  product         4    9[BANK0 ] unsigned long 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  4    0[BANK0 ] unsigned long 
  1177 ;; Registers used:
  1178 ;;		wreg, status,2, status,0
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1184 ;;      Params:         0       8       0       0
  1185 ;;      Locals:         0       4       0       0
  1186 ;;      Temps:          0       1       0       0
  1187 ;;      Totals:         0      13       0       0
  1188 ;;Total ram usage:       13 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; Hardware stack levels required when called:    1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_write_dec
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           
  1199                           ;psect for function ___lmul
  1200  0326                     ___lmul:	
  1201                           
  1202                           ;incstack = 0
  1203                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1204  0326  3000               	movlw	0
  1205  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1206  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1207  0329  00DD               	movwf	___lmul@product+3
  1208  032A  3000               	movlw	0
  1209  032B  00DC               	movwf	___lmul@product+2
  1210  032C  3000               	movlw	0
  1211  032D  00DB               	movwf	___lmul@product+1
  1212  032E  3000               	movlw	0
  1213  032F  00DA               	movwf	___lmul@product
  1214  0330                     l1100:	
  1215  0330  1C51               	btfss	___lmul@multiplier,0
  1216  0331  2B46               	goto	l1104
  1217  0332  0855               	movf	___lmul@multiplicand,w
  1218  0333  07DA               	addwf	___lmul@product,f
  1219  0334  0856               	movf	___lmul@multiplicand+1,w
  1220  0335  1103               	clrz
  1221  0336  1803               	skipnc
  1222  0337  3E01               	addlw	1
  1223  0338  1D03               	btfss	3,2
  1224  0339  07DB               	addwf	___lmul@product+1,f
  1225  033A  0857               	movf	___lmul@multiplicand+2,w
  1226  033B  1103               	clrz
  1227  033C  1803               	skipnc
  1228  033D  3E01               	addlw	1
  1229  033E  1D03               	btfss	3,2
  1230  033F  07DC               	addwf	___lmul@product+2,f
  1231  0340  0858               	movf	___lmul@multiplicand+3,w
  1232  0341  1103               	clrz
  1233  0342  1803               	skipnc
  1234  0343  3E01               	addlw	1
  1235  0344  1D03               	btfss	3,2
  1236  0345  07DD               	addwf	___lmul@product+3,f
  1237  0346                     l1104:	
  1238  0346  3001               	movlw	1
  1239  0347  00D9               	movwf	??___lmul
  1240  0348                     u1025:	
  1241  0348  1003               	clrc
  1242  0349  0DD5               	rlf	___lmul@multiplicand,f
  1243  034A  0DD6               	rlf	___lmul@multiplicand+1,f
  1244  034B  0DD7               	rlf	___lmul@multiplicand+2,f
  1245  034C  0DD8               	rlf	___lmul@multiplicand+3,f
  1246  034D  0BD9               	decfsz	??___lmul,f
  1247  034E  2B48               	goto	u1025
  1248  034F  3001               	movlw	1
  1249  0350                     u1035:	
  1250  0350  1003               	clrc
  1251  0351  0CD4               	rrf	___lmul@multiplier+3,f
  1252  0352  0CD3               	rrf	___lmul@multiplier+2,f
  1253  0353  0CD2               	rrf	___lmul@multiplier+1,f
  1254  0354  0CD1               	rrf	___lmul@multiplier,f
  1255  0355  3EFF               	addlw	-1
  1256  0356  1D03               	skipz
  1257  0357  2B50               	goto	u1035
  1258  0358  0854               	movf	___lmul@multiplier+3,w
  1259  0359  0453               	iorwf	___lmul@multiplier+2,w
  1260  035A  0452               	iorwf	___lmul@multiplier+1,w
  1261  035B  0451               	iorwf	___lmul@multiplier,w
  1262  035C  1D03               	skipz
  1263  035D  2B30               	goto	l1100
  1264  035E  085D               	movf	___lmul@product+3,w
  1265  035F  00D4               	movwf	?___lmul+3
  1266  0360  085C               	movf	___lmul@product+2,w
  1267  0361  00D3               	movwf	?___lmul+2
  1268  0362  085B               	movf	___lmul@product+1,w
  1269  0363  00D2               	movwf	?___lmul+1
  1270  0364  085A               	movf	___lmul@product,w
  1271  0365  00D1               	movwf	?___lmul
  1272  0366  0008               	return
  1273  0367                     __end_of___lmul:	
  1274                           
  1275                           	psect	text7
  1276  01EF                     __ptext7:	
  1277 ;; *************** function ___almod *****************
  1278 ;; Defined at:
  1279 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  divisor         4    0[BANK0 ] long 
  1282 ;;  dividend        4    4[BANK0 ] long 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  sign            1   10[BANK0 ] unsigned char 
  1285 ;;  counter         1    9[BANK0 ] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  4    0[BANK0 ] long 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1295 ;;      Params:         0       8       0       0
  1296 ;;      Locals:         0       2       0       0
  1297 ;;      Temps:          0       1       0       0
  1298 ;;      Totals:         0      11       0       0
  1299 ;;Total ram usage:       11 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    1
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_write_dec
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function ___almod
  1311  01EF                     ___almod:	
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in ___almod: [wreg+status,2+status,0]
  1315  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  1316  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  1317  01F1  01DB               	clrf	___almod@sign
  1318  01F2  1FD8               	btfss	___almod@dividend+3,7
  1319  01F3  2A01               	goto	l296
  1320  01F4  09D5               	comf	___almod@dividend,f
  1321  01F5  09D6               	comf	___almod@dividend+1,f
  1322  01F6  09D7               	comf	___almod@dividend+2,f
  1323  01F7  09D8               	comf	___almod@dividend+3,f
  1324  01F8  0AD5               	incf	___almod@dividend,f
  1325  01F9  1903               	skipnz
  1326  01FA  0AD6               	incf	___almod@dividend+1,f
  1327  01FB  1903               	skipnz
  1328  01FC  0AD7               	incf	___almod@dividend+2,f
  1329  01FD  1903               	skipnz
  1330  01FE  0AD8               	incf	___almod@dividend+3,f
  1331  01FF  01DB               	clrf	___almod@sign
  1332  0200  0ADB               	incf	___almod@sign,f
  1333  0201                     l296:	
  1334  0201  1FD4               	btfss	___almod@divisor+3,7
  1335  0202  2A0E               	goto	l1160
  1336  0203  09D1               	comf	___almod@divisor,f
  1337  0204  09D2               	comf	___almod@divisor+1,f
  1338  0205  09D3               	comf	___almod@divisor+2,f
  1339  0206  09D4               	comf	___almod@divisor+3,f
  1340  0207  0AD1               	incf	___almod@divisor,f
  1341  0208  1903               	skipnz
  1342  0209  0AD2               	incf	___almod@divisor+1,f
  1343  020A  1903               	skipnz
  1344  020B  0AD3               	incf	___almod@divisor+2,f
  1345  020C  1903               	skipnz
  1346  020D  0AD4               	incf	___almod@divisor+3,f
  1347  020E                     l1160:	
  1348  020E  0854               	movf	___almod@divisor+3,w
  1349  020F  0453               	iorwf	___almod@divisor+2,w
  1350  0210  0452               	iorwf	___almod@divisor+1,w
  1351  0211  0451               	iorwf	___almod@divisor,w
  1352  0212  1903               	skipnz
  1353  0213  2A51               	goto	l1176
  1354  0214  01DA               	clrf	___almod@counter
  1355  0215  0ADA               	incf	___almod@counter,f
  1356  0216                     l1166:	
  1357  0216  1BD4               	btfsc	___almod@divisor+3,7
  1358  0217  2A26               	goto	l1168
  1359  0218  3001               	movlw	1
  1360  0219  00D9               	movwf	??___almod
  1361  021A                     u1185:	
  1362  021A  1003               	clrc
  1363  021B  0DD1               	rlf	___almod@divisor,f
  1364  021C  0DD2               	rlf	___almod@divisor+1,f
  1365  021D  0DD3               	rlf	___almod@divisor+2,f
  1366  021E  0DD4               	rlf	___almod@divisor+3,f
  1367  021F  0BD9               	decfsz	??___almod,f
  1368  0220  2A1A               	goto	u1185
  1369  0221  3001               	movlw	1
  1370  0222  00D9               	movwf	??___almod
  1371  0223  0859               	movf	??___almod,w
  1372  0224  07DA               	addwf	___almod@counter,f
  1373  0225  2A16               	goto	l1166
  1374  0226                     l1168:	
  1375  0226  0854               	movf	___almod@divisor+3,w
  1376  0227  0258               	subwf	___almod@dividend+3,w
  1377  0228  1D03               	skipz
  1378  0229  2A34               	goto	u1205
  1379  022A  0853               	movf	___almod@divisor+2,w
  1380  022B  0257               	subwf	___almod@dividend+2,w
  1381  022C  1D03               	skipz
  1382  022D  2A34               	goto	u1205
  1383  022E  0852               	movf	___almod@divisor+1,w
  1384  022F  0256               	subwf	___almod@dividend+1,w
  1385  0230  1D03               	skipz
  1386  0231  2A34               	goto	u1205
  1387  0232  0851               	movf	___almod@divisor,w
  1388  0233  0255               	subwf	___almod@dividend,w
  1389  0234                     u1205:	
  1390  0234  1C03               	skipc
  1391  0235  2A44               	goto	l1172
  1392  0236  0851               	movf	___almod@divisor,w
  1393  0237  02D5               	subwf	___almod@dividend,f
  1394  0238  0852               	movf	___almod@divisor+1,w
  1395  0239  1C03               	skipc
  1396  023A  0F52               	incfsz	___almod@divisor+1,w
  1397  023B  02D6               	subwf	___almod@dividend+1,f
  1398  023C  0853               	movf	___almod@divisor+2,w
  1399  023D  1C03               	skipc
  1400  023E  0F53               	incfsz	___almod@divisor+2,w
  1401  023F  02D7               	subwf	___almod@dividend+2,f
  1402  0240  0854               	movf	___almod@divisor+3,w
  1403  0241  1C03               	skipc
  1404  0242  0F54               	incfsz	___almod@divisor+3,w
  1405  0243  02D8               	subwf	___almod@dividend+3,f
  1406  0244                     l1172:	
  1407  0244  3001               	movlw	1
  1408  0245                     u1215:	
  1409  0245  1003               	clrc
  1410  0246  0CD4               	rrf	___almod@divisor+3,f
  1411  0247  0CD3               	rrf	___almod@divisor+2,f
  1412  0248  0CD2               	rrf	___almod@divisor+1,f
  1413  0249  0CD1               	rrf	___almod@divisor,f
  1414  024A  3EFF               	addlw	-1
  1415  024B  1D03               	skipz
  1416  024C  2A45               	goto	u1215
  1417  024D  3001               	movlw	1
  1418  024E  02DA               	subwf	___almod@counter,f
  1419  024F  1D03               	btfss	3,2
  1420  0250  2A26               	goto	l1168
  1421  0251                     l1176:	
  1422  0251  085B               	movf	___almod@sign,w
  1423  0252  1903               	btfsc	3,2
  1424  0253  2A5F               	goto	l1180
  1425  0254  09D5               	comf	___almod@dividend,f
  1426  0255  09D6               	comf	___almod@dividend+1,f
  1427  0256  09D7               	comf	___almod@dividend+2,f
  1428  0257  09D8               	comf	___almod@dividend+3,f
  1429  0258  0AD5               	incf	___almod@dividend,f
  1430  0259  1903               	skipnz
  1431  025A  0AD6               	incf	___almod@dividend+1,f
  1432  025B  1903               	skipnz
  1433  025C  0AD7               	incf	___almod@dividend+2,f
  1434  025D  1903               	skipnz
  1435  025E  0AD8               	incf	___almod@dividend+3,f
  1436  025F                     l1180:	
  1437  025F  0858               	movf	___almod@dividend+3,w
  1438  0260  00D4               	movwf	?___almod+3
  1439  0261  0857               	movf	___almod@dividend+2,w
  1440  0262  00D3               	movwf	?___almod+2
  1441  0263  0856               	movf	___almod@dividend+1,w
  1442  0264  00D2               	movwf	?___almod+1
  1443  0265  0855               	movf	___almod@dividend,w
  1444  0266  00D1               	movwf	?___almod
  1445  0267  0008               	return
  1446  0268                     __end_of___almod:	
  1447                           
  1448                           	psect	text8
  1449  0160                     __ptext8:	
  1450 ;; *************** function ___aldiv *****************
  1451 ;; Defined at:
  1452 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  divisor         4    0[BANK0 ] long 
  1455 ;;  dividend        4    4[BANK0 ] long 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  quotient        4   11[BANK0 ] long 
  1458 ;;  sign            1   10[BANK0 ] unsigned char 
  1459 ;;  counter         1    9[BANK0 ] unsigned char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  4    0[BANK0 ] long 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2, status,0
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1469 ;;      Params:         0       8       0       0
  1470 ;;      Locals:         0       6       0       0
  1471 ;;      Temps:          0       1       0       0
  1472 ;;      Totals:         0      15       0       0
  1473 ;;Total ram usage:       15 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    1
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_write_dec
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           
  1484                           ;psect for function ___aldiv
  1485  0160                     ___aldiv:	
  1486                           
  1487                           ;incstack = 0
  1488                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1489  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1490  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1491  0162  01DB               	clrf	___aldiv@sign
  1492  0163  1FD4               	btfss	___aldiv@divisor+3,7
  1493  0164  2972               	goto	l283
  1494  0165  09D1               	comf	___aldiv@divisor,f
  1495  0166  09D2               	comf	___aldiv@divisor+1,f
  1496  0167  09D3               	comf	___aldiv@divisor+2,f
  1497  0168  09D4               	comf	___aldiv@divisor+3,f
  1498  0169  0AD1               	incf	___aldiv@divisor,f
  1499  016A  1903               	skipnz
  1500  016B  0AD2               	incf	___aldiv@divisor+1,f
  1501  016C  1903               	skipnz
  1502  016D  0AD3               	incf	___aldiv@divisor+2,f
  1503  016E  1903               	skipnz
  1504  016F  0AD4               	incf	___aldiv@divisor+3,f
  1505  0170  01DB               	clrf	___aldiv@sign
  1506  0171  0ADB               	incf	___aldiv@sign,f
  1507  0172                     l283:	
  1508  0172  1FD8               	btfss	___aldiv@dividend+3,7
  1509  0173  2983               	goto	l1122
  1510  0174  09D5               	comf	___aldiv@dividend,f
  1511  0175  09D6               	comf	___aldiv@dividend+1,f
  1512  0176  09D7               	comf	___aldiv@dividend+2,f
  1513  0177  09D8               	comf	___aldiv@dividend+3,f
  1514  0178  0AD5               	incf	___aldiv@dividend,f
  1515  0179  1903               	skipnz
  1516  017A  0AD6               	incf	___aldiv@dividend+1,f
  1517  017B  1903               	skipnz
  1518  017C  0AD7               	incf	___aldiv@dividend+2,f
  1519  017D  1903               	skipnz
  1520  017E  0AD8               	incf	___aldiv@dividend+3,f
  1521  017F  3001               	movlw	1
  1522  0180  00D9               	movwf	??___aldiv
  1523  0181  0859               	movf	??___aldiv,w
  1524  0182  06DB               	xorwf	___aldiv@sign,f
  1525  0183                     l1122:	
  1526  0183  3000               	movlw	0
  1527  0184  00DF               	movwf	___aldiv@quotient+3
  1528  0185  3000               	movlw	0
  1529  0186  00DE               	movwf	___aldiv@quotient+2
  1530  0187  3000               	movlw	0
  1531  0188  00DD               	movwf	___aldiv@quotient+1
  1532  0189  3000               	movlw	0
  1533  018A  00DC               	movwf	___aldiv@quotient
  1534  018B  0854               	movf	___aldiv@divisor+3,w
  1535  018C  0453               	iorwf	___aldiv@divisor+2,w
  1536  018D  0452               	iorwf	___aldiv@divisor+1,w
  1537  018E  0451               	iorwf	___aldiv@divisor,w
  1538  018F  1903               	skipnz
  1539  0190  29D8               	goto	l1144
  1540  0191  01DA               	clrf	___aldiv@counter
  1541  0192  0ADA               	incf	___aldiv@counter,f
  1542  0193                     l1130:	
  1543  0193  1BD4               	btfsc	___aldiv@divisor+3,7
  1544  0194  29A3               	goto	l1132
  1545  0195  3001               	movlw	1
  1546  0196  00D9               	movwf	??___aldiv
  1547  0197                     u1085:	
  1548  0197  1003               	clrc
  1549  0198  0DD1               	rlf	___aldiv@divisor,f
  1550  0199  0DD2               	rlf	___aldiv@divisor+1,f
  1551  019A  0DD3               	rlf	___aldiv@divisor+2,f
  1552  019B  0DD4               	rlf	___aldiv@divisor+3,f
  1553  019C  0BD9               	decfsz	??___aldiv,f
  1554  019D  2997               	goto	u1085
  1555  019E  3001               	movlw	1
  1556  019F  00D9               	movwf	??___aldiv
  1557  01A0  0859               	movf	??___aldiv,w
  1558  01A1  07DA               	addwf	___aldiv@counter,f
  1559  01A2  2993               	goto	l1130
  1560  01A3                     l1132:	
  1561  01A3  3001               	movlw	1
  1562  01A4  00D9               	movwf	??___aldiv
  1563  01A5                     u1105:	
  1564  01A5  1003               	clrc
  1565  01A6  0DDC               	rlf	___aldiv@quotient,f
  1566  01A7  0DDD               	rlf	___aldiv@quotient+1,f
  1567  01A8  0DDE               	rlf	___aldiv@quotient+2,f
  1568  01A9  0DDF               	rlf	___aldiv@quotient+3,f
  1569  01AA  0BD9               	decfsz	??___aldiv,f
  1570  01AB  29A5               	goto	u1105
  1571  01AC  0854               	movf	___aldiv@divisor+3,w
  1572  01AD  0258               	subwf	___aldiv@dividend+3,w
  1573  01AE  1D03               	skipz
  1574  01AF  29BA               	goto	u1115
  1575  01B0  0853               	movf	___aldiv@divisor+2,w
  1576  01B1  0257               	subwf	___aldiv@dividend+2,w
  1577  01B2  1D03               	skipz
  1578  01B3  29BA               	goto	u1115
  1579  01B4  0852               	movf	___aldiv@divisor+1,w
  1580  01B5  0256               	subwf	___aldiv@dividend+1,w
  1581  01B6  1D03               	skipz
  1582  01B7  29BA               	goto	u1115
  1583  01B8  0851               	movf	___aldiv@divisor,w
  1584  01B9  0255               	subwf	___aldiv@dividend,w
  1585  01BA                     u1115:	
  1586  01BA  1C03               	skipc
  1587  01BB  29CB               	goto	l1140
  1588  01BC  0851               	movf	___aldiv@divisor,w
  1589  01BD  02D5               	subwf	___aldiv@dividend,f
  1590  01BE  0852               	movf	___aldiv@divisor+1,w
  1591  01BF  1C03               	skipc
  1592  01C0  0F52               	incfsz	___aldiv@divisor+1,w
  1593  01C1  02D6               	subwf	___aldiv@dividend+1,f
  1594  01C2  0853               	movf	___aldiv@divisor+2,w
  1595  01C3  1C03               	skipc
  1596  01C4  0F53               	incfsz	___aldiv@divisor+2,w
  1597  01C5  02D7               	subwf	___aldiv@dividend+2,f
  1598  01C6  0854               	movf	___aldiv@divisor+3,w
  1599  01C7  1C03               	skipc
  1600  01C8  0F54               	incfsz	___aldiv@divisor+3,w
  1601  01C9  02D8               	subwf	___aldiv@dividend+3,f
  1602  01CA  145C               	bsf	___aldiv@quotient,0
  1603  01CB                     l1140:	
  1604  01CB  3001               	movlw	1
  1605  01CC                     u1125:	
  1606  01CC  1003               	clrc
  1607  01CD  0CD4               	rrf	___aldiv@divisor+3,f
  1608  01CE  0CD3               	rrf	___aldiv@divisor+2,f
  1609  01CF  0CD2               	rrf	___aldiv@divisor+1,f
  1610  01D0  0CD1               	rrf	___aldiv@divisor,f
  1611  01D1  3EFF               	addlw	-1
  1612  01D2  1D03               	skipz
  1613  01D3  29CC               	goto	u1125
  1614  01D4  3001               	movlw	1
  1615  01D5  02DA               	subwf	___aldiv@counter,f
  1616  01D6  1D03               	btfss	3,2
  1617  01D7  29A3               	goto	l1132
  1618  01D8                     l1144:	
  1619  01D8  085B               	movf	___aldiv@sign,w
  1620  01D9  1903               	btfsc	3,2
  1621  01DA  29E6               	goto	l1148
  1622  01DB  09DC               	comf	___aldiv@quotient,f
  1623  01DC  09DD               	comf	___aldiv@quotient+1,f
  1624  01DD  09DE               	comf	___aldiv@quotient+2,f
  1625  01DE  09DF               	comf	___aldiv@quotient+3,f
  1626  01DF  0ADC               	incf	___aldiv@quotient,f
  1627  01E0  1903               	skipnz
  1628  01E1  0ADD               	incf	___aldiv@quotient+1,f
  1629  01E2  1903               	skipnz
  1630  01E3  0ADE               	incf	___aldiv@quotient+2,f
  1631  01E4  1903               	skipnz
  1632  01E5  0ADF               	incf	___aldiv@quotient+3,f
  1633  01E6                     l1148:	
  1634  01E6  085F               	movf	___aldiv@quotient+3,w
  1635  01E7  00D4               	movwf	?___aldiv+3
  1636  01E8  085E               	movf	___aldiv@quotient+2,w
  1637  01E9  00D3               	movwf	?___aldiv+2
  1638  01EA  085D               	movf	___aldiv@quotient+1,w
  1639  01EB  00D2               	movwf	?___aldiv+1
  1640  01EC  085C               	movf	___aldiv@quotient,w
  1641  01ED  00D1               	movwf	?___aldiv
  1642  01EE  0008               	return
  1643  01EF                     __end_of___aldiv:	
  1644                           
  1645                           	psect	text9
  1646  0268                     __ptext9:	
  1647 ;; *************** function _read_tarti *****************
  1648 ;; Defined at:
  1649 ;;		line 171 in file "tarti.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  i               2    6[BANK0 ] int 
  1654 ;;  kl              2    4[BANK0 ] int 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0, btemp+1
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1664 ;;      Params:         0       0       0       0
  1665 ;;      Locals:         0       4       0       0
  1666 ;;      Temps:          0       4       0       0
  1667 ;;      Totals:         0       8       0       0
  1668 ;;Total ram usage:        8 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    1
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;;		_set_offset
  1676 ;;		_measure_force
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           
  1681                           ;psect for function _read_tarti
  1682  0268                     _read_tarti:	
  1683                           
  1684                           ;tarti.c: 173: PORTAbits.RA0=0;
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _read_tarti: [wreg+status,2+status,0+btemp+1]
  1688  0268  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0269  1303               	bcf	3,6	;RP1=0, select bank0
  1690  026A  1005               	bcf	5,0	;volatile
  1691  026B                     l112:	
  1692                           ;tarti.c: 174: while(PORTAbits.RA3==1);
  1693                           
  1694  026B  1985               	btfsc	5,3	;volatile
  1695  026C  2A6B               	goto	l112
  1696                           
  1697                           ;tarti.c: 176: for(int kl=0;kl<25;kl++){
  1698  026D  01D5               	clrf	read_tarti@kl
  1699  026E  01D6               	clrf	read_tarti@kl+1
  1700  026F  0856               	movf	read_tarti@kl+1,w
  1701  0270  3A80               	xorlw	128
  1702  0271  00FF               	movwf	127
  1703  0272  3080               	movlw	128
  1704  0273  027F               	subwf	127,w
  1705  0274  1D03               	skipz
  1706  0275  2A78               	goto	u1255
  1707  0276  3019               	movlw	25
  1708  0277  0255               	subwf	read_tarti@kl,w
  1709  0278                     u1255:	
  1710  0278  1803               	btfsc	3,0
  1711  0279  2A8F               	goto	l117
  1712  027A                     l115:	
  1713                           
  1714                           ;tarti.c: 177: PORTAbits.RA0=1;
  1715  027A  1283               	bcf	3,5	;RP0=0, select bank0
  1716  027B  1303               	bcf	3,6	;RP1=0, select bank0
  1717  027C  1405               	bsf	5,0	;volatile
  1718                           
  1719                           ;tarti.c: 178: PORTAbits.RA0=0;
  1720  027D  1005               	bcf	5,0	;volatile
  1721  027E  3001               	movlw	1
  1722  027F  07D5               	addwf	read_tarti@kl,f
  1723  0280  1803               	skipnc
  1724  0281  0AD6               	incf	read_tarti@kl+1,f
  1725  0282  3000               	movlw	0
  1726  0283  07D6               	addwf	read_tarti@kl+1,f
  1727  0284  0856               	movf	read_tarti@kl+1,w
  1728  0285  3A80               	xorlw	128
  1729  0286  00FF               	movwf	127
  1730  0287  3080               	movlw	128
  1731  0288  027F               	subwf	127,w
  1732  0289  1D03               	skipz
  1733  028A  2A8D               	goto	u1265
  1734  028B  3019               	movlw	25
  1735  028C  0255               	subwf	read_tarti@kl,w
  1736  028D                     u1265:	
  1737  028D  1C03               	skipc
  1738  028E  2A7A               	goto	l115
  1739  028F                     l117:	
  1740                           ;tarti.c: 179: }
  1741                           ;tarti.c: 181: while(PORTAbits.RA3==1);
  1742                           
  1743  028F  1283               	bcf	3,5	;RP0=0, select bank0
  1744  0290  1303               	bcf	3,6	;RP1=0, select bank0
  1745  0291  1985               	btfsc	5,3	;volatile
  1746  0292  2A8F               	goto	l117
  1747                           
  1748                           ;tarti.c: 182: measure_val = 0;
  1749  0293  3000               	movlw	0
  1750  0294  00CE               	movwf	_measure_val
  1751  0295  3000               	movlw	0
  1752  0296  00CF               	movwf	_measure_val+1
  1753  0297  3000               	movlw	0
  1754  0298  00D0               	movwf	_measure_val+2
  1755                           
  1756                           ;tarti.c: 183: for(int i=0; i<24; i++){
  1757  0299  01D7               	clrf	read_tarti@i
  1758  029A  01D8               	clrf	read_tarti@i+1
  1759  029B  0858               	movf	read_tarti@i+1,w
  1760  029C  3A80               	xorlw	128
  1761  029D  00FF               	movwf	127
  1762  029E  3080               	movlw	128
  1763  029F  027F               	subwf	127,w
  1764  02A0  1D03               	skipz
  1765  02A1  2AA4               	goto	u1285
  1766  02A2  3018               	movlw	24
  1767  02A3  0257               	subwf	read_tarti@i,w
  1768  02A4                     u1285:	
  1769  02A4  1803               	btfsc	3,0
  1770  02A5  2AD1               	goto	l121
  1771  02A6                     l120:	
  1772                           
  1773                           ;tarti.c: 184: PORTAbits.RA0=1;
  1774  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  1775  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  1776  02A8  1405               	bsf	5,0	;volatile
  1777                           
  1778                           ;tarti.c: 185: measure_val <<= 1;
  1779  02A9  3001               	movlw	1
  1780  02AA                     u1295:	
  1781  02AA  1003               	clrc
  1782  02AB  0DCE               	rlf	_measure_val,f
  1783  02AC  0DCF               	rlf	_measure_val+1,f
  1784  02AD  0DD0               	rlf	_measure_val+2,f
  1785  02AE  3EFF               	addlw	-1
  1786  02AF  1D03               	skipz
  1787  02B0  2AAA               	goto	u1295
  1788                           
  1789                           ;tarti.c: 187: PORTAbits.RA0=0;
  1790  02B1  1005               	bcf	5,0	;volatile
  1791                           
  1792                           ;tarti.c: 188: measure_val |= PORTAbits.RA3;
  1793  02B2  0C05               	rrf	5,w	;volatile
  1794  02B3  00D1               	movwf	??_read_tarti
  1795  02B4  0CD1               	rrf	??_read_tarti,f
  1796  02B5  0C51               	rrf	??_read_tarti,w
  1797  02B6  3901               	andlw	1
  1798  02B7  00D2               	movwf	??_read_tarti+1
  1799  02B8  01D3               	clrf	??_read_tarti+2
  1800  02B9  01D4               	clrf	??_read_tarti+3
  1801  02BA  0852               	movf	??_read_tarti+1,w
  1802  02BB  04CE               	iorwf	_measure_val,f
  1803  02BC  0853               	movf	??_read_tarti+2,w
  1804  02BD  04CF               	iorwf	_measure_val+1,f
  1805  02BE  0854               	movf	??_read_tarti+3,w
  1806  02BF  04D0               	iorwf	_measure_val+2,f
  1807  02C0  3001               	movlw	1
  1808  02C1  07D7               	addwf	read_tarti@i,f
  1809  02C2  1803               	skipnc
  1810  02C3  0AD8               	incf	read_tarti@i+1,f
  1811  02C4  3000               	movlw	0
  1812  02C5  07D8               	addwf	read_tarti@i+1,f
  1813  02C6  0858               	movf	read_tarti@i+1,w
  1814  02C7  3A80               	xorlw	128
  1815  02C8  00FF               	movwf	127
  1816  02C9  3080               	movlw	128
  1817  02CA  027F               	subwf	127,w
  1818  02CB  1D03               	skipz
  1819  02CC  2ACF               	goto	u1305
  1820  02CD  3018               	movlw	24
  1821  02CE  0257               	subwf	read_tarti@i,w
  1822  02CF                     u1305:	
  1823  02CF  1C03               	skipc
  1824  02D0  2AA6               	goto	l120
  1825  02D1                     l121:	
  1826                           
  1827                           ;tarti.c: 189: }
  1828                           ;tarti.c: 191: PORTAbits.RA0=1;
  1829  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  1830  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  1831  02D3  1405               	bsf	5,0	;volatile
  1832                           
  1833                           ;tarti.c: 192: measure_val ^=0x800000;
  1834  02D4  3080               	movlw	128
  1835  02D5  06D0               	xorwf	_measure_val+2,f
  1836                           
  1837                           ;tarti.c: 193: PORTAbits.RA0=0;
  1838  02D6  1005               	bcf	5,0	;volatile
  1839  02D7  0008               	return
  1840  02D8                     __end_of_read_tarti:	
  1841                           
  1842                           	psect	text10
  1843  03C4                     __ptext10:	
  1844 ;; *************** function _T0_init *****************
  1845 ;; Defined at:
  1846 ;;		line 107 in file "tarti.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;		None
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;		None
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  1    wreg      void 
  1853 ;; Registers used:
  1854 ;;		None
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1860 ;;      Params:         0       0       0       0
  1861 ;;      Locals:         0       0       0       0
  1862 ;;      Temps:          0       0       0       0
  1863 ;;      Totals:         0       0       0       0
  1864 ;;Total ram usage:        0 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; Hardware stack levels required when called:    1
  1867 ;; This function calls:
  1868 ;;		Nothing
  1869 ;; This function is called by:
  1870 ;;		_main
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           
  1875                           ;psect for function _T0_init
  1876  03C4                     _T0_init:	
  1877                           
  1878                           ;tarti.c: 108: INTCONbits.GIE=1;
  1879                           
  1880                           ;incstack = 0
  1881                           ; Regs used in _T0_init: []
  1882  03C4  178B               	bsf	11,7	;volatile
  1883                           
  1884                           ;tarti.c: 109: INTCONbits.T0IE=1;
  1885  03C5  168B               	bsf	11,5	;volatile
  1886                           
  1887                           ;tarti.c: 110: INTCONbits.T0IF=0;
  1888  03C6  110B               	bcf	11,2	;volatile
  1889                           
  1890                           ;tarti.c: 112: OPTION_REGbits.T0CS=0;
  1891  03C7  1683               	bsf	3,5	;RP0=1, select bank1
  1892  03C8  1303               	bcf	3,6	;RP1=0, select bank1
  1893  03C9  1281               	bcf	1,5	;volatile
  1894                           
  1895                           ;tarti.c: 113: OPTION_REGbits.T0SE=0;
  1896  03CA  1201               	bcf	1,4	;volatile
  1897                           
  1898                           ;tarti.c: 114: OPTION_REGbits.PSA=0;
  1899  03CB  1181               	bcf	1,3	;volatile
  1900                           
  1901                           ;tarti.c: 115: OPTION_REGbits.PS0=0;
  1902  03CC  1001               	bcf	1,0	;volatile
  1903                           
  1904                           ;tarti.c: 116: OPTION_REGbits.PS1=0;
  1905  03CD  1081               	bcf	1,1	;volatile
  1906                           
  1907                           ;tarti.c: 117: OPTION_REGbits.PS2=0;
  1908  03CE  1101               	bcf	1,2	;volatile
  1909  03CF  0008               	return
  1910  03D0                     __end_of_T0_init:	
  1911                           
  1912                           	psect	text11
  1913  02D8                     __ptext11:	
  1914 ;; *************** function _kes *****************
  1915 ;; Defined at:
  1916 ;;		line 140 in file "tarti.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1930 ;;      Params:         0       0       0       0
  1931 ;;      Locals:         0       0       0       0
  1932 ;;      Temps:          5       0       0       0
  1933 ;;      Totals:         5       0       0       0
  1934 ;;Total ram usage:        5 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		Interrupt level 1
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           
  1944                           ;psect for function _kes
  1945  02D8                     _kes:	
  1946                           
  1947                           ;tarti.c: 141: if(INTCONbits.T0IF && INTCONbits.T0IE){
  1948  02D8  190B               	btfsc	11,2	;volatile
  1949  02D9  1E8B               	btfss	11,5	;volatile
  1950  02DA  2AEA               	goto	i1l846
  1951                           
  1952                           ;tarti.c: 142: timetick++;
  1953  02DB  3001               	movlw	1
  1954  02DC  07F5               	addwf	_timetick,f
  1955  02DD  3000               	movlw	0
  1956  02DE  1803               	skipnc
  1957  02DF  3001               	movlw	1
  1958  02E0  07F6               	addwf	_timetick+1,f
  1959  02E1  3000               	movlw	0
  1960  02E2  1803               	skipnc
  1961  02E3  3001               	movlw	1
  1962  02E4  07F7               	addwf	_timetick+2,f
  1963  02E5  3000               	movlw	0
  1964  02E6  1803               	skipnc
  1965  02E7  3001               	movlw	1
  1966  02E8  07F8               	addwf	_timetick+3,f
  1967                           
  1968                           ;tarti.c: 143: INTCONbits.T0IF=0;
  1969  02E9  110B               	bcf	11,2	;volatile
  1970  02EA                     i1l846:	
  1971                           
  1972                           ;tarti.c: 145: }
  1973                           ;tarti.c: 147: if(timetick>=10000){
  1974  02EA  0878               	movf	_timetick+3,w
  1975  02EB  1D03               	btfss	3,2
  1976  02EC  2AFA               	goto	i1l848
  1977  02ED  0877               	movf	_timetick+2,w
  1978  02EE  1D03               	btfss	3,2
  1979  02EF  2AFA               	goto	i1l848
  1980  02F0  3027               	movlw	39
  1981  02F1  0276               	subwf	_timetick+1,w
  1982  02F2  1D03               	skipz
  1983  02F3  2AF8               	goto	u50_23
  1984  02F4  3010               	movlw	16
  1985  02F5  0275               	subwf	_timetick,w
  1986  02F6  1D03               	skipz
  1987  02F7  2AF8               	goto	u50_23
  1988  02F8                     u50_23:	
  1989  02F8  1C03               	btfss	3,0
  1990  02F9  2B02               	goto	i1l850
  1991  02FA                     i1l848:	
  1992                           
  1993                           ;tarti.c: 148: timetick=0;
  1994  02FA  3000               	movlw	0
  1995  02FB  00F8               	movwf	_timetick+3
  1996  02FC  3000               	movlw	0
  1997  02FD  00F7               	movwf	_timetick+2
  1998  02FE  3000               	movlw	0
  1999  02FF  00F6               	movwf	_timetick+1
  2000  0300  3000               	movlw	0
  2001  0301  00F5               	movwf	_timetick
  2002  0302                     i1l850:	
  2003                           
  2004                           ;tarti.c: 149: }
  2005                           ;tarti.c: 151: if(PIR1bits.RCIF){
  2006  0302  1E8C               	btfss	12,5	;volatile
  2007  0303  2B12               	goto	i1l856
  2008                           
  2009                           ;tarti.c: 152: tarti.command[tarti.wr_index]=RCREG;
  2010  0304  081A               	movf	26,w	;volatile
  2011  0305  00F0               	movwf	??_kes
  2012  0306  0838               	movf	_tarti+24,w
  2013  0307  3E20               	addlw	(low (_tarti| 0))& (0+255)
  2014  0308  0084               	movwf	4
  2015  0309  0870               	movf	??_kes,w
  2016  030A  1383               	bcf	3,7	;select IRP bank0
  2017  030B  0080               	movwf	0
  2018                           
  2019                           ;tarti.c: 154: tarti.wr_index++;
  2020  030C  3001               	movlw	1
  2021  030D  07B8               	addwf	_tarti+24,f
  2022  030E  1803               	skipnc
  2023  030F  0AB9               	incf	_tarti+25,f
  2024  0310  3000               	movlw	0
  2025  0311  07B9               	addwf	_tarti+25,f
  2026  0312                     i1l856:	
  2027                           
  2028                           ;tarti.c: 155: }
  2029                           ;tarti.c: 157: if(tarti.wr_index>=24)
  2030  0312  3000               	movlw	0
  2031  0313  0239               	subwf	_tarti+25,w
  2032  0314  3018               	movlw	24
  2033  0315  1903               	skipnz
  2034  0316  0238               	subwf	_tarti+24,w
  2035  0317  1C03               	skipc
  2036  0318  2B1B               	goto	i1l106
  2037                           
  2038                           ;tarti.c: 158: tarti.wr_index=0;
  2039  0319  01B8               	clrf	_tarti+24
  2040  031A  01B9               	clrf	_tarti+25
  2041  031B                     i1l106:	
  2042  031B  0874               	movf	??_kes+4,w
  2043  031C  00FF               	movwf	127
  2044  031D  0873               	movf	??_kes+3,w
  2045  031E  008A               	movwf	10
  2046  031F  0872               	movf	??_kes+2,w
  2047  0320  0084               	movwf	4
  2048  0321  0E71               	swapf	(??_kes+1)^(0+-128),w
  2049  0322  0083               	movwf	3
  2050  0323  0EFE               	swapf	126,f
  2051  0324  0E7E               	swapf	126,w
  2052  0325  0009               	retfie
  2053  0326                     __end_of_kes:	
  2054  007E                     btemp	set	126	;btemp
  2055  007E                     wtemp0	set	126
  2056                           
  2057                           	psect	intentry
  2058  0004                     __pintentry:	
  2059                           ;incstack = 0
  2060                           ; Regs used in _kes: [wreg-fsr0h+status,2+status,0]
  2061                           
  2062  0004                     interrupt_function:	
  2063  007E                     saved_w	set	btemp
  2064  0004  00FE               	movwf	btemp
  2065  0005  0E03               	swapf	3,w
  2066  0006  00F1               	movwf	??_kes+1
  2067  0007  0804               	movf	4,w
  2068  0008  00F2               	movwf	??_kes+2
  2069  0009  080A               	movf	10,w
  2070  000A  00F3               	movwf	??_kes+3
  2071  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2072  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2073  000D  087F               	movf	btemp+1,w
  2074  000E  00F4               	movwf	??_kes+4
  2075  000F  2AD8               	ljmp	_kes


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     28      77
    BANK1            80      4       4
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _kes in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_measure_force
    _set_offset->_write_dec
    _measure_force->_write_dec
    _write_dec->___aldiv

Critical Paths under _kes in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _kes in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _kes in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    4466
                                             25 BANK0      3     3      0
                                              0 BANK1      4     4      0
                            _T0_init
                      _measure_force
                         _read_tarti
                        _serial_init
                         _set_offset
                         _tarti_init
 ---------------------------------------------------------------------------------
 (1) _tarti_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_offset                                           1     1      0    2066
                                             22 BANK0      1     1      0
                         _read_tarti
                          _write_dec
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_force                                        3     3      0    2066
                                             22 BANK0      3     3      0
                         _read_tarti
                          _write_dec
 ---------------------------------------------------------------------------------
 (2) _write_dec                                            7     3      4    1930
                                             15 BANK0      7     3      4
                            ___aldiv
                            ___almod
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     266
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     563
                                              0 BANK0     11     3      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     575
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _read_tarti                                           8     8      0     136
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _T0_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _kes                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _T0_init
   _measure_force
     _read_tarti
     _write_dec
       ___aldiv
       ___almod
       ___lmul
   _read_tarti
   _serial_init
   _set_offset
     _read_tarti
     _write_dec
       ___aldiv
       ___almod
       ___lmul
   _tarti_init

 _kes (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     1C      4D       3       96.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      4       4       7        5.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      5A      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 02 17:34:18 2018

            __CFG_CP$OFF 0000                       l71 0079                       l80 0099  
                     l65 0052                       l74 0081                       l83 00B8  
                     l68 0071                       l86 00C0                       fsr 0004  
                    l120 02A6                      l112 026B                      l121 02D1  
                    l115 027A                      l117 028F                      l283 0172  
                    l296 0201             __CFG_CPD$OFF 0000                      _kes 02D8  
                    fsr0 0004                      indf 0000             __CFG_FOSC$HS 0000  
            main@cnt_335 00A2             __CFG_LVP$OFF 0000                     l1100 0330  
                   l1104 0346                     l1130 0193                     l1122 0183  
                   l1140 01CB                     l1132 01A3                     l1144 01D8  
                   l1160 020E                     l1240 0144                     l1226 00F7  
                   l1148 01E6                     l1180 025F                     l1172 0244  
                   l1228 00FB                     l1166 0216                     l1238 0100  
                   l1168 0226                     l1176 0251                     ?_kes 0070  
                   u1105 01A5                     u1025 0348                     u1115 01BA  
                   u1035 0350                     u1125 01CC                     u1205 0234  
                   u1215 0245                     u1305 02CF                     u1085 0197  
                   u1255 0278                     u1335 014D                     u1265 028D  
                   u1185 021A                     u1425 0097                     u1285 02A4  
                   u1445 00B6                     u1365 0050                     u1295 02AA  
                   u1385 006F                     u1477 0037          __end_of_T0_init 03D0  
         write_dec@value 0060                     _main 001C                     btemp 007E  
                   start 0010                    ??_kes 0070          __end_of___aldiv 01EF  
        __end_of___almod 0268                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _CMCON 001F                    i1l106 031B                    i1l850 0302  
                  i1l846 02EA                    i1l856 0312                    i1l848 02FA  
                  _RCREG 001A                    u50_23 02F8                    _SPBRG 0099  
                  _TRISB 0086                    _TXREG 0019      ___lmul@multiplicand 0055  
                  _force 0048                    _tarti 0020           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
 __size_of_measure_force 0029           __CFG_MCLRE$OFF 0000          __initialization 0011  
           __end_of_main 00C6                   ??_main 006A                ??_T0_init 0075  
         __CFG_PWRTE$OFF 0000             ?_serial_init 0070                   ___lmul 0326  
              ??___aldiv 0059                ??___almod 0059                   _offset 004B  
          _measure_force 0367                   saved_w 007E              read_tarti@i 0057  
__end_of__initialization 001A           __pcstackCOMMON 0070           ?_measure_force 0070  
         _OPTION_REGbits 0081               __pbssBANK0 0020               __pmaintext 001C  
                ?___lmul 0051               __pintentry 0004           ___lmul@product 005A  
                _T0_init 03C4       __size_of_write_dec 009A                  ___aldiv 0160  
                ___almod 01EF          __size_of___lmul 0041     __size_of_serial_init 0016  
        ??_measure_force 0067                  __ptext1 03D0                  __ptext2 0390  
                __ptext3 03AE                  __ptext4 0367                  __ptext5 00C6  
                __ptext6 0326                  __ptext7 01EF                  __ptext8 0160  
                __ptext9 0268               _read_tarti 0268             __size_of_kes 004E  
       ___aldiv@dividend 0055                  main@cnt 00A0                  clrloop0 03DA  
   end_of_initialization 001A               _set_offset 0390                _RCSTAbits 0018  
       ___aldiv@quotient 005C               _tarti_init 03D0                _PORTAbits 0005  
              _PORTBbits 0006             read_tarti@kl 0055        __end_of_write_dec 0160  
              _TRISAbits 0085                _TRISBbits 0086                _TXSTAbits 0098  
         __end_of___lmul 0367              ?_read_tarti 0070      start_initialization 0011  
            __end_of_kes 0326              ?_set_offset 0070                 ??___lmul 0059  
            ?_tarti_init 0070              __pbssCOMMON 0075                ___latbits 0000  
          __pcstackBANK0 0051            __pcstackBANK1 00A0                 ?_T0_init 0070  
              _dec_array 003C      __size_of_read_tarti 0070                 ?___aldiv 0051  
               ?___almod 0051         ___almod@dividend 0055      __size_of_set_offset 001E  
    __size_of_tarti_init 0009          ___aldiv@divisor 0051        interrupt_function 0004  
        ___aldiv@counter 005A                clear_ram0 03D9                 _PIE1bits 008C  
               _PIR1bits 000C            ??_serial_init 0075    __end_of_measure_force 0390  
       __size_of_T0_init 000C                _write_dec 00C6        ___lmul@multiplier 0051  
            _measure_val 004E         __size_of___aldiv 008F         __size_of___almod 0079  
    __end_of_serial_init 03C4             ??_read_tarti 0051                 __ptext10 03C4  
               __ptext11 02D8               ?_write_dec 0060          ___almod@divisor 0051  
        ___almod@counter 005A            __size_of_main 00AA       __end_of_read_tarti 02D8  
           ??_set_offset 0067             ??_tarti_init 0075                 _timetick 0075  
             write_dec@i 0065               _INTCONbits 000B       __end_of_set_offset 03AE  
               intlevel1 0000       __end_of_tarti_init 03D9              _serial_init 03AE  
           ___aldiv@sign 005B              ??_write_dec 0064             ___almod@sign 005B  
