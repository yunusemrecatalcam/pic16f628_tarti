

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Feb 03 10:34:35 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.45
    30                           ; Generated 16/11/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F628A Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  008C                     	;# 
    91  008E                     	;# 
    92  0092                     	;# 
    93  0098                     	;# 
    94  0099                     	;# 
    95  009A                     	;# 
    96  009B                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009F                     	;# 
   100  0019                     _TXREG	set	25
   101  001A                     _RCREG	set	26
   102  000C                     _PIR1bits	set	12
   103  0018                     _RCSTAbits	set	24
   104  000B                     _INTCONbits	set	11
   105  0006                     _PORTBbits	set	6
   106  0005                     _PORTAbits	set	5
   107  001F                     _CMCON	set	31
   108  0085                     _TRISAbits	set	133
   109  0099                     _SPBRG	set	153
   110  008C                     _PIE1bits	set	140
   111  0086                     _TRISBbits	set	134
   112  0098                     _TXSTAbits	set	152
   113  0081                     _OPTION_REGbits	set	129
   114  0086                     _TRISB	set	134
   115                           
   116                           ; #config settings
   117  0000                     
   118                           	psect	cinit
   119  0011                     start_initialization:	
   120  0011                     __initialization:	
   121                           
   122                           ; Clear objects allocated to COMMON
   123  0011  3075               	movlw	low __pbssCOMMON
   124  0012  0084               	movwf	4
   125  0013  3079               	movlw	low (__pbssCOMMON+4)
   126  0014  255D               	fcall	clear_ram0
   127                           
   128                           ; Clear objects allocated to BANK0
   129  0015  1383               	bcf	3,7	;select IRP bank0
   130  0016  3020               	movlw	low __pbssBANK0
   131  0017  0084               	movwf	4
   132  0018  3047               	movlw	low (__pbssBANK0+39)
   133  0019  255D               	fcall	clear_ram0
   134                           
   135                           ; Clear objects allocated to BANK1
   136  001A  30A0               	movlw	low __pbssBANK1
   137  001B  0084               	movwf	4
   138  001C  30AA               	movlw	low (__pbssBANK1+10)
   139  001D  255D               	fcall	clear_ram0
   140  001E                     end_of_initialization:	
   141                           ;End of C runtime variable initialization code
   142                           
   143  001E                     __end_of__initialization:	
   144  001E  0183               	clrf	3
   145  001F  2CE3               	ljmp	_main	;jump to C main() function
   146                           
   147                           	psect	bssCOMMON
   148  0075                     __pbssCOMMON:	
   149  0075                     _timetick:	
   150  0075                     	ds	4
   151                           
   152                           	psect	bssBANK0
   153  0020                     __pbssBANK0:	
   154  0020                     _force:	
   155  0020                     	ds	3
   156  0023                     _offset:	
   157  0023                     	ds	3
   158  0026                     _measure_val:	
   159  0026                     	ds	3
   160  0029                     _measure_flag:	
   161  0029                     	ds	2
   162  002B                     _tarti:	
   163  002B                     	ds	28
   164                           
   165                           	psect	bssBANK1
   166  00A0                     __pbssBANK1:	
   167  00A0                     _dec_array:	
   168  00A0                     	ds	10
   169                           
   170                           	psect	clrtext
   171  055D                     clear_ram0:	
   172                           ;	Called with FSR containing the base address, and
   173                           ;	W with the last address+1
   174                           
   175  055D  0064               	clrwdt	;clear the watchdog before getting into this loop
   176  055E                     clrloop0:	
   177  055E  0180               	clrf	0	;clear RAM location pointed to by FSR
   178  055F  0A84               	incf	4,f	;increment pointer
   179  0560  0604               	xorwf	4,w	;XOR with final address
   180  0561  1903               	btfsc	3,2	;have we reached the end yet?
   181  0562  3400               	retlw	0	;all done for this memory range, return
   182  0563  0604               	xorwf	4,w	;XOR again to restore value
   183  0564  2D5E               	goto	clrloop0	;do the next byte
   184                           
   185                           	psect	cstackCOMMON
   186  0070                     __pcstackCOMMON:	
   187  0070                     ?_T0_init:	
   188  0070                     ?_serial_init:	
   189                           ; 1 bytes @ 0x0
   190                           
   191  0070                     ?_tarti_init:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0070                     ?_read_tarti:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0070                     ?_set_offset:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0070                     ?_check_command:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0070                     ?_measure_force:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ?_send_data:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0070                     ?_main:	
   210                           ; 1 bytes @ 0x0
   211                           
   212  0070                     ?_kes:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  0070                     ??_kes:	
   216                           ; 1 bytes @ 0x0
   217                           
   218                           
   219                           ; 1 bytes @ 0x0
   220  0070                     	ds	5
   221  0075                     ??_T0_init:	
   222  0075                     ??_serial_init:	
   223                           ; 1 bytes @ 0x5
   224                           
   225  0075                     ??_tarti_init:	
   226                           ; 1 bytes @ 0x5
   227                           
   228  0075                     ??_send_data:	
   229                           ; 1 bytes @ 0x5
   230                           
   231  0075                     ??_main:	
   232                           ; 1 bytes @ 0x5
   233                           
   234                           
   235                           	psect	cstackBANK0
   236  0047                     __pcstackBANK0:	
   237                           ; 1 bytes @ 0x5
   238                           
   239  0047                     ??_read_tarti:	
   240  0047                     ?_return_n_before:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0047                     ?___lmul:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0047                     ?___aldiv:	
   247                           ; 4 bytes @ 0x0
   248                           
   249  0047                     ?___almod:	
   250                           ; 4 bytes @ 0x0
   251                           
   252  0047                     send_data@cnt:	
   253                           ; 4 bytes @ 0x0
   254                           
   255  0047                     return_n_before@position:	
   256                           ; 2 bytes @ 0x0
   257                           
   258  0047                     ___lmul@multiplier:	
   259                           ; 2 bytes @ 0x0
   260                           
   261  0047                     ___aldiv@divisor:	
   262                           ; 4 bytes @ 0x0
   263                           
   264  0047                     ___almod@divisor:	
   265                           ; 4 bytes @ 0x0
   266                           
   267                           
   268                           ; 4 bytes @ 0x0
   269  0047                     	ds	2
   270  0049                     return_n_before@n:	
   271                           
   272                           ; 2 bytes @ 0x2
   273  0049                     	ds	2
   274  004B                     ??_return_n_before:	
   275  004B                     read_tarti@kl:	
   276                           ; 1 bytes @ 0x4
   277                           
   278  004B                     ___lmul@multiplicand:	
   279                           ; 2 bytes @ 0x4
   280                           
   281  004B                     ___aldiv@dividend:	
   282                           ; 4 bytes @ 0x4
   283                           
   284  004B                     ___almod@dividend:	
   285                           ; 4 bytes @ 0x4
   286                           
   287                           
   288                           ; 4 bytes @ 0x4
   289  004B                     	ds	1
   290  004C                     return_n_before@array:	
   291                           
   292                           ; 1 bytes @ 0x5
   293  004C                     	ds	1
   294  004D                     ??_check_command:	
   295  004D                     read_tarti@i:	
   296                           ; 1 bytes @ 0x6
   297                           
   298                           
   299                           ; 2 bytes @ 0x6
   300  004D                     	ds	2
   301  004F                     ??___lmul:	
   302  004F                     ??___aldiv:	
   303                           ; 1 bytes @ 0x8
   304                           
   305  004F                     ??___almod:	
   306                           ; 1 bytes @ 0x8
   307                           
   308                           
   309                           ; 1 bytes @ 0x8
   310  004F                     	ds	1
   311  0050                     ___aldiv@counter:	
   312  0050                     ___almod@counter:	
   313                           ; 1 bytes @ 0x9
   314                           
   315  0050                     ___lmul@product:	
   316                           ; 1 bytes @ 0x9
   317                           
   318                           
   319                           ; 4 bytes @ 0x9
   320  0050                     	ds	1
   321  0051                     ___aldiv@sign:	
   322  0051                     ___almod@sign:	
   323                           ; 1 bytes @ 0xA
   324                           
   325                           
   326                           ; 1 bytes @ 0xA
   327  0051                     	ds	1
   328  0052                     ___aldiv@quotient:	
   329                           
   330                           ; 4 bytes @ 0xB
   331  0052                     	ds	4
   332  0056                     ?_write_dec:	
   333  0056                     write_dec@value:	
   334                           ; 1 bytes @ 0xF
   335                           
   336                           
   337                           ; 4 bytes @ 0xF
   338  0056                     	ds	4
   339  005A                     ??_write_dec:	
   340                           
   341                           ; 1 bytes @ 0x13
   342  005A                     	ds	1
   343  005B                     write_dec@i:	
   344                           
   345                           ; 2 bytes @ 0x14
   346  005B                     	ds	2
   347  005D                     ??_set_offset:	
   348  005D                     ??_measure_force:	
   349                           ; 1 bytes @ 0x16
   350                           
   351                           
   352                           ; 1 bytes @ 0x16
   353  005D                     	ds	4
   354  0061                     measure_force@i:	
   355                           
   356                           ; 2 bytes @ 0x1A
   357  0061                     	ds	2
   358  0063                     measure_force@sum:	
   359                           
   360                           ; 4 bytes @ 0x1C
   361  0063                     	ds	1
   362  0064                     set_offset@i:	
   363                           
   364                           ; 2 bytes @ 0x1D
   365  0064                     	ds	2
   366  0066                     set_offset@sum:	
   367                           
   368                           ; 4 bytes @ 0x1F
   369  0066                     	ds	4
   370                           
   371                           	psect	maintext
   372  04E3                     __pmaintext:	
   373 ;;
   374 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   375 ;;
   376 ;; *************** function _main *****************
   377 ;; Defined at:
   378 ;;		line 53 in file "tarti.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;                  1    wreg      void 
   385 ;; Registers used:
   386 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   387 ;; Tracked objects:
   388 ;;		On entry : B00/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   392 ;;      Params:         0       0       0       0
   393 ;;      Locals:         0       0       0       0
   394 ;;      Temps:          0       0       0       0
   395 ;;      Totals:         0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels required when called:    4
   398 ;; This function calls:
   399 ;;		_T0_init
   400 ;;		_check_command
   401 ;;		_measure_force
   402 ;;		_read_tarti
   403 ;;		_send_data
   404 ;;		_serial_init
   405 ;;		_set_offset
   406 ;;		_tarti_init
   407 ;; This function is called by:
   408 ;;		Startup code after reset
   409 ;; This function uses a non-reentrant model
   410 ;;
   411                           
   412                           
   413                           ;psect for function _main
   414  04E3                     _main:	
   415                           
   416                           ;tarti.c: 54: CMCON = 0x07;
   417                           
   418                           ;incstack = 0
   419                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   420  04E3  3007               	movlw	7
   421  04E4  1283               	bcf	3,5	;RP0=0, select bank0
   422  04E5  1303               	bcf	3,6	;RP1=0, select bank0
   423  04E6  009F               	movwf	31	;volatile
   424                           
   425                           ;tarti.c: 55: TRISB = 0b00000110;
   426  04E7  3006               	movlw	6
   427  04E8  1683               	bsf	3,5	;RP0=1, select bank1
   428  04E9  1303               	bcf	3,6	;RP1=0, select bank1
   429  04EA  0086               	movwf	6	;volatile
   430                           
   431                           ;tarti.c: 57: T0_init();
   432  04EB  2548               	fcall	_T0_init
   433                           
   434                           ;tarti.c: 58: serial_init();
   435  04EC  2532               	fcall	_serial_init
   436                           
   437                           ;tarti.c: 59: tarti_init();
   438  04ED  2554               	fcall	_tarti_init
   439                           
   440                           ;tarti.c: 61: tarti.wr_index = 0;
   441  04EE  1283               	bcf	3,5	;RP0=0, select bank0
   442  04EF  1303               	bcf	3,6	;RP1=0, select bank0
   443  04F0  01C3               	clrf	_tarti+24
   444  04F1  01C4               	clrf	_tarti+25
   445                           
   446                           ;tarti.c: 62: tarti.rd_index = 0;
   447  04F2  01C5               	clrf	_tarti+26
   448  04F3  01C6               	clrf	_tarti+27
   449                           
   450                           ;tarti.c: 64: PORTAbits.RA0 = 0;
   451  04F4  1005               	bcf	5,0	;volatile
   452                           
   453                           ;tarti.c: 65: PORTBbits.RB7 = 1;
   454  04F5  1786               	bsf	6,7	;volatile
   455                           
   456                           ;tarti.c: 67: read_tarti();
   457  04F6  2391               	fcall	_read_tarti
   458                           
   459                           ;tarti.c: 68: set_offset();
   460  04F7  2291               	fcall	_set_offset
   461  04F8  2CFF               	goto	l1560
   462  04F9                     l1564:	
   463                           
   464                           ;tarti.c: 75: measure_force();
   465  04F9  2205               	fcall	_measure_force
   466                           
   467                           ;tarti.c: 76: send_data();
   468  04FA  2401               	fcall	_send_data
   469  04FB                     L1:	
   470                           
   471                           ;tarti.c: 77: measure_flag=0;
   472  04FB  1283               	bcf	3,5	;RP0=0, select bank0
   473  04FC  1303               	bcf	3,6	;RP1=0, select bank0
   474  04FD  01A9               	clrf	_measure_flag
   475  04FE  01AA               	clrf	_measure_flag+1
   476  04FF                     l1560:	
   477                           ;tarti.c: 70: while (1) {
   478                           
   479                           ;tarti.c: 78: }else{
   480                           
   481                           
   482                           ;tarti.c: 72: check_command();
   483  04FF  20DF               	fcall	_check_command
   484                           
   485                           ;tarti.c: 74: if(measure_flag==1){
   486  0500  1283               	bcf	3,5	;RP0=0, select bank0
   487  0501  1303               	bcf	3,6	;RP1=0, select bank0
   488  0502  0329               	decf	_measure_flag,w
   489  0503  042A               	iorwf	_measure_flag+1,w
   490  0504  1903               	btfsc	3,2
   491  0505  2CF9               	goto	l1564
   492                           
   493                           ;tarti.c: 79: if(measure_flag==2){
   494  0506  3002               	movlw	2
   495  0507  0629               	xorwf	_measure_flag,w
   496  0508  042A               	iorwf	_measure_flag+1,w
   497  0509  1D03               	btfss	3,2
   498  050A  2CFF               	goto	l1560
   499                           
   500                           ;tarti.c: 80: set_offset();
   501  050B  2291               	fcall	_set_offset
   502  050C  2CFB               	goto	L1
   503  050D                     __end_of_main:	
   504                           ;tarti.c: 82: }
   505                           ;tarti.c: 83: }
   506                           ;tarti.c: 88: }
   507                           ;tarti.c: 90: return;
   508                           
   509                           ;tarti.c: 81: measure_flag=0;
   510                           
   511                           
   512                           	psect	text1
   513  0554                     __ptext1:	
   514 ;; *************** function _tarti_init *****************
   515 ;; Defined at:
   516 ;;		line 148 in file "tarti.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		None
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   530 ;;      Params:         0       0       0       0
   531 ;;      Locals:         0       0       0       0
   532 ;;      Temps:          0       0       0       0
   533 ;;      Totals:         0       0       0       0
   534 ;;Total ram usage:        0 bytes
   535 ;; Hardware stack levels used:    1
   536 ;; Hardware stack levels required when called:    1
   537 ;; This function calls:
   538 ;;		Nothing
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           
   545                           ;psect for function _tarti_init
   546  0554                     _tarti_init:	
   547                           
   548                           ;tarti.c: 150: TRISAbits.TRISA0=0;
   549                           
   550                           ;incstack = 0
   551                           ; Regs used in _tarti_init: []
   552  0554  1683               	bsf	3,5	;RP0=1, select bank1
   553  0555  1303               	bcf	3,6	;RP1=0, select bank1
   554  0556  1005               	bcf	5,0	;volatile
   555                           
   556                           ;tarti.c: 151: TRISAbits.TRISA3=1;
   557  0557  1585               	bsf	5,3	;volatile
   558                           
   559                           ;tarti.c: 152: TRISAbits.TRISA4=0;
   560  0558  1205               	bcf	5,4	;volatile
   561                           
   562                           ;tarti.c: 153: PORTAbits.RA0=0;
   563  0559  1283               	bcf	3,5	;RP0=0, select bank0
   564  055A  1303               	bcf	3,6	;RP1=0, select bank0
   565  055B  1005               	bcf	5,0	;volatile
   566  055C  0008               	return
   567  055D                     __end_of_tarti_init:	
   568                           
   569                           	psect	text2
   570  0291                     __ptext2:	
   571 ;; *************** function _set_offset *****************
   572 ;; Defined at:
   573 ;;		line 189 in file "tarti.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;		None
   576 ;; Auto vars:     Size  Location     Type
   577 ;;  i               2   29[BANK0 ] int 
   578 ;;  sum             4   31[BANK0 ] long 
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   588 ;;      Params:         0       0       0       0
   589 ;;      Locals:         0       6       0       0
   590 ;;      Temps:          0       7       0       0
   591 ;;      Totals:         0      13       0       0
   592 ;;Total ram usage:       13 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; Hardware stack levels required when called:    3
   595 ;; This function calls:
   596 ;;		___aldiv
   597 ;;		_read_tarti
   598 ;;		_write_dec
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           
   605                           ;psect for function _set_offset
   606  0291                     _set_offset:	
   607                           
   608                           ;tarti.c: 190: int32_t sum=0;
   609                           
   610                           ;incstack = 0
   611                           ; Regs used in _set_offset: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   612  0291  3000               	movlw	0
   613  0292  1283               	bcf	3,5	;RP0=0, select bank0
   614  0293  1303               	bcf	3,6	;RP1=0, select bank0
   615  0294  00E9               	movwf	set_offset@sum+3
   616  0295  3000               	movlw	0
   617  0296  00E8               	movwf	set_offset@sum+2
   618  0297  3000               	movlw	0
   619  0298  00E7               	movwf	set_offset@sum+1
   620  0299  3000               	movlw	0
   621  029A  00E6               	movwf	set_offset@sum
   622                           
   623                           ;tarti.c: 191: for(int i=0;i<5;i++){
   624  029B  01E4               	clrf	set_offset@i
   625  029C  01E5               	clrf	set_offset@i+1
   626  029D  0865               	movf	set_offset@i+1,w
   627  029E  3A80               	xorlw	128
   628  029F  00FF               	movwf	127
   629  02A0  3080               	movlw	128
   630  02A1  027F               	subwf	127,w
   631  02A2  1D03               	skipz
   632  02A3  2AA6               	goto	u1715
   633  02A4  3005               	movlw	5
   634  02A5  0264               	subwf	set_offset@i,w
   635  02A6                     u1715:	
   636  02A6  1803               	btfsc	3,0
   637  02A7  2AE5               	goto	l1458
   638  02A8                     l1450:	
   639                           
   640                           ;tarti.c: 192: read_tarti();
   641  02A8  2391               	fcall	_read_tarti
   642                           
   643                           ;tarti.c: 193: sum += -measure_val;
   644  02A9  1283               	bcf	3,5	;RP0=0, select bank0
   645  02AA  1303               	bcf	3,6	;RP1=0, select bank0
   646  02AB  0926               	comf	_measure_val,w
   647  02AC  00DD               	movwf	??_set_offset
   648  02AD  0927               	comf	_measure_val+1,w
   649  02AE  00DE               	movwf	??_set_offset+1
   650  02AF  0928               	comf	_measure_val+2,w
   651  02B0  00DF               	movwf	??_set_offset+2
   652  02B1  0ADD               	incf	??_set_offset,f
   653  02B2  1903               	skipnz
   654  02B3  0ADE               	incf	??_set_offset+1,f
   655  02B4  1903               	skipnz
   656  02B5  0ADF               	incf	??_set_offset+2,f
   657  02B6  085D               	movf	??_set_offset,w
   658  02B7  00E0               	movwf	??_set_offset+3
   659  02B8  085E               	movf	??_set_offset+1,w
   660  02B9  00E1               	movwf	??_set_offset+4
   661  02BA  085F               	movf	??_set_offset+2,w
   662  02BB  00E2               	movwf	??_set_offset+5
   663  02BC  3000               	movlw	0
   664  02BD  1BE2               	btfsc	??_set_offset+5,7
   665  02BE  30FF               	movlw	255
   666  02BF  00E3               	movwf	??_set_offset+6
   667  02C0  0860               	movf	??_set_offset+3,w
   668  02C1  07E6               	addwf	set_offset@sum,f
   669  02C2  0861               	movf	??_set_offset+4,w
   670  02C3  1103               	clrz
   671  02C4  1803               	skipnc
   672  02C5  3E01               	addlw	1
   673  02C6  1D03               	btfss	3,2
   674  02C7  07E7               	addwf	set_offset@sum+1,f
   675  02C8  0862               	movf	??_set_offset+5,w
   676  02C9  1103               	clrz
   677  02CA  1803               	skipnc
   678  02CB  3E01               	addlw	1
   679  02CC  1D03               	btfss	3,2
   680  02CD  07E8               	addwf	set_offset@sum+2,f
   681  02CE  0863               	movf	??_set_offset+6,w
   682  02CF  1103               	clrz
   683  02D0  1803               	skipnc
   684  02D1  3E01               	addlw	1
   685  02D2  1D03               	btfss	3,2
   686  02D3  07E9               	addwf	set_offset@sum+3,f
   687  02D4  3001               	movlw	1
   688  02D5  07E4               	addwf	set_offset@i,f
   689  02D6  1803               	skipnc
   690  02D7  0AE5               	incf	set_offset@i+1,f
   691  02D8  3000               	movlw	0
   692  02D9  07E5               	addwf	set_offset@i+1,f
   693  02DA  0865               	movf	set_offset@i+1,w
   694  02DB  3A80               	xorlw	128
   695  02DC  00FF               	movwf	127
   696  02DD  3080               	movlw	128
   697  02DE  027F               	subwf	127,w
   698  02DF  1D03               	skipz
   699  02E0  2AE3               	goto	u1735
   700  02E1  3005               	movlw	5
   701  02E2  0264               	subwf	set_offset@i,w
   702  02E3                     u1735:	
   703  02E3  1C03               	skipc
   704  02E4  2AA8               	goto	l1450
   705  02E5                     l1458:	
   706                           
   707                           ;tarti.c: 194: }
   708                           ;tarti.c: 195: sum /= 5;
   709  02E5  3000               	movlw	0
   710  02E6  1283               	bcf	3,5	;RP0=0, select bank0
   711  02E7  1303               	bcf	3,6	;RP1=0, select bank0
   712  02E8  00CA               	movwf	___aldiv@divisor+3
   713  02E9  3000               	movlw	0
   714  02EA  00C9               	movwf	___aldiv@divisor+2
   715  02EB  3000               	movlw	0
   716  02EC  00C8               	movwf	___aldiv@divisor+1
   717  02ED  3005               	movlw	5
   718  02EE  00C7               	movwf	___aldiv@divisor
   719  02EF  0869               	movf	set_offset@sum+3,w
   720  02F0  00CE               	movwf	___aldiv@dividend+3
   721  02F1  0868               	movf	set_offset@sum+2,w
   722  02F2  00CD               	movwf	___aldiv@dividend+2
   723  02F3  0867               	movf	set_offset@sum+1,w
   724  02F4  00CC               	movwf	___aldiv@dividend+1
   725  02F5  0866               	movf	set_offset@sum,w
   726  02F6  00CB               	movwf	___aldiv@dividend
   727  02F7  2176               	fcall	___aldiv
   728  02F8  1283               	bcf	3,5	;RP0=0, select bank0
   729  02F9  1303               	bcf	3,6	;RP1=0, select bank0
   730  02FA  084A               	movf	?___aldiv+3,w
   731  02FB  00E9               	movwf	set_offset@sum+3
   732  02FC  0849               	movf	?___aldiv+2,w
   733  02FD  00E8               	movwf	set_offset@sum+2
   734  02FE  0848               	movf	?___aldiv+1,w
   735  02FF  00E7               	movwf	set_offset@sum+1
   736  0300  0847               	movf	?___aldiv,w
   737  0301  00E6               	movwf	set_offset@sum
   738                           
   739                           ;tarti.c: 196: offset=sum;
   740  0302  0866               	movf	set_offset@sum,w
   741  0303  00A3               	movwf	_offset
   742  0304  0867               	movf	set_offset@sum+1,w
   743  0305  00A4               	movwf	_offset+1
   744  0306  0868               	movf	set_offset@sum+2,w
   745  0307  00A5               	movwf	_offset+2
   746                           
   747                           ;tarti.c: 197: write_dec(offset);
   748  0308  0823               	movf	_offset,w
   749  0309  00D6               	movwf	write_dec@value
   750  030A  0824               	movf	_offset+1,w
   751  030B  00D7               	movwf	write_dec@value+1
   752  030C  0825               	movf	_offset+2,w
   753  030D  00D8               	movwf	write_dec@value+2
   754  030E  00DD               	movwf	??_set_offset
   755  030F  0D5D               	rlf	??_set_offset,w
   756  0310  00DD               	movwf	??_set_offset
   757  0311  1C03               	skipc
   758  0312  03DD               	decf	??_set_offset,f
   759  0313  02DD               	subwf	??_set_offset,f
   760  0314  095D               	comf	??_set_offset,w
   761  0315  00D9               	movwf	write_dec@value+3
   762  0316  2020               	fcall	_write_dec
   763  0317  0008               	return
   764  0318                     __end_of_set_offset:	
   765                           
   766                           	psect	text3
   767  0532                     __ptext3:	
   768 ;; *************** function _serial_init *****************
   769 ;; Defined at:
   770 ;;		line 107 in file "tarti.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   784 ;;      Params:         0       0       0       0
   785 ;;      Locals:         0       0       0       0
   786 ;;      Temps:          0       0       0       0
   787 ;;      Totals:         0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    1
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _serial_init
   800  0532                     _serial_init:	
   801                           
   802                           ;tarti.c: 108: TXSTAbits.TX9=0;
   803                           
   804                           ;incstack = 0
   805                           ; Regs used in _serial_init: [wreg]
   806  0532  1683               	bsf	3,5	;RP0=1, select bank1
   807  0533  1303               	bcf	3,6	;RP1=0, select bank1
   808  0534  1318               	bcf	24,6	;volatile
   809                           
   810                           ;tarti.c: 109: TXSTAbits.TXEN=1;
   811  0535  1698               	bsf	24,5	;volatile
   812                           
   813                           ;tarti.c: 110: TXSTAbits.SYNC=0;
   814  0536  1218               	bcf	24,4	;volatile
   815                           
   816                           ;tarti.c: 111: TXSTAbits.BRGH=1;
   817  0537  1518               	bsf	24,2	;volatile
   818                           
   819                           ;tarti.c: 113: RCSTAbits.SPEN=1;
   820  0538  1283               	bcf	3,5	;RP0=0, select bank0
   821  0539  1303               	bcf	3,6	;RP1=0, select bank0
   822  053A  1798               	bsf	24,7	;volatile
   823                           
   824                           ;tarti.c: 114: RCSTAbits.RX9=0;
   825  053B  1318               	bcf	24,6	;volatile
   826                           
   827                           ;tarti.c: 115: RCSTAbits.CREN=1;
   828  053C  1618               	bsf	24,4	;volatile
   829                           
   830                           ;tarti.c: 117: TRISBbits.TRISB1=1;
   831  053D  1683               	bsf	3,5	;RP0=1, select bank1
   832  053E  1303               	bcf	3,6	;RP1=0, select bank1
   833  053F  1486               	bsf	6,1	;volatile
   834                           
   835                           ;tarti.c: 118: TRISBbits.TRISB2=1;
   836  0540  1506               	bsf	6,2	;volatile
   837                           
   838                           ;tarti.c: 120: PIE1bits.RCIE=1;
   839  0541  168C               	bsf	12,5	;volatile
   840                           
   841                           ;tarti.c: 121: SPBRG=129;
   842  0542  3081               	movlw	129
   843  0543  0099               	movwf	25	;volatile
   844                           
   845                           ;tarti.c: 123: PIR1bits.RCIF=0;
   846  0544  1283               	bcf	3,5	;RP0=0, select bank0
   847  0545  1303               	bcf	3,6	;RP1=0, select bank0
   848  0546  128C               	bcf	12,5	;volatile
   849  0547  0008               	return
   850  0548                     __end_of_serial_init:	
   851                           
   852                           	psect	text4
   853  0401                     __ptext4:	
   854 ;; *************** function _send_data *****************
   855 ;; Defined at:
   856 ;;		line 256 in file "tarti.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;  cnt             2    0[BANK0 ] int 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   870 ;;      Params:         0       0       0       0
   871 ;;      Locals:         0       2       0       0
   872 ;;      Temps:          0       0       0       0
   873 ;;      Totals:         0       2       0       0
   874 ;;Total ram usage:        2 bytes
   875 ;; Hardware stack levels used:    1
   876 ;; Hardware stack levels required when called:    1
   877 ;; This function calls:
   878 ;;		Nothing
   879 ;; This function is called by:
   880 ;;		_main
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           
   885                           ;psect for function _send_data
   886  0401                     _send_data:	
   887                           
   888                           ;tarti.c: 257: for(int cnt=5; cnt<10; cnt++){
   889                           
   890                           ;incstack = 0
   891                           ; Regs used in _send_data: [wreg-fsr0h+status,2+status,0+btemp+1]
   892  0401  3005               	movlw	5
   893  0402  1283               	bcf	3,5	;RP0=0, select bank0
   894  0403  1303               	bcf	3,6	;RP1=0, select bank0
   895  0404  00C7               	movwf	send_data@cnt
   896  0405  3000               	movlw	0
   897  0406  00C8               	movwf	send_data@cnt+1
   898  0407  0848               	movf	send_data@cnt+1,w
   899  0408  3A80               	xorlw	128
   900  0409  00FF               	movwf	127
   901  040A  3080               	movlw	128
   902  040B  027F               	subwf	127,w
   903  040C  1D03               	skipz
   904  040D  2C10               	goto	u1885
   905  040E  300A               	movlw	10
   906  040F  0247               	subwf	send_data@cnt,w
   907  0410                     u1885:	
   908  0410  1803               	btfsc	3,0
   909  0411  2C43               	goto	l154
   910  0412                     l1524:	
   911                           
   912                           ;tarti.c: 258: if(cnt==8){
   913  0412  3008               	movlw	8
   914  0413  1283               	bcf	3,5	;RP0=0, select bank0
   915  0414  1303               	bcf	3,6	;RP1=0, select bank0
   916  0415  0647               	xorwf	send_data@cnt,w
   917  0416  0448               	iorwf	send_data@cnt+1,w
   918  0417  1903               	btfsc	3,2
   919  0418  2C43               	goto	l154
   920  0419                     l147:	
   921                           ;tarti.c: 260: }
   922                           ;tarti.c: 262: while(!TXSTAbits.TRMT);
   923                           
   924                           ;tarti.c: 259: break;
   925                           
   926  0419  1683               	bsf	3,5	;RP0=1, select bank1
   927  041A  1303               	bcf	3,6	;RP1=0, select bank1
   928  041B  1C98               	btfss	24,1	;volatile
   929  041C  2C19               	goto	l147
   930                           
   931                           ;tarti.c: 263: TXREG=(dec_array[cnt]);
   932  041D  1283               	bcf	3,5	;RP0=0, select bank0
   933  041E  1303               	bcf	3,6	;RP1=0, select bank0
   934  041F  0847               	movf	send_data@cnt,w
   935  0420  3EA0               	addlw	(low (_dec_array| 0))& (0+255)
   936  0421  0084               	movwf	4
   937  0422  1383               	bcf	3,7	;select IRP bank1
   938  0423  0800               	movf	0,w
   939  0424  0099               	movwf	25	;volatile
   940                           
   941                           ;tarti.c: 264: if(cnt==5){
   942  0425  3005               	movlw	5
   943  0426  0647               	xorwf	send_data@cnt,w
   944  0427  0448               	iorwf	send_data@cnt+1,w
   945  0428  1D03               	btfss	3,2
   946  0429  2C32               	goto	l150
   947  042A                     l151:	
   948                           ;tarti.c: 265: while(!TXSTAbits.TRMT);
   949                           
   950  042A  1683               	bsf	3,5	;RP0=1, select bank1
   951  042B  1303               	bcf	3,6	;RP1=0, select bank1
   952  042C  1C98               	btfss	24,1	;volatile
   953  042D  2C2A               	goto	l151
   954                           
   955                           ;tarti.c: 266: TXREG='.';
   956  042E  302E               	movlw	46
   957  042F  1283               	bcf	3,5	;RP0=0, select bank0
   958  0430  1303               	bcf	3,6	;RP1=0, select bank0
   959  0431  0099               	movwf	25	;volatile
   960  0432                     l150:	
   961  0432  3001               	movlw	1
   962  0433  07C7               	addwf	send_data@cnt,f
   963  0434  1803               	skipnc
   964  0435  0AC8               	incf	send_data@cnt+1,f
   965  0436  3000               	movlw	0
   966  0437  07C8               	addwf	send_data@cnt+1,f
   967  0438  0848               	movf	send_data@cnt+1,w
   968  0439  3A80               	xorlw	128
   969  043A  00FF               	movwf	127
   970  043B  3080               	movlw	128
   971  043C  027F               	subwf	127,w
   972  043D  1D03               	skipz
   973  043E  2C41               	goto	u1935
   974  043F  300A               	movlw	10
   975  0440  0247               	subwf	send_data@cnt,w
   976  0441                     u1935:	
   977  0441  1C03               	skipc
   978  0442  2C12               	goto	l1524
   979  0443                     l154:	
   980                           ;tarti.c: 267: }
   981                           ;tarti.c: 268: }
   982                           ;tarti.c: 269: while(!TXSTAbits.TRMT);
   983                           
   984  0443  1683               	bsf	3,5	;RP0=1, select bank1
   985  0444  1303               	bcf	3,6	;RP1=0, select bank1
   986  0445  1C98               	btfss	24,1	;volatile
   987  0446  2C43               	goto	l154
   988                           
   989                           ;tarti.c: 270: TXREG='\r';
   990  0447  300D               	movlw	13
   991  0448  1283               	bcf	3,5	;RP0=0, select bank0
   992  0449  1303               	bcf	3,6	;RP1=0, select bank0
   993  044A  0099               	movwf	25	;volatile
   994  044B                     l157:	
   995                           ;tarti.c: 271: while(!TXSTAbits.TRMT);
   996                           
   997  044B  1683               	bsf	3,5	;RP0=1, select bank1
   998  044C  1303               	bcf	3,6	;RP1=0, select bank1
   999  044D  1C98               	btfss	24,1	;volatile
  1000  044E  2C4B               	goto	l157
  1001                           
  1002                           ;tarti.c: 272: TXREG='\n';
  1003  044F  300A               	movlw	10
  1004  0450  1283               	bcf	3,5	;RP0=0, select bank0
  1005  0451  1303               	bcf	3,6	;RP1=0, select bank0
  1006  0452  0099               	movwf	25	;volatile
  1007  0453  0008               	return
  1008  0454                     __end_of_send_data:	
  1009                           
  1010                           	psect	text5
  1011  0205                     __ptext5:	
  1012 ;; *************** function _measure_force *****************
  1013 ;; Defined at:
  1014 ;;		line 200 in file "tarti.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;  i               2   26[BANK0 ] int 
  1019 ;;  sum             4   28[BANK0 ] long 
  1020 ;; Return value:  Size  Location     Type
  1021 ;;                  1    wreg      void 
  1022 ;; Registers used:
  1023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1029 ;;      Params:         0       0       0       0
  1030 ;;      Locals:         0       6       0       0
  1031 ;;      Temps:          0       4       0       0
  1032 ;;      Totals:         0      10       0       0
  1033 ;;Total ram usage:       10 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; Hardware stack levels required when called:    3
  1036 ;; This function calls:
  1037 ;;		___aldiv
  1038 ;;		_read_tarti
  1039 ;;		_write_dec
  1040 ;; This function is called by:
  1041 ;;		_main
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           
  1046                           ;psect for function _measure_force
  1047  0205                     _measure_force:	
  1048                           
  1049                           ;tarti.c: 201: int32_t sum=0;
  1050                           
  1051                           ;incstack = 0
  1052                           ; Regs used in _measure_force: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1053  0205  3000               	movlw	0
  1054  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1055  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1056  0208  00E6               	movwf	measure_force@sum+3
  1057  0209  3000               	movlw	0
  1058  020A  00E5               	movwf	measure_force@sum+2
  1059  020B  3000               	movlw	0
  1060  020C  00E4               	movwf	measure_force@sum+1
  1061  020D  3000               	movlw	0
  1062  020E  00E3               	movwf	measure_force@sum
  1063                           
  1064                           ;tarti.c: 202: for(int i=0;i<5;i++){
  1065  020F  01E1               	clrf	measure_force@i
  1066  0210  01E2               	clrf	measure_force@i+1
  1067  0211  0862               	movf	measure_force@i+1,w
  1068  0212  3A80               	xorlw	128
  1069  0213  00FF               	movwf	127
  1070  0214  3080               	movlw	128
  1071  0215  027F               	subwf	127,w
  1072  0216  1D03               	skipz
  1073  0217  2A1A               	goto	u1845
  1074  0218  3005               	movlw	5
  1075  0219  0261               	subwf	measure_force@i,w
  1076  021A                     u1845:	
  1077  021A  1803               	btfsc	3,0
  1078  021B  2A4E               	goto	l1512
  1079  021C                     l1504:	
  1080                           
  1081                           ;tarti.c: 203: read_tarti();
  1082  021C  2391               	fcall	_read_tarti
  1083                           
  1084                           ;tarti.c: 205: sum += measure_val;
  1085  021D  1283               	bcf	3,5	;RP0=0, select bank0
  1086  021E  1303               	bcf	3,6	;RP1=0, select bank0
  1087  021F  0826               	movf	_measure_val,w
  1088  0220  00DD               	movwf	??_measure_force
  1089  0221  0827               	movf	_measure_val+1,w
  1090  0222  00DE               	movwf	??_measure_force+1
  1091  0223  0828               	movf	_measure_val+2,w
  1092  0224  00DF               	movwf	??_measure_force+2
  1093  0225  3000               	movlw	0
  1094  0226  1BDF               	btfsc	??_measure_force+2,7
  1095  0227  30FF               	movlw	255
  1096  0228  00E0               	movwf	??_measure_force+3
  1097  0229  085D               	movf	??_measure_force,w
  1098  022A  07E3               	addwf	measure_force@sum,f
  1099  022B  085E               	movf	??_measure_force+1,w
  1100  022C  1103               	clrz
  1101  022D  1803               	skipnc
  1102  022E  3E01               	addlw	1
  1103  022F  1D03               	btfss	3,2
  1104  0230  07E4               	addwf	measure_force@sum+1,f
  1105  0231  085F               	movf	??_measure_force+2,w
  1106  0232  1103               	clrz
  1107  0233  1803               	skipnc
  1108  0234  3E01               	addlw	1
  1109  0235  1D03               	btfss	3,2
  1110  0236  07E5               	addwf	measure_force@sum+2,f
  1111  0237  0860               	movf	??_measure_force+3,w
  1112  0238  1103               	clrz
  1113  0239  1803               	skipnc
  1114  023A  3E01               	addlw	1
  1115  023B  1D03               	btfss	3,2
  1116  023C  07E6               	addwf	measure_force@sum+3,f
  1117  023D  3001               	movlw	1
  1118  023E  07E1               	addwf	measure_force@i,f
  1119  023F  1803               	skipnc
  1120  0240  0AE2               	incf	measure_force@i+1,f
  1121  0241  3000               	movlw	0
  1122  0242  07E2               	addwf	measure_force@i+1,f
  1123  0243  0862               	movf	measure_force@i+1,w
  1124  0244  3A80               	xorlw	128
  1125  0245  00FF               	movwf	127
  1126  0246  3080               	movlw	128
  1127  0247  027F               	subwf	127,w
  1128  0248  1D03               	skipz
  1129  0249  2A4C               	goto	u1865
  1130  024A  3005               	movlw	5
  1131  024B  0261               	subwf	measure_force@i,w
  1132  024C                     u1865:	
  1133  024C  1C03               	skipc
  1134  024D  2A1C               	goto	l1504
  1135  024E                     l1512:	
  1136                           
  1137                           ;tarti.c: 206: }
  1138                           ;tarti.c: 207: sum /=5;
  1139  024E  3000               	movlw	0
  1140  024F  1283               	bcf	3,5	;RP0=0, select bank0
  1141  0250  1303               	bcf	3,6	;RP1=0, select bank0
  1142  0251  00CA               	movwf	___aldiv@divisor+3
  1143  0252  3000               	movlw	0
  1144  0253  00C9               	movwf	___aldiv@divisor+2
  1145  0254  3000               	movlw	0
  1146  0255  00C8               	movwf	___aldiv@divisor+1
  1147  0256  3005               	movlw	5
  1148  0257  00C7               	movwf	___aldiv@divisor
  1149  0258  0866               	movf	measure_force@sum+3,w
  1150  0259  00CE               	movwf	___aldiv@dividend+3
  1151  025A  0865               	movf	measure_force@sum+2,w
  1152  025B  00CD               	movwf	___aldiv@dividend+2
  1153  025C  0864               	movf	measure_force@sum+1,w
  1154  025D  00CC               	movwf	___aldiv@dividend+1
  1155  025E  0863               	movf	measure_force@sum,w
  1156  025F  00CB               	movwf	___aldiv@dividend
  1157  0260  2176               	fcall	___aldiv
  1158  0261  1283               	bcf	3,5	;RP0=0, select bank0
  1159  0262  1303               	bcf	3,6	;RP1=0, select bank0
  1160  0263  084A               	movf	?___aldiv+3,w
  1161  0264  00E6               	movwf	measure_force@sum+3
  1162  0265  0849               	movf	?___aldiv+2,w
  1163  0266  00E5               	movwf	measure_force@sum+2
  1164  0267  0848               	movf	?___aldiv+1,w
  1165  0268  00E4               	movwf	measure_force@sum+1
  1166  0269  0847               	movf	?___aldiv,w
  1167  026A  00E3               	movwf	measure_force@sum
  1168                           
  1169                           ;tarti.c: 208: force=sum + offset;
  1170  026B  0823               	movf	_offset,w
  1171  026C  0763               	addwf	measure_force@sum,w
  1172  026D  00DD               	movwf	??_measure_force
  1173  026E  0864               	movf	measure_force@sum+1,w
  1174  026F  00DE               	movwf	??_measure_force+1
  1175  0270  0824               	movf	_offset+1,w
  1176  0271  1803               	skipnc
  1177  0272  0A24               	incf	_offset+1,w
  1178  0273  1D03               	btfss	3,2
  1179  0274  07DE               	addwf	??_measure_force+1,f
  1180  0275  0865               	movf	measure_force@sum+2,w
  1181  0276  00DF               	movwf	??_measure_force+2
  1182  0277  0825               	movf	_offset+2,w
  1183  0278  1803               	skipnc
  1184  0279  0A25               	incf	_offset+2,w
  1185  027A  07DF               	addwf	??_measure_force+2,f
  1186  027B  085D               	movf	??_measure_force,w
  1187  027C  00A0               	movwf	_force
  1188  027D  085E               	movf	??_measure_force+1,w
  1189  027E  00A1               	movwf	_force+1
  1190  027F  085F               	movf	??_measure_force+2,w
  1191  0280  00A2               	movwf	_force+2
  1192                           
  1193                           ;tarti.c: 209: write_dec(force);
  1194  0281  0820               	movf	_force,w
  1195  0282  00D6               	movwf	write_dec@value
  1196  0283  0821               	movf	_force+1,w
  1197  0284  00D7               	movwf	write_dec@value+1
  1198  0285  0822               	movf	_force+2,w
  1199  0286  00D8               	movwf	write_dec@value+2
  1200  0287  00DD               	movwf	??_measure_force
  1201  0288  0D5D               	rlf	??_measure_force,w
  1202  0289  00DD               	movwf	??_measure_force
  1203  028A  1C03               	skipc
  1204  028B  03DD               	decf	??_measure_force,f
  1205  028C  02DD               	subwf	??_measure_force,f
  1206  028D  095D               	comf	??_measure_force,w
  1207  028E  00D9               	movwf	write_dec@value+3
  1208  028F  2020               	fcall	_write_dec
  1209  0290  0008               	return
  1210  0291                     __end_of_measure_force:	
  1211                           
  1212                           	psect	text6
  1213  0020                     __ptext6:	
  1214 ;; *************** function _write_dec *****************
  1215 ;; Defined at:
  1216 ;;		line 232 in file "tarti.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  value           4   15[BANK0 ] long 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  i               2   20[BANK0 ] int 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1230 ;;      Params:         0       4       0       0
  1231 ;;      Locals:         0       2       0       0
  1232 ;;      Temps:          0       1       0       0
  1233 ;;      Totals:         0       7       0       0
  1234 ;;Total ram usage:        7 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; Hardware stack levels required when called:    2
  1237 ;; This function calls:
  1238 ;;		___aldiv
  1239 ;;		___almod
  1240 ;;		___lmul
  1241 ;; This function is called by:
  1242 ;;		_set_offset
  1243 ;;		_measure_force
  1244 ;;		_bin_to_dec
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           
  1249                           ;psect for function _write_dec
  1250  0020                     _write_dec:	
  1251                           
  1252                           ;tarti.c: 233: int i=0;
  1253                           
  1254                           ;incstack = 0
  1255                           ; Regs used in _write_dec: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1256  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1257  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1258  0022  01DB               	clrf	write_dec@i
  1259  0023  01DC               	clrf	write_dec@i+1
  1260                           
  1261                           ;tarti.c: 234: value *=22;
  1262  0024  3000               	movlw	0
  1263  0025  00CA               	movwf	___lmul@multiplier+3
  1264  0026  3000               	movlw	0
  1265  0027  00C9               	movwf	___lmul@multiplier+2
  1266  0028  3000               	movlw	0
  1267  0029  00C8               	movwf	___lmul@multiplier+1
  1268  002A  3016               	movlw	22
  1269  002B  00C7               	movwf	___lmul@multiplier
  1270  002C  0859               	movf	write_dec@value+3,w
  1271  002D  00CE               	movwf	___lmul@multiplicand+3
  1272  002E  0858               	movf	write_dec@value+2,w
  1273  002F  00CD               	movwf	___lmul@multiplicand+2
  1274  0030  0857               	movf	write_dec@value+1,w
  1275  0031  00CC               	movwf	___lmul@multiplicand+1
  1276  0032  0856               	movf	write_dec@value,w
  1277  0033  00CB               	movwf	___lmul@multiplicand
  1278  0034  24A2               	fcall	___lmul
  1279  0035  1283               	bcf	3,5	;RP0=0, select bank0
  1280  0036  1303               	bcf	3,6	;RP1=0, select bank0
  1281  0037  084A               	movf	?___lmul+3,w
  1282  0038  00D9               	movwf	write_dec@value+3
  1283  0039  0849               	movf	?___lmul+2,w
  1284  003A  00D8               	movwf	write_dec@value+2
  1285  003B  0848               	movf	?___lmul+1,w
  1286  003C  00D7               	movwf	write_dec@value+1
  1287  003D  0847               	movf	?___lmul,w
  1288  003E  00D6               	movwf	write_dec@value
  1289                           
  1290                           ;tarti.c: 235: value /=10000;
  1291  003F  3000               	movlw	0
  1292  0040  00CA               	movwf	___aldiv@divisor+3
  1293  0041  3000               	movlw	0
  1294  0042  00C9               	movwf	___aldiv@divisor+2
  1295  0043  3027               	movlw	39
  1296  0044  00C8               	movwf	___aldiv@divisor+1
  1297  0045  3010               	movlw	16
  1298  0046  00C7               	movwf	___aldiv@divisor
  1299  0047  0859               	movf	write_dec@value+3,w
  1300  0048  00CE               	movwf	___aldiv@dividend+3
  1301  0049  0858               	movf	write_dec@value+2,w
  1302  004A  00CD               	movwf	___aldiv@dividend+2
  1303  004B  0857               	movf	write_dec@value+1,w
  1304  004C  00CC               	movwf	___aldiv@dividend+1
  1305  004D  0856               	movf	write_dec@value,w
  1306  004E  00CB               	movwf	___aldiv@dividend
  1307  004F  2176               	fcall	___aldiv
  1308  0050  1283               	bcf	3,5	;RP0=0, select bank0
  1309  0051  1303               	bcf	3,6	;RP1=0, select bank0
  1310  0052  084A               	movf	?___aldiv+3,w
  1311  0053  00D9               	movwf	write_dec@value+3
  1312  0054  0849               	movf	?___aldiv+2,w
  1313  0055  00D8               	movwf	write_dec@value+2
  1314  0056  0848               	movf	?___aldiv+1,w
  1315  0057  00D7               	movwf	write_dec@value+1
  1316  0058  0847               	movf	?___aldiv,w
  1317  0059  00D6               	movwf	write_dec@value
  1318                           
  1319                           ;tarti.c: 236: if(value < 0)
  1320  005A  1FD9               	btfss	write_dec@value+3,7
  1321  005B  2870               	goto	l1404
  1322                           
  1323                           ;tarti.c: 237: {
  1324                           ;tarti.c: 238: dec_array[0] = '-';
  1325  005C  302D               	movlw	45
  1326  005D  00DA               	movwf	??_write_dec
  1327  005E  085A               	movf	??_write_dec,w
  1328  005F  1683               	bsf	3,5	;RP0=1, select bank1
  1329  0060  1303               	bcf	3,6	;RP1=0, select bank1
  1330  0061  00A0               	movwf	_dec_array^(0+128)
  1331                           
  1332                           ;tarti.c: 239: value = -value;
  1333  0062  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0063  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0064  09D6               	comf	write_dec@value,f
  1336  0065  09D7               	comf	write_dec@value+1,f
  1337  0066  09D8               	comf	write_dec@value+2,f
  1338  0067  09D9               	comf	write_dec@value+3,f
  1339  0068  0AD6               	incf	write_dec@value,f
  1340  0069  1903               	skipnz
  1341  006A  0AD7               	incf	write_dec@value+1,f
  1342  006B  1903               	skipnz
  1343  006C  0AD8               	incf	write_dec@value+2,f
  1344  006D  1903               	skipnz
  1345  006E  0AD9               	incf	write_dec@value+3,f
  1346                           
  1347                           ;tarti.c: 240: }
  1348  006F  2876               	goto	l1406
  1349  0070                     l1404:	
  1350                           
  1351                           ;tarti.c: 241: else
  1352                           ;tarti.c: 242: dec_array[0] = '+';
  1353  0070  302B               	movlw	43
  1354  0071  00DA               	movwf	??_write_dec
  1355  0072  085A               	movf	??_write_dec,w
  1356  0073  1683               	bsf	3,5	;RP0=1, select bank1
  1357  0074  1303               	bcf	3,6	;RP1=0, select bank1
  1358  0075  00A0               	movwf	_dec_array^(0+128)
  1359  0076                     l1406:	
  1360                           
  1361                           ;tarti.c: 244: dec_array[10 - 1] = (0);
  1362  0076  1683               	bsf	3,5	;RP0=1, select bank1
  1363  0077  1303               	bcf	3,6	;RP1=0, select bank1
  1364  0078  01A9               	clrf	(_dec_array^(0+128)+9)
  1365                           
  1366                           ;tarti.c: 245: i=10 - 2;
  1367  0079  3008               	movlw	8
  1368  007A  1283               	bcf	3,5	;RP0=0, select bank0
  1369  007B  1303               	bcf	3,6	;RP1=0, select bank0
  1370  007C  00DB               	movwf	write_dec@i
  1371  007D  3000               	movlw	0
  1372  007E  00DC               	movwf	write_dec@i+1
  1373  007F                     l1416:	
  1374                           ;tarti.c: 247: while(value){
  1375                           
  1376  007F  0859               	movf	write_dec@value+3,w
  1377  0080  0458               	iorwf	write_dec@value+2,w
  1378  0081  0457               	iorwf	write_dec@value+1,w
  1379  0082  0456               	iorwf	write_dec@value,w
  1380  0083  1903               	btfsc	3,2
  1381  0084  28C3               	goto	l1418
  1382                           
  1383                           ;tarti.c: 248: dec_array[i--]= value%10 + '0';
  1384  0085  3000               	movlw	0
  1385  0086  00CA               	movwf	___almod@divisor+3
  1386  0087  3000               	movlw	0
  1387  0088  00C9               	movwf	___almod@divisor+2
  1388  0089  3000               	movlw	0
  1389  008A  00C8               	movwf	___almod@divisor+1
  1390  008B  300A               	movlw	10
  1391  008C  00C7               	movwf	___almod@divisor
  1392  008D  0859               	movf	write_dec@value+3,w
  1393  008E  00CE               	movwf	___almod@dividend+3
  1394  008F  0858               	movf	write_dec@value+2,w
  1395  0090  00CD               	movwf	___almod@dividend+2
  1396  0091  0857               	movf	write_dec@value+1,w
  1397  0092  00CC               	movwf	___almod@dividend+1
  1398  0093  0856               	movf	write_dec@value,w
  1399  0094  00CB               	movwf	___almod@dividend
  1400  0095  2318               	fcall	___almod
  1401  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1402  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1403  0098  0847               	movf	?___almod,w
  1404  0099  3E30               	addlw	48
  1405  009A  00DA               	movwf	??_write_dec
  1406  009B  085B               	movf	write_dec@i,w
  1407  009C  3EA0               	addlw	(low (_dec_array| 0))& (0+255)
  1408  009D  0084               	movwf	4
  1409  009E  085A               	movf	??_write_dec,w
  1410  009F  1383               	bcf	3,7	;select IRP bank1
  1411  00A0  0080               	movwf	0
  1412  00A1  30FF               	movlw	255
  1413  00A2  07DB               	addwf	write_dec@i,f
  1414  00A3  1803               	skipnc
  1415  00A4  0ADC               	incf	write_dec@i+1,f
  1416  00A5  30FF               	movlw	255
  1417  00A6  07DC               	addwf	write_dec@i+1,f
  1418                           
  1419                           ;tarti.c: 249: value /= 10;
  1420  00A7  3000               	movlw	0
  1421  00A8  00CA               	movwf	___aldiv@divisor+3
  1422  00A9  3000               	movlw	0
  1423  00AA  00C9               	movwf	___aldiv@divisor+2
  1424  00AB  3000               	movlw	0
  1425  00AC  00C8               	movwf	___aldiv@divisor+1
  1426  00AD  300A               	movlw	10
  1427  00AE  00C7               	movwf	___aldiv@divisor
  1428  00AF  0859               	movf	write_dec@value+3,w
  1429  00B0  00CE               	movwf	___aldiv@dividend+3
  1430  00B1  0858               	movf	write_dec@value+2,w
  1431  00B2  00CD               	movwf	___aldiv@dividend+2
  1432  00B3  0857               	movf	write_dec@value+1,w
  1433  00B4  00CC               	movwf	___aldiv@dividend+1
  1434  00B5  0856               	movf	write_dec@value,w
  1435  00B6  00CB               	movwf	___aldiv@dividend
  1436  00B7  2176               	fcall	___aldiv
  1437  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  1438  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  1439  00BA  084A               	movf	?___aldiv+3,w
  1440  00BB  00D9               	movwf	write_dec@value+3
  1441  00BC  0849               	movf	?___aldiv+2,w
  1442  00BD  00D8               	movwf	write_dec@value+2
  1443  00BE  0848               	movf	?___aldiv+1,w
  1444  00BF  00D7               	movwf	write_dec@value+1
  1445  00C0  0847               	movf	?___aldiv,w
  1446  00C1  00D6               	movwf	write_dec@value
  1447  00C2  287F               	goto	l1416
  1448  00C3                     l1418:	
  1449                           
  1450                           ;tarti.c: 250: }
  1451                           ;tarti.c: 252: for(;i>0;i--)
  1452  00C3  085C               	movf	write_dec@i+1,w
  1453  00C4  3A80               	xorlw	128
  1454  00C5  00FF               	movwf	127
  1455  00C6  3080               	movlw	128
  1456  00C7  027F               	subwf	127,w
  1457  00C8  1D03               	skipz
  1458  00C9  28CC               	goto	u1675
  1459  00CA  3001               	movlw	1
  1460  00CB  025B               	subwf	write_dec@i,w
  1461  00CC                     u1675:	
  1462  00CC  1C03               	btfss	3,0
  1463  00CD  0008               	return
  1464                           
  1465                           ;tarti.c: 253: dec_array[i] = '0';
  1466  00CE  3030               	movlw	48
  1467  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1468  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1469  00D1  00DA               	movwf	??_write_dec
  1470  00D2  085B               	movf	write_dec@i,w
  1471  00D3  3EA0               	addlw	(low (_dec_array| 0))& (0+255)
  1472  00D4  0084               	movwf	4
  1473  00D5  085A               	movf	??_write_dec,w
  1474  00D6  1383               	bcf	3,7	;select IRP bank1
  1475  00D7  0080               	movwf	0
  1476  00D8  30FF               	movlw	255
  1477  00D9  07DB               	addwf	write_dec@i,f
  1478  00DA  1803               	skipnc
  1479  00DB  0ADC               	incf	write_dec@i+1,f
  1480  00DC  30FF               	movlw	255
  1481  00DD  07DC               	addwf	write_dec@i+1,f
  1482  00DE  28C3               	goto	l1418
  1483  00DF                     __end_of_write_dec:	
  1484                           
  1485                           	psect	text7
  1486  04A2                     __ptext7:	
  1487 ;; *************** function ___lmul *****************
  1488 ;; Defined at:
  1489 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1492 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  product         4    9[BANK0 ] unsigned long 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  4    0[BANK0 ] unsigned long 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1504 ;;      Params:         0       8       0       0
  1505 ;;      Locals:         0       4       0       0
  1506 ;;      Temps:          0       1       0       0
  1507 ;;      Totals:         0      13       0       0
  1508 ;;Total ram usage:       13 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		Nothing
  1513 ;; This function is called by:
  1514 ;;		_write_dec
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function ___lmul
  1520  04A2                     ___lmul:	
  1521                           
  1522                           ;incstack = 0
  1523                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1524  04A2  3000               	movlw	0
  1525  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1526  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1527  04A5  00D3               	movwf	___lmul@product+3
  1528  04A6  3000               	movlw	0
  1529  04A7  00D2               	movwf	___lmul@product+2
  1530  04A8  3000               	movlw	0
  1531  04A9  00D1               	movwf	___lmul@product+1
  1532  04AA  3000               	movlw	0
  1533  04AB  00D0               	movwf	___lmul@product
  1534  04AC                     l1276:	
  1535  04AC  1C47               	btfss	___lmul@multiplier,0
  1536  04AD  2CC2               	goto	l1280
  1537  04AE  084B               	movf	___lmul@multiplicand,w
  1538  04AF  07D0               	addwf	___lmul@product,f
  1539  04B0  084C               	movf	___lmul@multiplicand+1,w
  1540  04B1  1103               	clrz
  1541  04B2  1803               	skipnc
  1542  04B3  3E01               	addlw	1
  1543  04B4  1D03               	btfss	3,2
  1544  04B5  07D1               	addwf	___lmul@product+1,f
  1545  04B6  084D               	movf	___lmul@multiplicand+2,w
  1546  04B7  1103               	clrz
  1547  04B8  1803               	skipnc
  1548  04B9  3E01               	addlw	1
  1549  04BA  1D03               	btfss	3,2
  1550  04BB  07D2               	addwf	___lmul@product+2,f
  1551  04BC  084E               	movf	___lmul@multiplicand+3,w
  1552  04BD  1103               	clrz
  1553  04BE  1803               	skipnc
  1554  04BF  3E01               	addlw	1
  1555  04C0  1D03               	btfss	3,2
  1556  04C1  07D3               	addwf	___lmul@product+3,f
  1557  04C2                     l1280:	
  1558  04C2  3001               	movlw	1
  1559  04C3  00CF               	movwf	??___lmul
  1560  04C4                     u1365:	
  1561  04C4  1003               	clrc
  1562  04C5  0DCB               	rlf	___lmul@multiplicand,f
  1563  04C6  0DCC               	rlf	___lmul@multiplicand+1,f
  1564  04C7  0DCD               	rlf	___lmul@multiplicand+2,f
  1565  04C8  0DCE               	rlf	___lmul@multiplicand+3,f
  1566  04C9  0BCF               	decfsz	??___lmul,f
  1567  04CA  2CC4               	goto	u1365
  1568  04CB  3001               	movlw	1
  1569  04CC                     u1375:	
  1570  04CC  1003               	clrc
  1571  04CD  0CCA               	rrf	___lmul@multiplier+3,f
  1572  04CE  0CC9               	rrf	___lmul@multiplier+2,f
  1573  04CF  0CC8               	rrf	___lmul@multiplier+1,f
  1574  04D0  0CC7               	rrf	___lmul@multiplier,f
  1575  04D1  3EFF               	addlw	-1
  1576  04D2  1D03               	skipz
  1577  04D3  2CCC               	goto	u1375
  1578  04D4  084A               	movf	___lmul@multiplier+3,w
  1579  04D5  0449               	iorwf	___lmul@multiplier+2,w
  1580  04D6  0448               	iorwf	___lmul@multiplier+1,w
  1581  04D7  0447               	iorwf	___lmul@multiplier,w
  1582  04D8  1D03               	skipz
  1583  04D9  2CAC               	goto	l1276
  1584  04DA  0853               	movf	___lmul@product+3,w
  1585  04DB  00CA               	movwf	?___lmul+3
  1586  04DC  0852               	movf	___lmul@product+2,w
  1587  04DD  00C9               	movwf	?___lmul+2
  1588  04DE  0851               	movf	___lmul@product+1,w
  1589  04DF  00C8               	movwf	?___lmul+1
  1590  04E0  0850               	movf	___lmul@product,w
  1591  04E1  00C7               	movwf	?___lmul
  1592  04E2  0008               	return
  1593  04E3                     __end_of___lmul:	
  1594                           
  1595                           	psect	text8
  1596  0318                     __ptext8:	
  1597 ;; *************** function ___almod *****************
  1598 ;; Defined at:
  1599 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  divisor         4    0[BANK0 ] long 
  1602 ;;  dividend        4    4[BANK0 ] long 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  sign            1   10[BANK0 ] unsigned char 
  1605 ;;  counter         1    9[BANK0 ] unsigned char 
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  4    0[BANK0 ] long 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, status,0
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1615 ;;      Params:         0       8       0       0
  1616 ;;      Locals:         0       2       0       0
  1617 ;;      Temps:          0       1       0       0
  1618 ;;      Totals:         0      11       0       0
  1619 ;;Total ram usage:       11 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    1
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_write_dec
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function ___almod
  1631  0318                     ___almod:	
  1632                           
  1633                           ;incstack = 0
  1634                           ; Regs used in ___almod: [wreg+status,2+status,0]
  1635  0318  1283               	bcf	3,5	;RP0=0, select bank0
  1636  0319  1303               	bcf	3,6	;RP1=0, select bank0
  1637  031A  01D1               	clrf	___almod@sign
  1638  031B  1FCE               	btfss	___almod@dividend+3,7
  1639  031C  2B2A               	goto	l320
  1640  031D  09CB               	comf	___almod@dividend,f
  1641  031E  09CC               	comf	___almod@dividend+1,f
  1642  031F  09CD               	comf	___almod@dividend+2,f
  1643  0320  09CE               	comf	___almod@dividend+3,f
  1644  0321  0ACB               	incf	___almod@dividend,f
  1645  0322  1903               	skipnz
  1646  0323  0ACC               	incf	___almod@dividend+1,f
  1647  0324  1903               	skipnz
  1648  0325  0ACD               	incf	___almod@dividend+2,f
  1649  0326  1903               	skipnz
  1650  0327  0ACE               	incf	___almod@dividend+3,f
  1651  0328  01D1               	clrf	___almod@sign
  1652  0329  0AD1               	incf	___almod@sign,f
  1653  032A                     l320:	
  1654  032A  1FCA               	btfss	___almod@divisor+3,7
  1655  032B  2B37               	goto	l1336
  1656  032C  09C7               	comf	___almod@divisor,f
  1657  032D  09C8               	comf	___almod@divisor+1,f
  1658  032E  09C9               	comf	___almod@divisor+2,f
  1659  032F  09CA               	comf	___almod@divisor+3,f
  1660  0330  0AC7               	incf	___almod@divisor,f
  1661  0331  1903               	skipnz
  1662  0332  0AC8               	incf	___almod@divisor+1,f
  1663  0333  1903               	skipnz
  1664  0334  0AC9               	incf	___almod@divisor+2,f
  1665  0335  1903               	skipnz
  1666  0336  0ACA               	incf	___almod@divisor+3,f
  1667  0337                     l1336:	
  1668  0337  084A               	movf	___almod@divisor+3,w
  1669  0338  0449               	iorwf	___almod@divisor+2,w
  1670  0339  0448               	iorwf	___almod@divisor+1,w
  1671  033A  0447               	iorwf	___almod@divisor,w
  1672  033B  1903               	skipnz
  1673  033C  2B7A               	goto	l1352
  1674  033D  01D0               	clrf	___almod@counter
  1675  033E  0AD0               	incf	___almod@counter,f
  1676  033F                     l1342:	
  1677  033F  1BCA               	btfsc	___almod@divisor+3,7
  1678  0340  2B4F               	goto	l1344
  1679  0341  3001               	movlw	1
  1680  0342  00CF               	movwf	??___almod
  1681  0343                     u1525:	
  1682  0343  1003               	clrc
  1683  0344  0DC7               	rlf	___almod@divisor,f
  1684  0345  0DC8               	rlf	___almod@divisor+1,f
  1685  0346  0DC9               	rlf	___almod@divisor+2,f
  1686  0347  0DCA               	rlf	___almod@divisor+3,f
  1687  0348  0BCF               	decfsz	??___almod,f
  1688  0349  2B43               	goto	u1525
  1689  034A  3001               	movlw	1
  1690  034B  00CF               	movwf	??___almod
  1691  034C  084F               	movf	??___almod,w
  1692  034D  07D0               	addwf	___almod@counter,f
  1693  034E  2B3F               	goto	l1342
  1694  034F                     l1344:	
  1695  034F  084A               	movf	___almod@divisor+3,w
  1696  0350  024E               	subwf	___almod@dividend+3,w
  1697  0351  1D03               	skipz
  1698  0352  2B5D               	goto	u1545
  1699  0353  0849               	movf	___almod@divisor+2,w
  1700  0354  024D               	subwf	___almod@dividend+2,w
  1701  0355  1D03               	skipz
  1702  0356  2B5D               	goto	u1545
  1703  0357  0848               	movf	___almod@divisor+1,w
  1704  0358  024C               	subwf	___almod@dividend+1,w
  1705  0359  1D03               	skipz
  1706  035A  2B5D               	goto	u1545
  1707  035B  0847               	movf	___almod@divisor,w
  1708  035C  024B               	subwf	___almod@dividend,w
  1709  035D                     u1545:	
  1710  035D  1C03               	skipc
  1711  035E  2B6D               	goto	l1348
  1712  035F  0847               	movf	___almod@divisor,w
  1713  0360  02CB               	subwf	___almod@dividend,f
  1714  0361  0848               	movf	___almod@divisor+1,w
  1715  0362  1C03               	skipc
  1716  0363  0F48               	incfsz	___almod@divisor+1,w
  1717  0364  02CC               	subwf	___almod@dividend+1,f
  1718  0365  0849               	movf	___almod@divisor+2,w
  1719  0366  1C03               	skipc
  1720  0367  0F49               	incfsz	___almod@divisor+2,w
  1721  0368  02CD               	subwf	___almod@dividend+2,f
  1722  0369  084A               	movf	___almod@divisor+3,w
  1723  036A  1C03               	skipc
  1724  036B  0F4A               	incfsz	___almod@divisor+3,w
  1725  036C  02CE               	subwf	___almod@dividend+3,f
  1726  036D                     l1348:	
  1727  036D  3001               	movlw	1
  1728  036E                     u1555:	
  1729  036E  1003               	clrc
  1730  036F  0CCA               	rrf	___almod@divisor+3,f
  1731  0370  0CC9               	rrf	___almod@divisor+2,f
  1732  0371  0CC8               	rrf	___almod@divisor+1,f
  1733  0372  0CC7               	rrf	___almod@divisor,f
  1734  0373  3EFF               	addlw	-1
  1735  0374  1D03               	skipz
  1736  0375  2B6E               	goto	u1555
  1737  0376  3001               	movlw	1
  1738  0377  02D0               	subwf	___almod@counter,f
  1739  0378  1D03               	btfss	3,2
  1740  0379  2B4F               	goto	l1344
  1741  037A                     l1352:	
  1742  037A  0851               	movf	___almod@sign,w
  1743  037B  1903               	btfsc	3,2
  1744  037C  2B88               	goto	l1356
  1745  037D  09CB               	comf	___almod@dividend,f
  1746  037E  09CC               	comf	___almod@dividend+1,f
  1747  037F  09CD               	comf	___almod@dividend+2,f
  1748  0380  09CE               	comf	___almod@dividend+3,f
  1749  0381  0ACB               	incf	___almod@dividend,f
  1750  0382  1903               	skipnz
  1751  0383  0ACC               	incf	___almod@dividend+1,f
  1752  0384  1903               	skipnz
  1753  0385  0ACD               	incf	___almod@dividend+2,f
  1754  0386  1903               	skipnz
  1755  0387  0ACE               	incf	___almod@dividend+3,f
  1756  0388                     l1356:	
  1757  0388  084E               	movf	___almod@dividend+3,w
  1758  0389  00CA               	movwf	?___almod+3
  1759  038A  084D               	movf	___almod@dividend+2,w
  1760  038B  00C9               	movwf	?___almod+2
  1761  038C  084C               	movf	___almod@dividend+1,w
  1762  038D  00C8               	movwf	?___almod+1
  1763  038E  084B               	movf	___almod@dividend,w
  1764  038F  00C7               	movwf	?___almod
  1765  0390  0008               	return
  1766  0391                     __end_of___almod:	
  1767                           
  1768                           	psect	text9
  1769  0176                     __ptext9:	
  1770 ;; *************** function ___aldiv *****************
  1771 ;; Defined at:
  1772 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  divisor         4    0[BANK0 ] long 
  1775 ;;  dividend        4    4[BANK0 ] long 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  quotient        4   11[BANK0 ] long 
  1778 ;;  sign            1   10[BANK0 ] unsigned char 
  1779 ;;  counter         1    9[BANK0 ] unsigned char 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  4    0[BANK0 ] long 
  1782 ;; Registers used:
  1783 ;;		wreg, status,2, status,0
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1789 ;;      Params:         0       8       0       0
  1790 ;;      Locals:         0       6       0       0
  1791 ;;      Temps:          0       1       0       0
  1792 ;;      Totals:         0      15       0       0
  1793 ;;Total ram usage:       15 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:    1
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_set_offset
  1800 ;;		_measure_force
  1801 ;;		_write_dec
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function ___aldiv
  1807  0176                     ___aldiv:	
  1808                           
  1809                           ;incstack = 0
  1810                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1811  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0178  01D1               	clrf	___aldiv@sign
  1814  0179  1FCA               	btfss	___aldiv@divisor+3,7
  1815  017A  2988               	goto	l307
  1816  017B  09C7               	comf	___aldiv@divisor,f
  1817  017C  09C8               	comf	___aldiv@divisor+1,f
  1818  017D  09C9               	comf	___aldiv@divisor+2,f
  1819  017E  09CA               	comf	___aldiv@divisor+3,f
  1820  017F  0AC7               	incf	___aldiv@divisor,f
  1821  0180  1903               	skipnz
  1822  0181  0AC8               	incf	___aldiv@divisor+1,f
  1823  0182  1903               	skipnz
  1824  0183  0AC9               	incf	___aldiv@divisor+2,f
  1825  0184  1903               	skipnz
  1826  0185  0ACA               	incf	___aldiv@divisor+3,f
  1827  0186  01D1               	clrf	___aldiv@sign
  1828  0187  0AD1               	incf	___aldiv@sign,f
  1829  0188                     l307:	
  1830  0188  1FCE               	btfss	___aldiv@dividend+3,7
  1831  0189  2999               	goto	l1298
  1832  018A  09CB               	comf	___aldiv@dividend,f
  1833  018B  09CC               	comf	___aldiv@dividend+1,f
  1834  018C  09CD               	comf	___aldiv@dividend+2,f
  1835  018D  09CE               	comf	___aldiv@dividend+3,f
  1836  018E  0ACB               	incf	___aldiv@dividend,f
  1837  018F  1903               	skipnz
  1838  0190  0ACC               	incf	___aldiv@dividend+1,f
  1839  0191  1903               	skipnz
  1840  0192  0ACD               	incf	___aldiv@dividend+2,f
  1841  0193  1903               	skipnz
  1842  0194  0ACE               	incf	___aldiv@dividend+3,f
  1843  0195  3001               	movlw	1
  1844  0196  00CF               	movwf	??___aldiv
  1845  0197  084F               	movf	??___aldiv,w
  1846  0198  06D1               	xorwf	___aldiv@sign,f
  1847  0199                     l1298:	
  1848  0199  3000               	movlw	0
  1849  019A  00D5               	movwf	___aldiv@quotient+3
  1850  019B  3000               	movlw	0
  1851  019C  00D4               	movwf	___aldiv@quotient+2
  1852  019D  3000               	movlw	0
  1853  019E  00D3               	movwf	___aldiv@quotient+1
  1854  019F  3000               	movlw	0
  1855  01A0  00D2               	movwf	___aldiv@quotient
  1856  01A1  084A               	movf	___aldiv@divisor+3,w
  1857  01A2  0449               	iorwf	___aldiv@divisor+2,w
  1858  01A3  0448               	iorwf	___aldiv@divisor+1,w
  1859  01A4  0447               	iorwf	___aldiv@divisor,w
  1860  01A5  1903               	skipnz
  1861  01A6  29EE               	goto	l1320
  1862  01A7  01D0               	clrf	___aldiv@counter
  1863  01A8  0AD0               	incf	___aldiv@counter,f
  1864  01A9                     l1306:	
  1865  01A9  1BCA               	btfsc	___aldiv@divisor+3,7
  1866  01AA  29B9               	goto	l1308
  1867  01AB  3001               	movlw	1
  1868  01AC  00CF               	movwf	??___aldiv
  1869  01AD                     u1425:	
  1870  01AD  1003               	clrc
  1871  01AE  0DC7               	rlf	___aldiv@divisor,f
  1872  01AF  0DC8               	rlf	___aldiv@divisor+1,f
  1873  01B0  0DC9               	rlf	___aldiv@divisor+2,f
  1874  01B1  0DCA               	rlf	___aldiv@divisor+3,f
  1875  01B2  0BCF               	decfsz	??___aldiv,f
  1876  01B3  29AD               	goto	u1425
  1877  01B4  3001               	movlw	1
  1878  01B5  00CF               	movwf	??___aldiv
  1879  01B6  084F               	movf	??___aldiv,w
  1880  01B7  07D0               	addwf	___aldiv@counter,f
  1881  01B8  29A9               	goto	l1306
  1882  01B9                     l1308:	
  1883  01B9  3001               	movlw	1
  1884  01BA  00CF               	movwf	??___aldiv
  1885  01BB                     u1445:	
  1886  01BB  1003               	clrc
  1887  01BC  0DD2               	rlf	___aldiv@quotient,f
  1888  01BD  0DD3               	rlf	___aldiv@quotient+1,f
  1889  01BE  0DD4               	rlf	___aldiv@quotient+2,f
  1890  01BF  0DD5               	rlf	___aldiv@quotient+3,f
  1891  01C0  0BCF               	decfsz	??___aldiv,f
  1892  01C1  29BB               	goto	u1445
  1893  01C2  084A               	movf	___aldiv@divisor+3,w
  1894  01C3  024E               	subwf	___aldiv@dividend+3,w
  1895  01C4  1D03               	skipz
  1896  01C5  29D0               	goto	u1455
  1897  01C6  0849               	movf	___aldiv@divisor+2,w
  1898  01C7  024D               	subwf	___aldiv@dividend+2,w
  1899  01C8  1D03               	skipz
  1900  01C9  29D0               	goto	u1455
  1901  01CA  0848               	movf	___aldiv@divisor+1,w
  1902  01CB  024C               	subwf	___aldiv@dividend+1,w
  1903  01CC  1D03               	skipz
  1904  01CD  29D0               	goto	u1455
  1905  01CE  0847               	movf	___aldiv@divisor,w
  1906  01CF  024B               	subwf	___aldiv@dividend,w
  1907  01D0                     u1455:	
  1908  01D0  1C03               	skipc
  1909  01D1  29E1               	goto	l1316
  1910  01D2  0847               	movf	___aldiv@divisor,w
  1911  01D3  02CB               	subwf	___aldiv@dividend,f
  1912  01D4  0848               	movf	___aldiv@divisor+1,w
  1913  01D5  1C03               	skipc
  1914  01D6  0F48               	incfsz	___aldiv@divisor+1,w
  1915  01D7  02CC               	subwf	___aldiv@dividend+1,f
  1916  01D8  0849               	movf	___aldiv@divisor+2,w
  1917  01D9  1C03               	skipc
  1918  01DA  0F49               	incfsz	___aldiv@divisor+2,w
  1919  01DB  02CD               	subwf	___aldiv@dividend+2,f
  1920  01DC  084A               	movf	___aldiv@divisor+3,w
  1921  01DD  1C03               	skipc
  1922  01DE  0F4A               	incfsz	___aldiv@divisor+3,w
  1923  01DF  02CE               	subwf	___aldiv@dividend+3,f
  1924  01E0  1452               	bsf	___aldiv@quotient,0
  1925  01E1                     l1316:	
  1926  01E1  3001               	movlw	1
  1927  01E2                     u1465:	
  1928  01E2  1003               	clrc
  1929  01E3  0CCA               	rrf	___aldiv@divisor+3,f
  1930  01E4  0CC9               	rrf	___aldiv@divisor+2,f
  1931  01E5  0CC8               	rrf	___aldiv@divisor+1,f
  1932  01E6  0CC7               	rrf	___aldiv@divisor,f
  1933  01E7  3EFF               	addlw	-1
  1934  01E8  1D03               	skipz
  1935  01E9  29E2               	goto	u1465
  1936  01EA  3001               	movlw	1
  1937  01EB  02D0               	subwf	___aldiv@counter,f
  1938  01EC  1D03               	btfss	3,2
  1939  01ED  29B9               	goto	l1308
  1940  01EE                     l1320:	
  1941  01EE  0851               	movf	___aldiv@sign,w
  1942  01EF  1903               	btfsc	3,2
  1943  01F0  29FC               	goto	l1324
  1944  01F1  09D2               	comf	___aldiv@quotient,f
  1945  01F2  09D3               	comf	___aldiv@quotient+1,f
  1946  01F3  09D4               	comf	___aldiv@quotient+2,f
  1947  01F4  09D5               	comf	___aldiv@quotient+3,f
  1948  01F5  0AD2               	incf	___aldiv@quotient,f
  1949  01F6  1903               	skipnz
  1950  01F7  0AD3               	incf	___aldiv@quotient+1,f
  1951  01F8  1903               	skipnz
  1952  01F9  0AD4               	incf	___aldiv@quotient+2,f
  1953  01FA  1903               	skipnz
  1954  01FB  0AD5               	incf	___aldiv@quotient+3,f
  1955  01FC                     l1324:	
  1956  01FC  0855               	movf	___aldiv@quotient+3,w
  1957  01FD  00CA               	movwf	?___aldiv+3
  1958  01FE  0854               	movf	___aldiv@quotient+2,w
  1959  01FF  00C9               	movwf	?___aldiv+2
  1960  0200  0853               	movf	___aldiv@quotient+1,w
  1961  0201  00C8               	movwf	?___aldiv+1
  1962  0202  0852               	movf	___aldiv@quotient,w
  1963  0203  00C7               	movwf	?___aldiv
  1964  0204  0008               	return
  1965  0205                     __end_of___aldiv:	
  1966                           
  1967                           	psect	text10
  1968  0391                     __ptext10:	
  1969 ;; *************** function _read_tarti *****************
  1970 ;; Defined at:
  1971 ;;		line 157 in file "tarti.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  i               2    6[BANK0 ] int 
  1976 ;;  kl              2    4[BANK0 ] int 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      void 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0, btemp+1
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1986 ;;      Params:         0       0       0       0
  1987 ;;      Locals:         0       4       0       0
  1988 ;;      Temps:          0       4       0       0
  1989 ;;      Totals:         0       8       0       0
  1990 ;;Total ram usage:        8 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    1
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;;		_set_offset
  1998 ;;		_measure_force
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           
  2003                           ;psect for function _read_tarti
  2004  0391                     _read_tarti:	
  2005                           
  2006                           ;tarti.c: 159: PORTAbits.RA0=0;
  2007                           
  2008                           ;incstack = 0
  2009                           ; Regs used in _read_tarti: [wreg+status,2+status,0+btemp+1]
  2010  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2011  0392  1303               	bcf	3,6	;RP1=0, select bank0
  2012  0393  1005               	bcf	5,0	;volatile
  2013  0394                     l96:	
  2014                           ;tarti.c: 160: while(PORTAbits.RA3==1);
  2015                           
  2016  0394  1985               	btfsc	5,3	;volatile
  2017  0395  2B94               	goto	l96
  2018                           
  2019                           ;tarti.c: 162: for(int kl=0;kl<25;kl++){
  2020  0396  01CB               	clrf	read_tarti@kl
  2021  0397  01CC               	clrf	read_tarti@kl+1
  2022  0398  084C               	movf	read_tarti@kl+1,w
  2023  0399  3A80               	xorlw	128
  2024  039A  00FF               	movwf	127
  2025  039B  3080               	movlw	128
  2026  039C  027F               	subwf	127,w
  2027  039D  1D03               	skipz
  2028  039E  2BA1               	goto	u1595
  2029  039F  3019               	movlw	25
  2030  03A0  024B               	subwf	read_tarti@kl,w
  2031  03A1                     u1595:	
  2032  03A1  1803               	btfsc	3,0
  2033  03A2  2BB8               	goto	l101
  2034  03A3                     l99:	
  2035                           
  2036                           ;tarti.c: 163: PORTAbits.RA0=1;
  2037  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2038  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  2039  03A5  1405               	bsf	5,0	;volatile
  2040                           
  2041                           ;tarti.c: 164: PORTAbits.RA0=0;
  2042  03A6  1005               	bcf	5,0	;volatile
  2043  03A7  3001               	movlw	1
  2044  03A8  07CB               	addwf	read_tarti@kl,f
  2045  03A9  1803               	skipnc
  2046  03AA  0ACC               	incf	read_tarti@kl+1,f
  2047  03AB  3000               	movlw	0
  2048  03AC  07CC               	addwf	read_tarti@kl+1,f
  2049  03AD  084C               	movf	read_tarti@kl+1,w
  2050  03AE  3A80               	xorlw	128
  2051  03AF  00FF               	movwf	127
  2052  03B0  3080               	movlw	128
  2053  03B1  027F               	subwf	127,w
  2054  03B2  1D03               	skipz
  2055  03B3  2BB6               	goto	u1605
  2056  03B4  3019               	movlw	25
  2057  03B5  024B               	subwf	read_tarti@kl,w
  2058  03B6                     u1605:	
  2059  03B6  1C03               	skipc
  2060  03B7  2BA3               	goto	l99
  2061  03B8                     l101:	
  2062                           ;tarti.c: 165: }
  2063                           ;tarti.c: 167: while(PORTAbits.RA3==1);
  2064                           
  2065  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  2066  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  2067  03BA  1985               	btfsc	5,3	;volatile
  2068  03BB  2BB8               	goto	l101
  2069                           
  2070                           ;tarti.c: 168: measure_val = 0;
  2071  03BC  3000               	movlw	0
  2072  03BD  00A6               	movwf	_measure_val
  2073  03BE  3000               	movlw	0
  2074  03BF  00A7               	movwf	_measure_val+1
  2075  03C0  3000               	movlw	0
  2076  03C1  00A8               	movwf	_measure_val+2
  2077                           
  2078                           ;tarti.c: 169: for(int i=0; i<24; i++){
  2079  03C2  01CD               	clrf	read_tarti@i
  2080  03C3  01CE               	clrf	read_tarti@i+1
  2081  03C4  084E               	movf	read_tarti@i+1,w
  2082  03C5  3A80               	xorlw	128
  2083  03C6  00FF               	movwf	127
  2084  03C7  3080               	movlw	128
  2085  03C8  027F               	subwf	127,w
  2086  03C9  1D03               	skipz
  2087  03CA  2BCD               	goto	u1625
  2088  03CB  3018               	movlw	24
  2089  03CC  024D               	subwf	read_tarti@i,w
  2090  03CD                     u1625:	
  2091  03CD  1803               	btfsc	3,0
  2092  03CE  2BFA               	goto	l105
  2093  03CF                     l104:	
  2094                           
  2095                           ;tarti.c: 170: PORTAbits.RA0=1;
  2096  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  2097  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  2098  03D1  1405               	bsf	5,0	;volatile
  2099                           
  2100                           ;tarti.c: 171: measure_val <<= 1;
  2101  03D2  3001               	movlw	1
  2102  03D3                     u1635:	
  2103  03D3  1003               	clrc
  2104  03D4  0DA6               	rlf	_measure_val,f
  2105  03D5  0DA7               	rlf	_measure_val+1,f
  2106  03D6  0DA8               	rlf	_measure_val+2,f
  2107  03D7  3EFF               	addlw	-1
  2108  03D8  1D03               	skipz
  2109  03D9  2BD3               	goto	u1635
  2110                           
  2111                           ;tarti.c: 173: PORTAbits.RA0=0;
  2112  03DA  1005               	bcf	5,0	;volatile
  2113                           
  2114                           ;tarti.c: 174: measure_val |= PORTAbits.RA3;
  2115  03DB  0C05               	rrf	5,w	;volatile
  2116  03DC  00C7               	movwf	??_read_tarti
  2117  03DD  0CC7               	rrf	??_read_tarti,f
  2118  03DE  0C47               	rrf	??_read_tarti,w
  2119  03DF  3901               	andlw	1
  2120  03E0  00C8               	movwf	??_read_tarti+1
  2121  03E1  01C9               	clrf	??_read_tarti+2
  2122  03E2  01CA               	clrf	??_read_tarti+3
  2123  03E3  0848               	movf	??_read_tarti+1,w
  2124  03E4  04A6               	iorwf	_measure_val,f
  2125  03E5  0849               	movf	??_read_tarti+2,w
  2126  03E6  04A7               	iorwf	_measure_val+1,f
  2127  03E7  084A               	movf	??_read_tarti+3,w
  2128  03E8  04A8               	iorwf	_measure_val+2,f
  2129  03E9  3001               	movlw	1
  2130  03EA  07CD               	addwf	read_tarti@i,f
  2131  03EB  1803               	skipnc
  2132  03EC  0ACE               	incf	read_tarti@i+1,f
  2133  03ED  3000               	movlw	0
  2134  03EE  07CE               	addwf	read_tarti@i+1,f
  2135  03EF  084E               	movf	read_tarti@i+1,w
  2136  03F0  3A80               	xorlw	128
  2137  03F1  00FF               	movwf	127
  2138  03F2  3080               	movlw	128
  2139  03F3  027F               	subwf	127,w
  2140  03F4  1D03               	skipz
  2141  03F5  2BF8               	goto	u1645
  2142  03F6  3018               	movlw	24
  2143  03F7  024D               	subwf	read_tarti@i,w
  2144  03F8                     u1645:	
  2145  03F8  1C03               	skipc
  2146  03F9  2BCF               	goto	l104
  2147  03FA                     l105:	
  2148                           
  2149                           ;tarti.c: 175: }
  2150                           ;tarti.c: 177: PORTAbits.RA0=1;
  2151  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2152  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2153  03FC  1405               	bsf	5,0	;volatile
  2154                           
  2155                           ;tarti.c: 178: measure_val ^=0x800000;
  2156  03FD  3080               	movlw	128
  2157  03FE  06A8               	xorwf	_measure_val+2,f
  2158                           
  2159                           ;tarti.c: 179: PORTAbits.RA0=0;
  2160  03FF  1005               	bcf	5,0	;volatile
  2161  0400  0008               	return
  2162  0401                     __end_of_read_tarti:	
  2163                           
  2164                           	psect	text11
  2165  00DF                     __ptext11:	
  2166 ;; *************** function _check_command *****************
  2167 ;; Defined at:
  2168 ;;		line 212 in file "tarti.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;		None
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2182 ;;      Params:         0       0       0       0
  2183 ;;      Locals:         0       0       0       0
  2184 ;;      Temps:          0       1       0       0
  2185 ;;      Totals:         0       1       0       0
  2186 ;;Total ram usage:        1 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    2
  2189 ;; This function calls:
  2190 ;;		_return_n_before
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function _check_command
  2198  00DF                     _check_command:	
  2199                           
  2200                           ;tarti.c: 213: if(tarti.rd_index != tarti.wr_index){
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in _check_command: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2204  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  2205  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  2206  00E1  0844               	movf	_tarti+25,w
  2207  00E2  0646               	xorwf	_tarti+27,w
  2208  00E3  1D03               	skipz
  2209  00E4  28E7               	goto	u1745
  2210  00E5  0843               	movf	_tarti+24,w
  2211  00E6  0645               	xorwf	_tarti+26,w
  2212  00E7                     u1745:	
  2213  00E7  1903               	skipnz
  2214  00E8  0008               	return
  2215                           
  2216                           ;tarti.c: 214: if(tarti.command[tarti.rd_index]==']' && (return_n_before(tarti.command,t
      +                          arti.rd_index,1)=='O' || return_n_before(tarti.command,tarti.rd_index,1)=='o' ) && retur
      +                          n_n_before(tarti.command,tarti.rd_index,2)=='['){
  2217  00E9  0845               	movf	_tarti+26,w
  2218  00EA  3E2B               	addlw	(low (_tarti| 0))& (0+255)
  2219  00EB  0084               	movwf	4
  2220  00EC  305D               	movlw	93
  2221  00ED  1383               	bcf	3,7	;select IRP bank0
  2222  00EE  0600               	xorwf	0,w
  2223  00EF  1D03               	btfss	3,2
  2224  00F0  291E               	goto	l1478
  2225  00F1  0846               	movf	_tarti+27,w
  2226  00F2  00C8               	movwf	return_n_before@position+1
  2227  00F3  0845               	movf	_tarti+26,w
  2228  00F4  00C7               	movwf	return_n_before@position
  2229  00F5  3001               	movlw	1
  2230  00F6  00C9               	movwf	return_n_before@n
  2231  00F7  3000               	movlw	0
  2232  00F8  00CA               	movwf	return_n_before@n+1
  2233  00F9  302B               	movlw	(low (_tarti| 0))& (0+255)
  2234  00FA  250D               	fcall	_return_n_before
  2235  00FB  3A4F               	xorlw	79
  2236  00FC  1903               	skipnz
  2237  00FD  290D               	goto	l1472
  2238  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  2239  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  2240  0100  0846               	movf	_tarti+27,w
  2241  0101  00C8               	movwf	return_n_before@position+1
  2242  0102  0845               	movf	_tarti+26,w
  2243  0103  00C7               	movwf	return_n_before@position
  2244  0104  3001               	movlw	1
  2245  0105  00C9               	movwf	return_n_before@n
  2246  0106  3000               	movlw	0
  2247  0107  00CA               	movwf	return_n_before@n+1
  2248  0108  302B               	movlw	(low (_tarti| 0))& (0+255)
  2249  0109  250D               	fcall	_return_n_before
  2250  010A  3A6F               	xorlw	111
  2251  010B  1D03               	skipz
  2252  010C  291E               	goto	l1478
  2253  010D                     l1472:	
  2254  010D  1283               	bcf	3,5	;RP0=0, select bank0
  2255  010E  1303               	bcf	3,6	;RP1=0, select bank0
  2256  010F  0846               	movf	_tarti+27,w
  2257  0110  00C8               	movwf	return_n_before@position+1
  2258  0111  0845               	movf	_tarti+26,w
  2259  0112  00C7               	movwf	return_n_before@position
  2260  0113  3002               	movlw	2
  2261  0114  00C9               	movwf	return_n_before@n
  2262  0115  3000               	movlw	0
  2263  0116  00CA               	movwf	return_n_before@n+1
  2264  0117  302B               	movlw	(low (_tarti| 0))& (0+255)
  2265  0118  250D               	fcall	_return_n_before
  2266  0119  3A5B               	xorlw	91
  2267  011A  1D03               	skipz
  2268  011B  291E               	goto	l1478
  2269                           
  2270                           ;tarti.c: 215: measure_flag=1;
  2271  011C  3001               	movlw	1
  2272  011D  2954               	goto	L2
  2273  011E                     l1478:	
  2274                           ;tarti.c: 217: }else{
  2275                           
  2276                           ;tarti.c: 216: PORTBbits.RB7 ^=1;
  2277                           
  2278                           
  2279                           ;tarti.c: 218: if(tarti.command[tarti.rd_index]==']' && (return_n_before(tarti.command,t
      +                          arti.rd_index,1)=='D' || return_n_before(tarti.command,tarti.rd_index,1)=='d' ) && retur
      +                          n_n_before(tarti.command,tarti.rd_index,2)=='['){
  2280  011E  1283               	bcf	3,5	;RP0=0, select bank0
  2281  011F  1303               	bcf	3,6	;RP1=0, select bank0
  2282  0120  0845               	movf	_tarti+26,w
  2283  0121  3E2B               	addlw	(low (_tarti| 0))& (0+255)
  2284  0122  0084               	movwf	4
  2285  0123  305D               	movlw	93
  2286  0124  1383               	bcf	3,7	;select IRP bank0
  2287  0125  0600               	xorwf	0,w
  2288  0126  1D03               	btfss	3,2
  2289  0127  2966               	goto	l1490
  2290  0128  0846               	movf	_tarti+27,w
  2291  0129  00C8               	movwf	return_n_before@position+1
  2292  012A  0845               	movf	_tarti+26,w
  2293  012B  00C7               	movwf	return_n_before@position
  2294  012C  3001               	movlw	1
  2295  012D  00C9               	movwf	return_n_before@n
  2296  012E  3000               	movlw	0
  2297  012F  00CA               	movwf	return_n_before@n+1
  2298  0130  302B               	movlw	(low (_tarti| 0))& (0+255)
  2299  0131  250D               	fcall	_return_n_before
  2300  0132  3A44               	xorlw	68
  2301  0133  1903               	skipnz
  2302  0134  2944               	goto	l1484
  2303  0135  1283               	bcf	3,5	;RP0=0, select bank0
  2304  0136  1303               	bcf	3,6	;RP1=0, select bank0
  2305  0137  0846               	movf	_tarti+27,w
  2306  0138  00C8               	movwf	return_n_before@position+1
  2307  0139  0845               	movf	_tarti+26,w
  2308  013A  00C7               	movwf	return_n_before@position
  2309  013B  3001               	movlw	1
  2310  013C  00C9               	movwf	return_n_before@n
  2311  013D  3000               	movlw	0
  2312  013E  00CA               	movwf	return_n_before@n+1
  2313  013F  302B               	movlw	(low (_tarti| 0))& (0+255)
  2314  0140  250D               	fcall	_return_n_before
  2315  0141  3A64               	xorlw	100
  2316  0142  1D03               	skipz
  2317  0143  2966               	goto	l1490
  2318  0144                     l1484:	
  2319  0144  1283               	bcf	3,5	;RP0=0, select bank0
  2320  0145  1303               	bcf	3,6	;RP1=0, select bank0
  2321  0146  0846               	movf	_tarti+27,w
  2322  0147  00C8               	movwf	return_n_before@position+1
  2323  0148  0845               	movf	_tarti+26,w
  2324  0149  00C7               	movwf	return_n_before@position
  2325  014A  3002               	movlw	2
  2326  014B  00C9               	movwf	return_n_before@n
  2327  014C  3000               	movlw	0
  2328  014D  00CA               	movwf	return_n_before@n+1
  2329  014E  302B               	movlw	(low (_tarti| 0))& (0+255)
  2330  014F  250D               	fcall	_return_n_before
  2331  0150  3A5B               	xorlw	91
  2332  0151  1D03               	skipz
  2333  0152  2966               	goto	l1490
  2334                           
  2335                           ;tarti.c: 219: measure_flag=2;
  2336  0153  3002               	movlw	2
  2337  0154                     L2:	
  2338  0154  1283               	bcf	3,5	;RP0=0, select bank0
  2339  0155  1303               	bcf	3,6	;RP1=0, select bank0
  2340  0156  00A9               	movwf	_measure_flag
  2341  0157  3000               	movlw	0
  2342  0158  00AA               	movwf	_measure_flag+1
  2343                           
  2344                           ;tarti.c: 220: PORTBbits.RB7 ^=1;
  2345  0159  0D06               	rlf	6,w	;volatile
  2346  015A  0D06               	rlf	6,w	;volatile
  2347  015B  3901               	andlw	1
  2348  015C  00CD               	movwf	??_check_command
  2349  015D  3001               	movlw	1
  2350  015E  06CD               	xorwf	??_check_command,f
  2351  015F  0CCD               	rrf	??_check_command,f
  2352  0160  0CCD               	rrf	??_check_command,f
  2353  0161  0806               	movf	6,w	;volatile
  2354  0162  064D               	xorwf	??_check_command,w
  2355  0163  397F               	andlw	-129
  2356  0164  064D               	xorwf	??_check_command,w
  2357  0165  0086               	movwf	6	;volatile
  2358  0166                     l1490:	
  2359                           
  2360                           ;tarti.c: 221: }
  2361                           ;tarti.c: 222: }
  2362                           ;tarti.c: 224: tarti.rd_index=tarti.wr_index;
  2363  0166  1283               	bcf	3,5	;RP0=0, select bank0
  2364  0167  1303               	bcf	3,6	;RP1=0, select bank0
  2365  0168  0844               	movf	_tarti+25,w
  2366  0169  00C6               	movwf	_tarti+27
  2367  016A  0843               	movf	_tarti+24,w
  2368  016B  00C5               	movwf	_tarti+26
  2369                           
  2370                           ;tarti.c: 226: if(tarti.rd_index>=24)
  2371  016C  3000               	movlw	0
  2372  016D  0246               	subwf	_tarti+27,w
  2373  016E  3018               	movlw	24
  2374  016F  1903               	skipnz
  2375  0170  0245               	subwf	_tarti+26,w
  2376  0171  1C03               	skipc
  2377  0172  0008               	return
  2378                           
  2379                           ;tarti.c: 227: tarti.rd_index=0;
  2380  0173  01C5               	clrf	_tarti+26
  2381  0174  01C6               	clrf	_tarti+27
  2382  0175  0008               	return
  2383  0176                     __end_of_check_command:	
  2384                           
  2385                           	psect	text12
  2386  050D                     __ptext12:	
  2387 ;; *************** function _return_n_before *****************
  2388 ;; Defined at:
  2389 ;;		line 276 in file "tarti.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  array           1    wreg     PTR unsigned char 
  2392 ;;		 -> tarti(28), 
  2393 ;;  position        2    0[BANK0 ] int 
  2394 ;;  n               2    2[BANK0 ] unsigned int 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  array           1    5[BANK0 ] PTR unsigned char 
  2397 ;;		 -> tarti(28), 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      unsigned char 
  2400 ;; Registers used:
  2401 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2407 ;;      Params:         0       4       0       0
  2408 ;;      Locals:         0       1       0       0
  2409 ;;      Temps:          0       1       0       0
  2410 ;;      Totals:         0       6       0       0
  2411 ;;Total ram usage:        6 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    1
  2414 ;; This function calls:
  2415 ;;		Nothing
  2416 ;; This function is called by:
  2417 ;;		_check_command
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           
  2422                           ;psect for function _return_n_before
  2423  050D                     _return_n_before:	
  2424                           
  2425                           ;incstack = 0
  2426                           ; Regs used in _return_n_before: [wreg-fsr0h+status,2+status,0]
  2427                           ;return_n_before@array stored from wreg
  2428  050D  1283               	bcf	3,5	;RP0=0, select bank0
  2429  050E  1303               	bcf	3,6	;RP1=0, select bank0
  2430  050F  00CC               	movwf	return_n_before@array
  2431  0510                     l1436:	
  2432                           ;tarti.c: 277: while(n>0){
  2433                           
  2434  0510  0849               	movf	return_n_before@n,w
  2435  0511  044A               	iorwf	return_n_before@n+1,w
  2436  0512  1903               	btfsc	3,2
  2437  0513  2D2A               	goto	l1438
  2438                           
  2439                           ;tarti.c: 278: if(position==0){
  2440  0514  0847               	movf	return_n_before@position,w
  2441  0515  0448               	iorwf	return_n_before@position+1,w
  2442  0516  1D03               	btfss	3,2
  2443  0517  2D1D               	goto	l1434
  2444                           
  2445                           ;tarti.c: 279: position=sizeof(array)/sizeof(array[0]);
  2446  0518  3001               	movlw	1
  2447  0519  00C7               	movwf	return_n_before@position
  2448  051A  3000               	movlw	0
  2449  051B  00C8               	movwf	return_n_before@position+1
  2450                           
  2451                           ;tarti.c: 280: }else{
  2452  051C  2D23               	goto	l166
  2453  051D                     l1434:	
  2454                           
  2455                           ;tarti.c: 281: position--;
  2456  051D  30FF               	movlw	255
  2457  051E  07C7               	addwf	return_n_before@position,f
  2458  051F  1803               	skipnc
  2459  0520  0AC8               	incf	return_n_before@position+1,f
  2460  0521  30FF               	movlw	255
  2461  0522  07C8               	addwf	return_n_before@position+1,f
  2462  0523                     l166:	
  2463                           
  2464                           ;tarti.c: 282: }
  2465                           ;tarti.c: 283: n--;
  2466  0523  3001               	movlw	1
  2467  0524  02C9               	subwf	return_n_before@n,f
  2468  0525  3000               	movlw	0
  2469  0526  1C03               	skipc
  2470  0527  03CA               	decf	return_n_before@n+1,f
  2471  0528  02CA               	subwf	return_n_before@n+1,f
  2472  0529  2D10               	goto	l1436
  2473  052A                     l1438:	
  2474                           
  2475                           ;tarti.c: 284: }
  2476                           ;tarti.c: 285: return array[position];
  2477  052A  0847               	movf	return_n_before@position,w
  2478  052B  074C               	addwf	return_n_before@array,w
  2479  052C  00CB               	movwf	??_return_n_before
  2480  052D  084B               	movf	??_return_n_before,w
  2481  052E  0084               	movwf	4
  2482  052F  1383               	bcf	3,7	;select IRP bank0
  2483  0530  0800               	movf	0,w
  2484  0531  0008               	return
  2485  0532                     __end_of_return_n_before:	
  2486                           
  2487                           	psect	text13
  2488  0548                     __ptext13:	
  2489 ;; *************** function _T0_init *****************
  2490 ;; Defined at:
  2491 ;;		line 93 in file "tarti.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		None
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2505 ;;      Params:         0       0       0       0
  2506 ;;      Locals:         0       0       0       0
  2507 ;;      Temps:          0       0       0       0
  2508 ;;      Totals:         0       0       0       0
  2509 ;;Total ram usage:        0 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; Hardware stack levels required when called:    1
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           
  2520                           ;psect for function _T0_init
  2521  0548                     _T0_init:	
  2522                           
  2523                           ;tarti.c: 94: INTCONbits.GIE=1;
  2524                           
  2525                           ;incstack = 0
  2526                           ; Regs used in _T0_init: []
  2527  0548  178B               	bsf	11,7	;volatile
  2528                           
  2529                           ;tarti.c: 95: INTCONbits.T0IE=1;
  2530  0549  168B               	bsf	11,5	;volatile
  2531                           
  2532                           ;tarti.c: 96: INTCONbits.T0IF=0;
  2533  054A  110B               	bcf	11,2	;volatile
  2534                           
  2535                           ;tarti.c: 98: OPTION_REGbits.T0CS=0;
  2536  054B  1683               	bsf	3,5	;RP0=1, select bank1
  2537  054C  1303               	bcf	3,6	;RP1=0, select bank1
  2538  054D  1281               	bcf	1,5	;volatile
  2539                           
  2540                           ;tarti.c: 99: OPTION_REGbits.T0SE=0;
  2541  054E  1201               	bcf	1,4	;volatile
  2542                           
  2543                           ;tarti.c: 100: OPTION_REGbits.PSA=0;
  2544  054F  1181               	bcf	1,3	;volatile
  2545                           
  2546                           ;tarti.c: 101: OPTION_REGbits.PS0=0;
  2547  0550  1001               	bcf	1,0	;volatile
  2548                           
  2549                           ;tarti.c: 102: OPTION_REGbits.PS1=0;
  2550  0551  1081               	bcf	1,1	;volatile
  2551                           
  2552                           ;tarti.c: 103: OPTION_REGbits.PS2=0;
  2553  0552  1101               	bcf	1,2	;volatile
  2554  0553  0008               	return
  2555  0554                     __end_of_T0_init:	
  2556                           
  2557                           	psect	text14
  2558  0454                     __ptext14:	
  2559 ;; *************** function _kes *****************
  2560 ;; Defined at:
  2561 ;;		line 126 in file "tarti.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;		None
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;		None
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      void 
  2568 ;; Registers used:
  2569 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2575 ;;      Params:         0       0       0       0
  2576 ;;      Locals:         0       0       0       0
  2577 ;;      Temps:          5       0       0       0
  2578 ;;      Totals:         5       0       0       0
  2579 ;;Total ram usage:        5 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; This function calls:
  2582 ;;		Nothing
  2583 ;; This function is called by:
  2584 ;;		Interrupt level 1
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           
  2589                           ;psect for function _kes
  2590  0454                     _kes:	
  2591                           
  2592                           ;tarti.c: 127: if(INTCONbits.T0IF && INTCONbits.T0IE){
  2593  0454  190B               	btfsc	11,2	;volatile
  2594  0455  1E8B               	btfss	11,5	;volatile
  2595  0456  2C66               	goto	i1l946
  2596                           
  2597                           ;tarti.c: 128: timetick++;
  2598  0457  3001               	movlw	1
  2599  0458  07F5               	addwf	_timetick,f
  2600  0459  3000               	movlw	0
  2601  045A  1803               	skipnc
  2602  045B  3001               	movlw	1
  2603  045C  07F6               	addwf	_timetick+1,f
  2604  045D  3000               	movlw	0
  2605  045E  1803               	skipnc
  2606  045F  3001               	movlw	1
  2607  0460  07F7               	addwf	_timetick+2,f
  2608  0461  3000               	movlw	0
  2609  0462  1803               	skipnc
  2610  0463  3001               	movlw	1
  2611  0464  07F8               	addwf	_timetick+3,f
  2612                           
  2613                           ;tarti.c: 129: INTCONbits.T0IF=0;
  2614  0465  110B               	bcf	11,2	;volatile
  2615  0466                     i1l946:	
  2616                           
  2617                           ;tarti.c: 131: }
  2618                           ;tarti.c: 133: if(timetick>=10000){
  2619  0466  0878               	movf	_timetick+3,w
  2620  0467  1D03               	btfss	3,2
  2621  0468  2C76               	goto	i1l948
  2622  0469  0877               	movf	_timetick+2,w
  2623  046A  1D03               	btfss	3,2
  2624  046B  2C76               	goto	i1l948
  2625  046C  3027               	movlw	39
  2626  046D  0276               	subwf	_timetick+1,w
  2627  046E  1D03               	skipz
  2628  046F  2C74               	goto	u67_23
  2629  0470  3010               	movlw	16
  2630  0471  0275               	subwf	_timetick,w
  2631  0472  1D03               	skipz
  2632  0473  2C74               	goto	u67_23
  2633  0474                     u67_23:	
  2634  0474  1C03               	btfss	3,0
  2635  0475  2C7E               	goto	i1l950
  2636  0476                     i1l948:	
  2637                           
  2638                           ;tarti.c: 134: timetick=0;
  2639  0476  3000               	movlw	0
  2640  0477  00F8               	movwf	_timetick+3
  2641  0478  3000               	movlw	0
  2642  0479  00F7               	movwf	_timetick+2
  2643  047A  3000               	movlw	0
  2644  047B  00F6               	movwf	_timetick+1
  2645  047C  3000               	movlw	0
  2646  047D  00F5               	movwf	_timetick
  2647  047E                     i1l950:	
  2648                           
  2649                           ;tarti.c: 135: }
  2650                           ;tarti.c: 137: if(PIR1bits.RCIF){
  2651  047E  1E8C               	btfss	12,5	;volatile
  2652  047F  2C8E               	goto	i1l956
  2653                           
  2654                           ;tarti.c: 138: tarti.command[tarti.wr_index]=RCREG;
  2655  0480  081A               	movf	26,w	;volatile
  2656  0481  00F0               	movwf	??_kes
  2657  0482  0843               	movf	_tarti+24,w
  2658  0483  3E2B               	addlw	(low (_tarti| 0))& (0+255)
  2659  0484  0084               	movwf	4
  2660  0485  0870               	movf	??_kes,w
  2661  0486  1383               	bcf	3,7	;select IRP bank0
  2662  0487  0080               	movwf	0
  2663                           
  2664                           ;tarti.c: 140: tarti.wr_index++;
  2665  0488  3001               	movlw	1
  2666  0489  07C3               	addwf	_tarti+24,f
  2667  048A  1803               	skipnc
  2668  048B  0AC4               	incf	_tarti+25,f
  2669  048C  3000               	movlw	0
  2670  048D  07C4               	addwf	_tarti+25,f
  2671  048E                     i1l956:	
  2672                           
  2673                           ;tarti.c: 141: }
  2674                           ;tarti.c: 143: if(tarti.wr_index>=24)
  2675  048E  3000               	movlw	0
  2676  048F  0244               	subwf	_tarti+25,w
  2677  0490  3018               	movlw	24
  2678  0491  1903               	skipnz
  2679  0492  0243               	subwf	_tarti+24,w
  2680  0493  1C03               	skipc
  2681  0494  2C97               	goto	i1l90
  2682                           
  2683                           ;tarti.c: 144: tarti.wr_index=0;
  2684  0495  01C3               	clrf	_tarti+24
  2685  0496  01C4               	clrf	_tarti+25
  2686  0497                     i1l90:	
  2687  0497  0874               	movf	??_kes+4,w
  2688  0498  00FF               	movwf	127
  2689  0499  0873               	movf	??_kes+3,w
  2690  049A  008A               	movwf	10
  2691  049B  0872               	movf	??_kes+2,w
  2692  049C  0084               	movwf	4
  2693  049D  0E71               	swapf	(??_kes+1)^(0+-128),w
  2694  049E  0083               	movwf	3
  2695  049F  0EFE               	swapf	126,f
  2696  04A0  0E7E               	swapf	126,w
  2697  04A1  0009               	retfie
  2698  04A2                     __end_of_kes:	
  2699  007E                     btemp	set	126	;btemp
  2700  007E                     wtemp0	set	126
  2701                           
  2702                           	psect	intentry
  2703  0004                     __pintentry:	
  2704                           ;incstack = 0
  2705                           ; Regs used in _kes: [wreg-fsr0h+status,2+status,0]
  2706                           
  2707  0004                     interrupt_function:	
  2708  007E                     saved_w	set	btemp
  2709  0004  00FE               	movwf	btemp
  2710  0005  0E03               	swapf	3,w
  2711  0006  00F1               	movwf	??_kes+1
  2712  0007  0804               	movf	4,w
  2713  0008  00F2               	movwf	??_kes+2
  2714  0009  080A               	movf	10,w
  2715  000A  00F3               	movwf	??_kes+3
  2716  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2717  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2718  000D  087F               	movf	btemp+1,w
  2719  000E  00F4               	movwf	??_kes+4
  2720  000F  2C54               	ljmp	_kes


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     35      74
    BANK1            80      0      10
    BANK2            48      0       0

Pointer List with Targets:

    return_n_before@array	PTR unsigned char  size(1) Largest target is 28
		 -> tarti(BANK0[28]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _kes in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_set_offset
    _set_offset->_write_dec
    _measure_force->_write_dec
    _write_dec->___aldiv
    _check_command->_return_n_before

Critical Paths under _kes in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _kes in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _kes in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8578
                            _T0_init
                      _check_command
                      _measure_force
                         _read_tarti
                          _send_data
                        _serial_init
                         _set_offset
                         _tarti_init
 ---------------------------------------------------------------------------------
 (1) _tarti_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_offset                                          13    13      0    3594
                                             22 BANK0     13    13      0
                            ___aldiv
                         _read_tarti
                          _write_dec
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_data                                            2     2      0     161
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _measure_force                                       10    10      0    3594
                                             22 BANK0     10    10      0
                            ___aldiv
                         _read_tarti
                          _write_dec
 ---------------------------------------------------------------------------------
 (2) _write_dec                                            7     3      4    2354
                                             15 BANK0      7     3      4
                            ___aldiv
                            ___almod
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     266
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     563
                                              0 BANK0     11     3      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     965
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _read_tarti                                           8     8      0     136
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _check_command                                        1     1      0    1093
                                              6 BANK0      1     1      0
                    _return_n_before
 ---------------------------------------------------------------------------------
 (2) _return_n_before                                      6     2      4    1093
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _T0_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _kes                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _T0_init
   _check_command
     _return_n_before
   _measure_force
     ___aldiv
     _read_tarti
     _write_dec
       ___aldiv
       ___almod
       ___lmul
   _read_tarti
   _send_data
   _serial_init
   _set_offset
     ___aldiv
     _read_tarti
     _write_dec
       ___aldiv
       ___almod
       ___lmul
   _tarti_init

 _kes (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     23      4A       3       92.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      5D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       A       7       12.5%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      5D      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Feb 03 10:34:35 2018

             __CFG_CP$OFF 0000                        l96 0394                        l99 03A3  
                      fsr 0004                       l101 03B8                       l104 03CF  
                     l105 03FA                       l150 0432                       l151 042A  
                     l320 032A                       l154 0443                       l307 0188  
                     l147 0419                       l157 044B                       l166 0523  
            __CFG_CPD$OFF 0000                       _kes 0454                       fsr0 0004  
                     indf 0000              __CFG_FOSC$HS 0000              __CFG_LVP$OFF 0000  
   __end_of_check_command 0176                      l1320 01EE                      l1306 01A9  
                    l1324 01FC                      l1316 01E1                      l1308 01B9  
                    l1404 0070                      l1342 033F                      l1406 0076  
                    l1344 034F                      l1352 037A                      l1336 0337  
                    l1280 04C2                      l1416 007F                      l1512 024E  
                    l1504 021C                      l1434 051D                      l1418 00C3  
                    l1450 02A8                      l1436 0510                      l1356 0388  
                    l1348 036D                      l1276 04AC                      l1524 0412  
                    l1438 052A                      l1472 010D                      l1560 04FF  
                    l1490 0166                      l1298 0199                      l1458 02E5  
                    l1484 0144                      l1564 04F9                      l1478 011E  
                    ?_kes 0070                      u1425 01AD                      u1605 03B6  
                    u1445 01BB                      u1525 0343                      u1365 04C4  
                    u1455 01D0                      u1375 04CC                      u1625 03CD  
                    u1465 01E2                      u1545 035D                      u1635 03D3  
                    u1555 036E                      u1715 02A6                      u1645 03F8  
                    u1735 02E3                      u1745 00E7                      u1595 03A1  
                    u1675 00CC                      u1845 021A                      u1935 0441  
                    u1865 024C                      u1885 0410                      i1l90 0497  
         __end_of_T0_init 0554            write_dec@value 0056                      _main 04E3  
                    btemp 007E                      start 0010                     ??_kes 0070  
         __end_of___aldiv 0205           __end_of___almod 0391                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _CMCON 001F                     i1l950 047E  
                   i1l946 0466                     i1l956 048E                     i1l948 0476  
                   _RCREG 001A                     _SPBRG 0099                     _TRISB 0086  
                   u67_23 0474                     _TXREG 0019       ___lmul@multiplicand 004B  
                   _force 0020                     _tarti 002B            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
  __size_of_measure_force 008C            __CFG_MCLRE$OFF 0000           __initialization 0011  
__size_of_return_n_before 0025              __end_of_main 050D                    ??_main 0075  
               ??_T0_init 0075            __CFG_PWRTE$OFF 0000              ?_serial_init 0070  
                  ___lmul 04A2                 ??___aldiv 004F                 ??___almod 004F  
                  _offset 0023             _measure_force 0205                    saved_w 007E  
             read_tarti@i 004D   __end_of__initialization 001E            __pcstackCOMMON 0070  
        return_n_before@n 0049         ??_return_n_before 004B            ?_measure_force 0070  
          _OPTION_REGbits 0081                __pbssBANK0 0020                __pbssBANK1 00A0  
              __pmaintext 04E3                   ?___lmul 0047                __pintentry 0004  
      __size_of_send_data 0053            ___lmul@product 0050                   _T0_init 0548  
      __size_of_write_dec 00BF                   ___aldiv 0176                   ___almod 0318  
         __size_of___lmul 0041      __size_of_serial_init 0016    __size_of_check_command 0097  
         ??_measure_force 005D                   __ptext1 0554                   __ptext2 0291  
                 __ptext3 0532                   __ptext4 0401                   __ptext5 0205  
                 __ptext6 0020                   __ptext7 04A2                   __ptext8 0318  
                 __ptext9 0176                _read_tarti 0391              __size_of_kes 004E  
        ___aldiv@dividend 004B   return_n_before@position 0047               set_offset@i 0064  
                 clrloop0 055E      end_of_initialization 001E         __end_of_send_data 0454  
          measure_force@i 0061                _set_offset 0291                 _RCSTAbits 0018  
        ___aldiv@quotient 0052                _tarti_init 0554                 _PORTAbits 0005  
               _PORTBbits 0006              read_tarti@kl 004B         __end_of_write_dec 00DF  
               _TRISAbits 0085                 _TRISBbits 0086             _check_command 00DF  
               _TXSTAbits 0098           _return_n_before 050D            __end_of___lmul 04E3  
    return_n_before@array 004C               ?_read_tarti 0070       start_initialization 0011  
             __end_of_kes 04A2            ?_check_command 0070               ?_set_offset 0070  
                ??___lmul 004F               ?_tarti_init 0070              _measure_flag 0029  
             __pbssCOMMON 0075                 ___latbits 0000             __pcstackBANK0 0047  
                ?_T0_init 0070   __end_of_return_n_before 0532                 _dec_array 00A0  
     __size_of_read_tarti 0070                  ?___aldiv 0047                  ?___almod 0047  
        ___almod@dividend 004B           ??_check_command 004D       __size_of_set_offset 0087  
     __size_of_tarti_init 0009           ___aldiv@divisor 0047         interrupt_function 0004  
         ___aldiv@counter 0050                 clear_ram0 055D                  _PIE1bits 008C  
               _send_data 0401                  _PIR1bits 000C             ??_serial_init 0075  
            send_data@cnt 0047     __end_of_measure_force 0291             set_offset@sum 0066  
        __size_of_T0_init 000C                 _write_dec 0020         ___lmul@multiplier 0047  
        ?_return_n_before 0047                ?_send_data 0070               _measure_val 0026  
        __size_of___aldiv 008F          __size_of___almod 0079       __end_of_serial_init 0548  
            ??_read_tarti 0047          measure_force@sum 0063                  __ptext10 0391  
                __ptext11 00DF                  __ptext12 050D                  __ptext13 0548  
                __ptext14 0454                ?_write_dec 0056           ___almod@divisor 0047  
         ___almod@counter 0050             __size_of_main 002A        __end_of_read_tarti 0401  
            ??_set_offset 005D              ??_tarti_init 0075                  _timetick 0075  
              write_dec@i 005B                _INTCONbits 000B        __end_of_set_offset 0318  
                intlevel1 0000        __end_of_tarti_init 055D               ??_send_data 0075  
             _serial_init 0532              ___aldiv@sign 0051               ??_write_dec 005A  
            ___almod@sign 0051  
