

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 02 18:33:42 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F628A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009F                     	;# 
    97  001A                     _RCREG	set	26
    98  000C                     _PIR1bits	set	12
    99  0018                     _RCSTAbits	set	24
   100  000B                     _INTCONbits	set	11
   101  0019                     _TXREG	set	25
   102  0006                     _PORTBbits	set	6
   103  0005                     _PORTAbits	set	5
   104  001F                     _CMCON	set	31
   105  0085                     _TRISAbits	set	133
   106  0099                     _SPBRG	set	153
   107  008C                     _PIE1bits	set	140
   108  0086                     _TRISBbits	set	134
   109  0081                     _OPTION_REGbits	set	129
   110  0098                     _TXSTAbits	set	152
   111  0086                     _TRISB	set	134
   112                           
   113                           ; #config settings
   114  0000                     
   115                           	psect	cinit
   116  0011                     start_initialization:	
   117  0011                     __initialization:	
   118                           
   119                           ; Clear objects allocated to COMMON
   120  0011  3075               	movlw	low __pbssCOMMON
   121  0012  0084               	movwf	4
   122  0013  3079               	movlw	low (__pbssCOMMON+4)
   123  0014  24C8               	fcall	clear_ram0
   124                           
   125                           ; Clear objects allocated to BANK0
   126  0015  1383               	bcf	3,7	;select IRP bank0
   127  0016  304A               	movlw	low __pbssBANK0
   128  0017  0084               	movwf	4
   129  0018  305F               	movlw	low (__pbssBANK0+21)
   130  0019  24C8               	fcall	clear_ram0
   131                           
   132                           ; Clear objects allocated to BANK1
   133  001A  30A0               	movlw	low __pbssBANK1
   134  001B  0084               	movwf	4
   135  001C  30BC               	movlw	low (__pbssBANK1+28)
   136  001D  24C8               	fcall	clear_ram0
   137  001E                     end_of_initialization:	
   138                           ;End of C runtime variable initialization code
   139                           
   140  001E                     __end_of__initialization:	
   141  001E  0183               	clrf	3
   142  001F  28D5               	ljmp	_main	;jump to C main() function
   143                           
   144                           	psect	bssCOMMON
   145  0075                     __pbssCOMMON:	
   146  0075                     _timetick:	
   147  0075                     	ds	4
   148                           
   149                           	psect	bssBANK0
   150  004A                     __pbssBANK0:	
   151  004A                     _dec_array:	
   152  004A                     	ds	12
   153  0056                     _force:	
   154  0056                     	ds	3
   155  0059                     _offset:	
   156  0059                     	ds	3
   157  005C                     _measure_val:	
   158  005C                     	ds	3
   159                           
   160                           	psect	bssBANK1
   161  00A0                     __pbssBANK1:	
   162  00A0                     _tarti:	
   163  00A0                     	ds	28
   164                           
   165                           	psect	clrtext
   166  04C8                     clear_ram0:	
   167                           ;	Called with FSR containing the base address, and
   168                           ;	W with the last address+1
   169                           
   170  04C8  0064               	clrwdt	;clear the watchdog before getting into this loop
   171  04C9                     clrloop0:	
   172  04C9  0180               	clrf	0	;clear RAM location pointed to by FSR
   173  04CA  0A84               	incf	4,f	;increment pointer
   174  04CB  0604               	xorwf	4,w	;XOR with final address
   175  04CC  1903               	btfsc	3,2	;have we reached the end yet?
   176  04CD  3400               	retlw	0	;all done for this memory range, return
   177  04CE  0604               	xorwf	4,w	;XOR again to restore value
   178  04CF  2CC9               	goto	clrloop0	;do the next byte
   179                           
   180                           	psect	cstackCOMMON
   181  0070                     __pcstackCOMMON:	
   182  0070                     ?_T0_init:	
   183  0070                     ?_serial_init:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?_tarti_init:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ?_read_tarti:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_set_offset:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ?_measure_force:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_main:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_kes:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ??_kes:	
   205                           ; 1 bytes @ 0x0
   206                           
   207                           
   208                           ; 1 bytes @ 0x0
   209  0070                     	ds	5
   210  0075                     ??_T0_init:	
   211  0075                     ??_serial_init:	
   212                           ; 1 bytes @ 0x5
   213                           
   214  0075                     ??_tarti_init:	
   215                           ; 1 bytes @ 0x5
   216                           
   217                           
   218                           	psect	cstackBANK0
   219  0020                     __pcstackBANK0:	
   220                           ; 1 bytes @ 0x5
   221                           
   222  0020                     ??_read_tarti:	
   223  0020                     ?___lmul:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0020                     ?___aldiv:	
   227                           ; 4 bytes @ 0x0
   228                           
   229  0020                     ?___almod:	
   230                           ; 4 bytes @ 0x0
   231                           
   232  0020                     ___lmul@multiplier:	
   233                           ; 4 bytes @ 0x0
   234                           
   235  0020                     ___aldiv@divisor:	
   236                           ; 4 bytes @ 0x0
   237                           
   238  0020                     ___almod@divisor:	
   239                           ; 4 bytes @ 0x0
   240                           
   241                           
   242                           ; 4 bytes @ 0x0
   243  0020                     	ds	4
   244  0024                     read_tarti@kl:	
   245  0024                     ___lmul@multiplicand:	
   246                           ; 2 bytes @ 0x4
   247                           
   248  0024                     ___aldiv@dividend:	
   249                           ; 4 bytes @ 0x4
   250                           
   251  0024                     ___almod@dividend:	
   252                           ; 4 bytes @ 0x4
   253                           
   254                           
   255                           ; 4 bytes @ 0x4
   256  0024                     	ds	2
   257  0026                     read_tarti@i:	
   258                           
   259                           ; 2 bytes @ 0x6
   260  0026                     	ds	2
   261  0028                     ??___lmul:	
   262  0028                     ??___aldiv:	
   263                           ; 1 bytes @ 0x8
   264                           
   265  0028                     ??___almod:	
   266                           ; 1 bytes @ 0x8
   267                           
   268                           
   269                           ; 1 bytes @ 0x8
   270  0028                     	ds	1
   271  0029                     ___aldiv@counter:	
   272  0029                     ___almod@counter:	
   273                           ; 1 bytes @ 0x9
   274                           
   275  0029                     ___lmul@product:	
   276                           ; 1 bytes @ 0x9
   277                           
   278                           
   279                           ; 4 bytes @ 0x9
   280  0029                     	ds	1
   281  002A                     ___aldiv@sign:	
   282  002A                     ___almod@sign:	
   283                           ; 1 bytes @ 0xA
   284                           
   285                           
   286                           ; 1 bytes @ 0xA
   287  002A                     	ds	1
   288  002B                     ___aldiv@quotient:	
   289                           
   290                           ; 4 bytes @ 0xB
   291  002B                     	ds	4
   292  002F                     ?_write_dec:	
   293  002F                     write_dec@value:	
   294                           ; 1 bytes @ 0xF
   295                           
   296                           
   297                           ; 4 bytes @ 0xF
   298  002F                     	ds	4
   299  0033                     ??_write_dec:	
   300                           
   301                           ; 1 bytes @ 0x13
   302  0033                     	ds	1
   303  0034                     write_dec@i:	
   304                           
   305                           ; 2 bytes @ 0x14
   306  0034                     	ds	2
   307  0036                     ??_set_offset:	
   308  0036                     ??_measure_force:	
   309                           ; 1 bytes @ 0x16
   310                           
   311                           
   312                           ; 1 bytes @ 0x16
   313  0036                     	ds	4
   314  003A                     measure_force@i:	
   315                           
   316                           ; 2 bytes @ 0x1A
   317  003A                     	ds	2
   318  003C                     measure_force@sum:	
   319                           
   320                           ; 4 bytes @ 0x1C
   321  003C                     	ds	1
   322  003D                     set_offset@i:	
   323                           
   324                           ; 2 bytes @ 0x1D
   325  003D                     	ds	2
   326  003F                     set_offset@sum:	
   327                           
   328                           ; 4 bytes @ 0x1F
   329  003F                     	ds	4
   330  0043                     ??_main:	
   331                           
   332                           ; 1 bytes @ 0x23
   333  0043                     	ds	3
   334  0046                     main@cnt:	
   335                           
   336                           ; 2 bytes @ 0x26
   337  0046                     	ds	2
   338  0048                     main@cnt_335:	
   339                           
   340                           ; 2 bytes @ 0x28
   341  0048                     	ds	2
   342                           
   343                           	psect	maintext
   344  00D5                     __pmaintext:	
   345 ;;
   346 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   347 ;;
   348 ;; *************** function _main *****************
   349 ;; Defined at:
   350 ;;		line 49 in file "tarti.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;		None
   353 ;; Auto vars:     Size  Location     Type
   354 ;;  cnt             2   40[BANK0 ] int 
   355 ;;  cnt             2   38[BANK0 ] int 
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : B00/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   365 ;;      Params:         0       0       0       0
   366 ;;      Locals:         0       4       0       0
   367 ;;      Temps:          0       3       0       0
   368 ;;      Totals:         0       7       0       0
   369 ;;Total ram usage:        7 bytes
   370 ;; Hardware stack levels required when called:    4
   371 ;; This function calls:
   372 ;;		_T0_init
   373 ;;		_measure_force
   374 ;;		_read_tarti
   375 ;;		_serial_init
   376 ;;		_set_offset
   377 ;;		_tarti_init
   378 ;; This function is called by:
   379 ;;		Startup code after reset
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           
   384                           ;psect for function _main
   385  00D5                     _main:	
   386                           
   387                           ;tarti.c: 50: CMCON = 0x07;
   388                           
   389                           ;incstack = 0
   390                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   391  00D5  3007               	movlw	7
   392  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   393  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   394  00D8  009F               	movwf	31	;volatile
   395                           
   396                           ;tarti.c: 51: TRISB = 0b00000110;
   397  00D9  3006               	movlw	6
   398  00DA  1683               	bsf	3,5	;RP0=1, select bank1
   399  00DB  1303               	bcf	3,6	;RP1=0, select bank1
   400  00DC  0086               	movwf	6	;volatile
   401                           
   402                           ;tarti.c: 53: T0_init();
   403  00DD  24B3               	fcall	_T0_init
   404                           
   405                           ;tarti.c: 54: serial_init();
   406  00DE  249D               	fcall	_serial_init
   407                           
   408                           ;tarti.c: 55: tarti_init();
   409  00DF  24BF               	fcall	_tarti_init
   410                           
   411                           ;tarti.c: 57: tarti.wr_index = 0;
   412  00E0  1683               	bsf	3,5	;RP0=1, select bank1
   413  00E1  1303               	bcf	3,6	;RP1=0, select bank1
   414  00E2  01B8               	clrf	(_tarti^(0+128)+24)
   415  00E3  01B9               	clrf	((_tarti+1)^(0+128)+24)
   416                           
   417                           ;tarti.c: 58: tarti.rd_index = 0;
   418  00E4  01BA               	clrf	(_tarti^(0+128)+26)
   419  00E5  01BB               	clrf	((_tarti+1)^(0+128)+26)
   420                           
   421                           ;tarti.c: 60: PORTAbits.RA0 = 0;
   422  00E6  1283               	bcf	3,5	;RP0=0, select bank0
   423  00E7  1303               	bcf	3,6	;RP1=0, select bank0
   424  00E8  1005               	bcf	5,0	;volatile
   425                           
   426                           ;tarti.c: 61: PORTBbits.RB7 = 1;
   427  00E9  1786               	bsf	6,7	;volatile
   428                           
   429                           ;tarti.c: 63: _delay((unsigned long)((4000)*(20000000/4000.0)));
   430  00EA  3066               	movlw	102
   431  00EB  1283               	bcf	3,5	;RP0=0, select bank0
   432  00EC  1303               	bcf	3,6	;RP1=0, select bank0
   433  00ED  00C5               	movwf	??_main+2
   434  00EE  3076               	movlw	118
   435  00EF  00C4               	movwf	??_main+1
   436  00F0  30C0               	movlw	192
   437  00F1  00C3               	movwf	??_main
   438  00F2                     u1707:	
   439  00F2  0BC3               	decfsz	??_main,f
   440  00F3  28F2               	goto	u1707
   441  00F4  0BC4               	decfsz	??_main+1,f
   442  00F5  28F2               	goto	u1707
   443  00F6  0BC5               	decfsz	??_main+2,f
   444  00F7  28F2               	goto	u1707
   445  00F8  28F9               	nop2
   446                           
   447                           ;tarti.c: 64: read_tarti();
   448  00F9  2398               	fcall	_read_tarti
   449                           
   450                           ;tarti.c: 65: set_offset();
   451  00FA  2298               	fcall	_set_offset
   452                           
   453                           ;tarti.c: 66: set_offset();
   454  00FB  2298               	fcall	_set_offset
   455                           
   456                           ;tarti.c: 67: set_offset();
   457  00FC  2298               	fcall	_set_offset
   458                           
   459                           ;tarti.c: 68: set_offset();
   460  00FD  2298               	fcall	_set_offset
   461                           
   462                           ;tarti.c: 71: for(int cnt=0; cnt<10; cnt++){
   463  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   464  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   465  0100  01C6               	clrf	main@cnt
   466  0101  01C7               	clrf	main@cnt+1
   467  0102  0847               	movf	main@cnt+1,w
   468  0103  3A80               	xorlw	128
   469  0104  00FF               	movwf	127
   470  0105  3080               	movlw	128
   471  0106  027F               	subwf	127,w
   472  0107  1D03               	skipz
   473  0108  290B               	goto	u1595
   474  0109  300A               	movlw	10
   475  010A  0246               	subwf	main@cnt,w
   476  010B                     u1595:	
   477  010B  1803               	btfsc	3,0
   478  010C  292A               	goto	l68
   479  010D                     l65:	
   480                           ;tarti.c: 72: while(!TXSTAbits.TRMT);
   481                           
   482  010D  1683               	bsf	3,5	;RP0=1, select bank1
   483  010E  1303               	bcf	3,6	;RP1=0, select bank1
   484  010F  1C98               	btfss	24,1	;volatile
   485  0110  290D               	goto	l65
   486                           
   487                           ;tarti.c: 73: TXREG=(dec_array[cnt]);
   488  0111  1283               	bcf	3,5	;RP0=0, select bank0
   489  0112  1303               	bcf	3,6	;RP1=0, select bank0
   490  0113  0846               	movf	main@cnt,w
   491  0114  3E4A               	addlw	(low (_dec_array| 0))& (0+255)
   492  0115  0084               	movwf	4
   493  0116  1383               	bcf	3,7	;select IRP bank0
   494  0117  0800               	movf	0,w
   495  0118  0099               	movwf	25	;volatile
   496  0119  3001               	movlw	1
   497  011A  07C6               	addwf	main@cnt,f
   498  011B  1803               	skipnc
   499  011C  0AC7               	incf	main@cnt+1,f
   500  011D  3000               	movlw	0
   501  011E  07C7               	addwf	main@cnt+1,f
   502  011F  0847               	movf	main@cnt+1,w
   503  0120  3A80               	xorlw	128
   504  0121  00FF               	movwf	127
   505  0122  3080               	movlw	128
   506  0123  027F               	subwf	127,w
   507  0124  1D03               	skipz
   508  0125  2928               	goto	u1615
   509  0126  300A               	movlw	10
   510  0127  0246               	subwf	main@cnt,w
   511  0128                     u1615:	
   512  0128  1C03               	skipc
   513  0129  290D               	goto	l65
   514  012A                     l68:	
   515                           ;tarti.c: 74: }
   516                           ;tarti.c: 76: while(!TXSTAbits.TRMT);
   517                           
   518  012A  1683               	bsf	3,5	;RP0=1, select bank1
   519  012B  1303               	bcf	3,6	;RP1=0, select bank1
   520  012C  1C98               	btfss	24,1	;volatile
   521  012D  292A               	goto	l68
   522                           
   523                           ;tarti.c: 77: TXREG='\r';
   524  012E  300D               	movlw	13
   525  012F  1283               	bcf	3,5	;RP0=0, select bank0
   526  0130  1303               	bcf	3,6	;RP1=0, select bank0
   527  0131  0099               	movwf	25	;volatile
   528  0132                     l71:	
   529                           ;tarti.c: 78: while(!TXSTAbits.TRMT);
   530                           
   531  0132  1683               	bsf	3,5	;RP0=1, select bank1
   532  0133  1303               	bcf	3,6	;RP1=0, select bank1
   533  0134  1C98               	btfss	24,1	;volatile
   534  0135  2932               	goto	l71
   535                           
   536                           ;tarti.c: 79: TXREG='\n';
   537  0136  300A               	movlw	10
   538  0137  1283               	bcf	3,5	;RP0=0, select bank0
   539  0138  1303               	bcf	3,6	;RP1=0, select bank0
   540  0139  0099               	movwf	25	;volatile
   541  013A                     l74:	
   542                           ;tarti.c: 80: while(!TXSTAbits.TRMT);
   543                           
   544  013A  1683               	bsf	3,5	;RP0=1, select bank1
   545  013B  1303               	bcf	3,6	;RP1=0, select bank1
   546  013C  1C98               	btfss	24,1	;volatile
   547  013D  293A               	goto	l74
   548                           
   549                           ;tarti.c: 81: TXREG='p';
   550  013E  3070               	movlw	112
   551  013F                     L1:	
   552  013F  1283               	bcf	3,5	;RP0=0, select bank0
   553  0140  1303               	bcf	3,6	;RP1=0, select bank0
   554  0141  0099               	movwf	25	;volatile
   555                           
   556                           ;tarti.c: 89: measure_force();
   557                           
   558                           ;tarti.c: 82: while (1) {
   559  0142  220C               	fcall	_measure_force
   560                           
   561                           ;tarti.c: 91: for(int cnt=0; cnt<12; cnt++){
   562  0143  1283               	bcf	3,5	;RP0=0, select bank0
   563  0144  1303               	bcf	3,6	;RP1=0, select bank0
   564  0145  01C8               	clrf	main@cnt_335
   565  0146  01C9               	clrf	main@cnt_335+1
   566  0147  0849               	movf	main@cnt_335+1,w
   567  0148  3A80               	xorlw	128
   568  0149  00FF               	movwf	127
   569  014A  3080               	movlw	128
   570  014B  027F               	subwf	127,w
   571  014C  1D03               	skipz
   572  014D  2950               	goto	u1655
   573  014E  300C               	movlw	12
   574  014F  0248               	subwf	main@cnt_335,w
   575  0150                     u1655:	
   576  0150  1803               	btfsc	3,0
   577  0151  296F               	goto	l83
   578  0152                     l80:	
   579                           ;tarti.c: 92: while(!TXSTAbits.TRMT);
   580                           
   581  0152  1683               	bsf	3,5	;RP0=1, select bank1
   582  0153  1303               	bcf	3,6	;RP1=0, select bank1
   583  0154  1C98               	btfss	24,1	;volatile
   584  0155  2952               	goto	l80
   585                           
   586                           ;tarti.c: 93: TXREG=(dec_array[cnt]);
   587  0156  1283               	bcf	3,5	;RP0=0, select bank0
   588  0157  1303               	bcf	3,6	;RP1=0, select bank0
   589  0158  0848               	movf	main@cnt_335,w
   590  0159  3E4A               	addlw	(low (_dec_array| 0))& (0+255)
   591  015A  0084               	movwf	4
   592  015B  1383               	bcf	3,7	;select IRP bank0
   593  015C  0800               	movf	0,w
   594  015D  0099               	movwf	25	;volatile
   595  015E  3001               	movlw	1
   596  015F  07C8               	addwf	main@cnt_335,f
   597  0160  1803               	skipnc
   598  0161  0AC9               	incf	main@cnt_335+1,f
   599  0162  3000               	movlw	0
   600  0163  07C9               	addwf	main@cnt_335+1,f
   601  0164  0849               	movf	main@cnt_335+1,w
   602  0165  3A80               	xorlw	128
   603  0166  00FF               	movwf	127
   604  0167  3080               	movlw	128
   605  0168  027F               	subwf	127,w
   606  0169  1D03               	skipz
   607  016A  296D               	goto	u1675
   608  016B  300C               	movlw	12
   609  016C  0248               	subwf	main@cnt_335,w
   610  016D                     u1675:	
   611  016D  1C03               	skipc
   612  016E  2952               	goto	l80
   613  016F                     l83:	
   614                           ;tarti.c: 94: }
   615                           ;tarti.c: 95: while(!TXSTAbits.TRMT);
   616                           
   617  016F  1683               	bsf	3,5	;RP0=1, select bank1
   618  0170  1303               	bcf	3,6	;RP1=0, select bank1
   619  0171  1C98               	btfss	24,1	;volatile
   620  0172  296F               	goto	l83
   621                           
   622                           ;tarti.c: 96: TXREG='\r';
   623  0173  300D               	movlw	13
   624  0174  1283               	bcf	3,5	;RP0=0, select bank0
   625  0175  1303               	bcf	3,6	;RP1=0, select bank0
   626  0176  0099               	movwf	25	;volatile
   627  0177                     l86:	
   628                           ;tarti.c: 97: while(!TXSTAbits.TRMT);
   629                           
   630  0177  1683               	bsf	3,5	;RP0=1, select bank1
   631  0178  1303               	bcf	3,6	;RP1=0, select bank1
   632  0179  1C98               	btfss	24,1	;volatile
   633  017A  2977               	goto	l86
   634                           
   635                           ;tarti.c: 98: TXREG='\n';
   636  017B  300A               	movlw	10
   637  017C  293F               	goto	L1
   638  017D                     __end_of_main:	
   639                           ;tarti.c: 102: }
   640                           ;tarti.c: 104: return;
   641                           
   642                           
   643                           	psect	text1
   644  04BF                     __ptext1:	
   645 ;; *************** function _tarti_init *****************
   646 ;; Defined at:
   647 ;;		line 162 in file "tarti.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;		None
   650 ;; Auto vars:     Size  Location     Type
   651 ;;		None
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      void 
   654 ;; Registers used:
   655 ;;		None
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   661 ;;      Params:         0       0       0       0
   662 ;;      Locals:         0       0       0       0
   663 ;;      Temps:          0       0       0       0
   664 ;;      Totals:         0       0       0       0
   665 ;;Total ram usage:        0 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    1
   668 ;; This function calls:
   669 ;;		Nothing
   670 ;; This function is called by:
   671 ;;		_main
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675                           
   676                           ;psect for function _tarti_init
   677  04BF                     _tarti_init:	
   678                           
   679                           ;tarti.c: 164: TRISAbits.TRISA0=0;
   680                           
   681                           ;incstack = 0
   682                           ; Regs used in _tarti_init: []
   683  04BF  1683               	bsf	3,5	;RP0=1, select bank1
   684  04C0  1303               	bcf	3,6	;RP1=0, select bank1
   685  04C1  1005               	bcf	5,0	;volatile
   686                           
   687                           ;tarti.c: 165: TRISAbits.TRISA3=1;
   688  04C2  1585               	bsf	5,3	;volatile
   689                           
   690                           ;tarti.c: 166: TRISAbits.TRISA4=0;
   691  04C3  1205               	bcf	5,4	;volatile
   692                           
   693                           ;tarti.c: 167: PORTAbits.RA0=0;
   694  04C4  1283               	bcf	3,5	;RP0=0, select bank0
   695  04C5  1303               	bcf	3,6	;RP1=0, select bank0
   696  04C6  1005               	bcf	5,0	;volatile
   697  04C7  0008               	return
   698  04C8                     __end_of_tarti_init:	
   699                           
   700                           	psect	text2
   701  0298                     __ptext2:	
   702 ;; *************** function _set_offset *****************
   703 ;; Defined at:
   704 ;;		line 203 in file "tarti.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  i               2   29[BANK0 ] int 
   709 ;;  sum             4   31[BANK0 ] long 
   710 ;; Return value:  Size  Location     Type
   711 ;;                  1    wreg      void 
   712 ;; Registers used:
   713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   719 ;;      Params:         0       0       0       0
   720 ;;      Locals:         0       6       0       0
   721 ;;      Temps:          0       7       0       0
   722 ;;      Totals:         0      13       0       0
   723 ;;Total ram usage:       13 bytes
   724 ;; Hardware stack levels used:    1
   725 ;; Hardware stack levels required when called:    3
   726 ;; This function calls:
   727 ;;		___aldiv
   728 ;;		_read_tarti
   729 ;;		_write_dec
   730 ;; This function is called by:
   731 ;;		_main
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           
   736                           ;psect for function _set_offset
   737  0298                     _set_offset:	
   738                           
   739                           ;tarti.c: 204: int32_t sum=0;
   740                           
   741                           ;incstack = 0
   742                           ; Regs used in _set_offset: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   743  0298  3000               	movlw	0
   744  0299  1283               	bcf	3,5	;RP0=0, select bank0
   745  029A  1303               	bcf	3,6	;RP1=0, select bank0
   746  029B  00C2               	movwf	set_offset@sum+3
   747  029C  3000               	movlw	0
   748  029D  00C1               	movwf	set_offset@sum+2
   749  029E  3000               	movlw	0
   750  029F  00C0               	movwf	set_offset@sum+1
   751  02A0  3000               	movlw	0
   752  02A1  00BF               	movwf	set_offset@sum
   753                           
   754                           ;tarti.c: 205: for(int i=0;i<5;i++){
   755  02A2  01BD               	clrf	set_offset@i
   756  02A3  01BE               	clrf	set_offset@i+1
   757  02A4  083E               	movf	set_offset@i+1,w
   758  02A5  3A80               	xorlw	128
   759  02A6  00FF               	movwf	127
   760  02A7  3080               	movlw	128
   761  02A8  027F               	subwf	127,w
   762  02A9  1D03               	skipz
   763  02AA  2AAD               	goto	u1525
   764  02AB  3005               	movlw	5
   765  02AC  023D               	subwf	set_offset@i,w
   766  02AD                     u1525:	
   767  02AD  1803               	btfsc	3,0
   768  02AE  2AEC               	goto	l1362
   769  02AF                     l1354:	
   770                           
   771                           ;tarti.c: 206: read_tarti();
   772  02AF  2398               	fcall	_read_tarti
   773                           
   774                           ;tarti.c: 207: sum += -measure_val;
   775  02B0  1283               	bcf	3,5	;RP0=0, select bank0
   776  02B1  1303               	bcf	3,6	;RP1=0, select bank0
   777  02B2  095C               	comf	_measure_val,w
   778  02B3  00B6               	movwf	??_set_offset
   779  02B4  095D               	comf	_measure_val+1,w
   780  02B5  00B7               	movwf	??_set_offset+1
   781  02B6  095E               	comf	_measure_val+2,w
   782  02B7  00B8               	movwf	??_set_offset+2
   783  02B8  0AB6               	incf	??_set_offset,f
   784  02B9  1903               	skipnz
   785  02BA  0AB7               	incf	??_set_offset+1,f
   786  02BB  1903               	skipnz
   787  02BC  0AB8               	incf	??_set_offset+2,f
   788  02BD  0836               	movf	??_set_offset,w
   789  02BE  00B9               	movwf	??_set_offset+3
   790  02BF  0837               	movf	??_set_offset+1,w
   791  02C0  00BA               	movwf	??_set_offset+4
   792  02C1  0838               	movf	??_set_offset+2,w
   793  02C2  00BB               	movwf	??_set_offset+5
   794  02C3  3000               	movlw	0
   795  02C4  1BBB               	btfsc	??_set_offset+5,7
   796  02C5  30FF               	movlw	255
   797  02C6  00BC               	movwf	??_set_offset+6
   798  02C7  0839               	movf	??_set_offset+3,w
   799  02C8  07BF               	addwf	set_offset@sum,f
   800  02C9  083A               	movf	??_set_offset+4,w
   801  02CA  1103               	clrz
   802  02CB  1803               	skipnc
   803  02CC  3E01               	addlw	1
   804  02CD  1D03               	btfss	3,2
   805  02CE  07C0               	addwf	set_offset@sum+1,f
   806  02CF  083B               	movf	??_set_offset+5,w
   807  02D0  1103               	clrz
   808  02D1  1803               	skipnc
   809  02D2  3E01               	addlw	1
   810  02D3  1D03               	btfss	3,2
   811  02D4  07C1               	addwf	set_offset@sum+2,f
   812  02D5  083C               	movf	??_set_offset+6,w
   813  02D6  1103               	clrz
   814  02D7  1803               	skipnc
   815  02D8  3E01               	addlw	1
   816  02D9  1D03               	btfss	3,2
   817  02DA  07C2               	addwf	set_offset@sum+3,f
   818  02DB  3001               	movlw	1
   819  02DC  07BD               	addwf	set_offset@i,f
   820  02DD  1803               	skipnc
   821  02DE  0ABE               	incf	set_offset@i+1,f
   822  02DF  3000               	movlw	0
   823  02E0  07BE               	addwf	set_offset@i+1,f
   824  02E1  083E               	movf	set_offset@i+1,w
   825  02E2  3A80               	xorlw	128
   826  02E3  00FF               	movwf	127
   827  02E4  3080               	movlw	128
   828  02E5  027F               	subwf	127,w
   829  02E6  1D03               	skipz
   830  02E7  2AEA               	goto	u1545
   831  02E8  3005               	movlw	5
   832  02E9  023D               	subwf	set_offset@i,w
   833  02EA                     u1545:	
   834  02EA  1C03               	skipc
   835  02EB  2AAF               	goto	l1354
   836  02EC                     l1362:	
   837                           
   838                           ;tarti.c: 208: }
   839                           ;tarti.c: 209: sum /= 5;
   840  02EC  3000               	movlw	0
   841  02ED  1283               	bcf	3,5	;RP0=0, select bank0
   842  02EE  1303               	bcf	3,6	;RP1=0, select bank0
   843  02EF  00A3               	movwf	___aldiv@divisor+3
   844  02F0  3000               	movlw	0
   845  02F1  00A2               	movwf	___aldiv@divisor+2
   846  02F2  3000               	movlw	0
   847  02F3  00A1               	movwf	___aldiv@divisor+1
   848  02F4  3005               	movlw	5
   849  02F5  00A0               	movwf	___aldiv@divisor
   850  02F6  0842               	movf	set_offset@sum+3,w
   851  02F7  00A7               	movwf	___aldiv@dividend+3
   852  02F8  0841               	movf	set_offset@sum+2,w
   853  02F9  00A6               	movwf	___aldiv@dividend+2
   854  02FA  0840               	movf	set_offset@sum+1,w
   855  02FB  00A5               	movwf	___aldiv@dividend+1
   856  02FC  083F               	movf	set_offset@sum,w
   857  02FD  00A4               	movwf	___aldiv@dividend
   858  02FE  217D               	fcall	___aldiv
   859  02FF  1283               	bcf	3,5	;RP0=0, select bank0
   860  0300  1303               	bcf	3,6	;RP1=0, select bank0
   861  0301  0823               	movf	?___aldiv+3,w
   862  0302  00C2               	movwf	set_offset@sum+3
   863  0303  0822               	movf	?___aldiv+2,w
   864  0304  00C1               	movwf	set_offset@sum+2
   865  0305  0821               	movf	?___aldiv+1,w
   866  0306  00C0               	movwf	set_offset@sum+1
   867  0307  0820               	movf	?___aldiv,w
   868  0308  00BF               	movwf	set_offset@sum
   869                           
   870                           ;tarti.c: 210: offset=sum;
   871  0309  083F               	movf	set_offset@sum,w
   872  030A  00D9               	movwf	_offset
   873  030B  0840               	movf	set_offset@sum+1,w
   874  030C  00DA               	movwf	_offset+1
   875  030D  0841               	movf	set_offset@sum+2,w
   876  030E  00DB               	movwf	_offset+2
   877                           
   878                           ;tarti.c: 211: write_dec(offset);
   879  030F  0859               	movf	_offset,w
   880  0310  00AF               	movwf	write_dec@value
   881  0311  085A               	movf	_offset+1,w
   882  0312  00B0               	movwf	write_dec@value+1
   883  0313  085B               	movf	_offset+2,w
   884  0314  00B1               	movwf	write_dec@value+2
   885  0315  00B6               	movwf	??_set_offset
   886  0316  0D36               	rlf	??_set_offset,w
   887  0317  00B6               	movwf	??_set_offset
   888  0318  1C03               	skipc
   889  0319  03B6               	decf	??_set_offset,f
   890  031A  02B6               	subwf	??_set_offset,f
   891  031B  0936               	comf	??_set_offset,w
   892  031C  00B2               	movwf	write_dec@value+3
   893  031D  2020               	fcall	_write_dec
   894  031E  0008               	return
   895  031F                     __end_of_set_offset:	
   896                           
   897                           	psect	text3
   898  049D                     __ptext3:	
   899 ;; *************** function _serial_init *****************
   900 ;; Defined at:
   901 ;;		line 121 in file "tarti.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;		None
   904 ;; Auto vars:     Size  Location     Type
   905 ;;		None
   906 ;; Return value:  Size  Location     Type
   907 ;;                  1    wreg      void 
   908 ;; Registers used:
   909 ;;		wreg
   910 ;; Tracked objects:
   911 ;;		On entry : 0/0
   912 ;;		On exit  : 0/0
   913 ;;		Unchanged: 0/0
   914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   915 ;;      Params:         0       0       0       0
   916 ;;      Locals:         0       0       0       0
   917 ;;      Temps:          0       0       0       0
   918 ;;      Totals:         0       0       0       0
   919 ;;Total ram usage:        0 bytes
   920 ;; Hardware stack levels used:    1
   921 ;; Hardware stack levels required when called:    1
   922 ;; This function calls:
   923 ;;		Nothing
   924 ;; This function is called by:
   925 ;;		_main
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929                           
   930                           ;psect for function _serial_init
   931  049D                     _serial_init:	
   932                           
   933                           ;tarti.c: 122: TXSTAbits.TX9=0;
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _serial_init: [wreg]
   937  049D  1683               	bsf	3,5	;RP0=1, select bank1
   938  049E  1303               	bcf	3,6	;RP1=0, select bank1
   939  049F  1318               	bcf	24,6	;volatile
   940                           
   941                           ;tarti.c: 123: TXSTAbits.TXEN=1;
   942  04A0  1698               	bsf	24,5	;volatile
   943                           
   944                           ;tarti.c: 124: TXSTAbits.SYNC=0;
   945  04A1  1218               	bcf	24,4	;volatile
   946                           
   947                           ;tarti.c: 125: TXSTAbits.BRGH=1;
   948  04A2  1518               	bsf	24,2	;volatile
   949                           
   950                           ;tarti.c: 127: RCSTAbits.SPEN=1;
   951  04A3  1283               	bcf	3,5	;RP0=0, select bank0
   952  04A4  1303               	bcf	3,6	;RP1=0, select bank0
   953  04A5  1798               	bsf	24,7	;volatile
   954                           
   955                           ;tarti.c: 128: RCSTAbits.RX9=0;
   956  04A6  1318               	bcf	24,6	;volatile
   957                           
   958                           ;tarti.c: 129: RCSTAbits.CREN=1;
   959  04A7  1618               	bsf	24,4	;volatile
   960                           
   961                           ;tarti.c: 131: TRISBbits.TRISB1=1;
   962  04A8  1683               	bsf	3,5	;RP0=1, select bank1
   963  04A9  1303               	bcf	3,6	;RP1=0, select bank1
   964  04AA  1486               	bsf	6,1	;volatile
   965                           
   966                           ;tarti.c: 132: TRISBbits.TRISB2=1;
   967  04AB  1506               	bsf	6,2	;volatile
   968                           
   969                           ;tarti.c: 134: PIE1bits.RCIE=1;
   970  04AC  168C               	bsf	12,5	;volatile
   971                           
   972                           ;tarti.c: 135: SPBRG=129;
   973  04AD  3081               	movlw	129
   974  04AE  0099               	movwf	25	;volatile
   975                           
   976                           ;tarti.c: 137: PIR1bits.RCIF=0;
   977  04AF  1283               	bcf	3,5	;RP0=0, select bank0
   978  04B0  1303               	bcf	3,6	;RP1=0, select bank0
   979  04B1  128C               	bcf	12,5	;volatile
   980  04B2  0008               	return
   981  04B3                     __end_of_serial_init:	
   982                           
   983                           	psect	text4
   984  020C                     __ptext4:	
   985 ;; *************** function _measure_force *****************
   986 ;; Defined at:
   987 ;;		line 214 in file "tarti.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;		None
   990 ;; Auto vars:     Size  Location     Type
   991 ;;  i               2   26[BANK0 ] int 
   992 ;;  sum             4   28[BANK0 ] long 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1002 ;;      Params:         0       0       0       0
  1003 ;;      Locals:         0       6       0       0
  1004 ;;      Temps:          0       4       0       0
  1005 ;;      Totals:         0      10       0       0
  1006 ;;Total ram usage:       10 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:    3
  1009 ;; This function calls:
  1010 ;;		___aldiv
  1011 ;;		_read_tarti
  1012 ;;		_write_dec
  1013 ;; This function is called by:
  1014 ;;		_main
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           
  1019                           ;psect for function _measure_force
  1020  020C                     _measure_force:	
  1021                           
  1022                           ;tarti.c: 215: int32_t sum=0;
  1023                           
  1024                           ;incstack = 0
  1025                           ; Regs used in _measure_force: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1026  020C  3000               	movlw	0
  1027  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1028  020E  1303               	bcf	3,6	;RP1=0, select bank0
  1029  020F  00BF               	movwf	measure_force@sum+3
  1030  0210  3000               	movlw	0
  1031  0211  00BE               	movwf	measure_force@sum+2
  1032  0212  3000               	movlw	0
  1033  0213  00BD               	movwf	measure_force@sum+1
  1034  0214  3000               	movlw	0
  1035  0215  00BC               	movwf	measure_force@sum
  1036                           
  1037                           ;tarti.c: 216: for(int i=0;i<5;i++){
  1038  0216  01BA               	clrf	measure_force@i
  1039  0217  01BB               	clrf	measure_force@i+1
  1040  0218  083B               	movf	measure_force@i+1,w
  1041  0219  3A80               	xorlw	128
  1042  021A  00FF               	movwf	127
  1043  021B  3080               	movlw	128
  1044  021C  027F               	subwf	127,w
  1045  021D  1D03               	skipz
  1046  021E  2A21               	goto	u1555
  1047  021F  3005               	movlw	5
  1048  0220  023A               	subwf	measure_force@i,w
  1049  0221                     u1555:	
  1050  0221  1803               	btfsc	3,0
  1051  0222  2A55               	goto	l1384
  1052  0223                     l1376:	
  1053                           
  1054                           ;tarti.c: 217: read_tarti();
  1055  0223  2398               	fcall	_read_tarti
  1056                           
  1057                           ;tarti.c: 219: sum += measure_val;
  1058  0224  1283               	bcf	3,5	;RP0=0, select bank0
  1059  0225  1303               	bcf	3,6	;RP1=0, select bank0
  1060  0226  085C               	movf	_measure_val,w
  1061  0227  00B6               	movwf	??_measure_force
  1062  0228  085D               	movf	_measure_val+1,w
  1063  0229  00B7               	movwf	??_measure_force+1
  1064  022A  085E               	movf	_measure_val+2,w
  1065  022B  00B8               	movwf	??_measure_force+2
  1066  022C  3000               	movlw	0
  1067  022D  1BB8               	btfsc	??_measure_force+2,7
  1068  022E  30FF               	movlw	255
  1069  022F  00B9               	movwf	??_measure_force+3
  1070  0230  0836               	movf	??_measure_force,w
  1071  0231  07BC               	addwf	measure_force@sum,f
  1072  0232  0837               	movf	??_measure_force+1,w
  1073  0233  1103               	clrz
  1074  0234  1803               	skipnc
  1075  0235  3E01               	addlw	1
  1076  0236  1D03               	btfss	3,2
  1077  0237  07BD               	addwf	measure_force@sum+1,f
  1078  0238  0838               	movf	??_measure_force+2,w
  1079  0239  1103               	clrz
  1080  023A  1803               	skipnc
  1081  023B  3E01               	addlw	1
  1082  023C  1D03               	btfss	3,2
  1083  023D  07BE               	addwf	measure_force@sum+2,f
  1084  023E  0839               	movf	??_measure_force+3,w
  1085  023F  1103               	clrz
  1086  0240  1803               	skipnc
  1087  0241  3E01               	addlw	1
  1088  0242  1D03               	btfss	3,2
  1089  0243  07BF               	addwf	measure_force@sum+3,f
  1090  0244  3001               	movlw	1
  1091  0245  07BA               	addwf	measure_force@i,f
  1092  0246  1803               	skipnc
  1093  0247  0ABB               	incf	measure_force@i+1,f
  1094  0248  3000               	movlw	0
  1095  0249  07BB               	addwf	measure_force@i+1,f
  1096  024A  083B               	movf	measure_force@i+1,w
  1097  024B  3A80               	xorlw	128
  1098  024C  00FF               	movwf	127
  1099  024D  3080               	movlw	128
  1100  024E  027F               	subwf	127,w
  1101  024F  1D03               	skipz
  1102  0250  2A53               	goto	u1575
  1103  0251  3005               	movlw	5
  1104  0252  023A               	subwf	measure_force@i,w
  1105  0253                     u1575:	
  1106  0253  1C03               	skipc
  1107  0254  2A23               	goto	l1376
  1108  0255                     l1384:	
  1109                           
  1110                           ;tarti.c: 220: }
  1111                           ;tarti.c: 221: sum /=5;
  1112  0255  3000               	movlw	0
  1113  0256  1283               	bcf	3,5	;RP0=0, select bank0
  1114  0257  1303               	bcf	3,6	;RP1=0, select bank0
  1115  0258  00A3               	movwf	___aldiv@divisor+3
  1116  0259  3000               	movlw	0
  1117  025A  00A2               	movwf	___aldiv@divisor+2
  1118  025B  3000               	movlw	0
  1119  025C  00A1               	movwf	___aldiv@divisor+1
  1120  025D  3005               	movlw	5
  1121  025E  00A0               	movwf	___aldiv@divisor
  1122  025F  083F               	movf	measure_force@sum+3,w
  1123  0260  00A7               	movwf	___aldiv@dividend+3
  1124  0261  083E               	movf	measure_force@sum+2,w
  1125  0262  00A6               	movwf	___aldiv@dividend+2
  1126  0263  083D               	movf	measure_force@sum+1,w
  1127  0264  00A5               	movwf	___aldiv@dividend+1
  1128  0265  083C               	movf	measure_force@sum,w
  1129  0266  00A4               	movwf	___aldiv@dividend
  1130  0267  217D               	fcall	___aldiv
  1131  0268  1283               	bcf	3,5	;RP0=0, select bank0
  1132  0269  1303               	bcf	3,6	;RP1=0, select bank0
  1133  026A  0823               	movf	?___aldiv+3,w
  1134  026B  00BF               	movwf	measure_force@sum+3
  1135  026C  0822               	movf	?___aldiv+2,w
  1136  026D  00BE               	movwf	measure_force@sum+2
  1137  026E  0821               	movf	?___aldiv+1,w
  1138  026F  00BD               	movwf	measure_force@sum+1
  1139  0270  0820               	movf	?___aldiv,w
  1140  0271  00BC               	movwf	measure_force@sum
  1141                           
  1142                           ;tarti.c: 222: force=sum + offset;
  1143  0272  0859               	movf	_offset,w
  1144  0273  073C               	addwf	measure_force@sum,w
  1145  0274  00B6               	movwf	??_measure_force
  1146  0275  083D               	movf	measure_force@sum+1,w
  1147  0276  00B7               	movwf	??_measure_force+1
  1148  0277  085A               	movf	_offset+1,w
  1149  0278  1803               	skipnc
  1150  0279  0A5A               	incf	_offset+1,w
  1151  027A  1D03               	btfss	3,2
  1152  027B  07B7               	addwf	??_measure_force+1,f
  1153  027C  083E               	movf	measure_force@sum+2,w
  1154  027D  00B8               	movwf	??_measure_force+2
  1155  027E  085B               	movf	_offset+2,w
  1156  027F  1803               	skipnc
  1157  0280  0A5B               	incf	_offset+2,w
  1158  0281  07B8               	addwf	??_measure_force+2,f
  1159  0282  0836               	movf	??_measure_force,w
  1160  0283  00D6               	movwf	_force
  1161  0284  0837               	movf	??_measure_force+1,w
  1162  0285  00D7               	movwf	_force+1
  1163  0286  0838               	movf	??_measure_force+2,w
  1164  0287  00D8               	movwf	_force+2
  1165                           
  1166                           ;tarti.c: 223: write_dec(force);
  1167  0288  0856               	movf	_force,w
  1168  0289  00AF               	movwf	write_dec@value
  1169  028A  0857               	movf	_force+1,w
  1170  028B  00B0               	movwf	write_dec@value+1
  1171  028C  0858               	movf	_force+2,w
  1172  028D  00B1               	movwf	write_dec@value+2
  1173  028E  00B6               	movwf	??_measure_force
  1174  028F  0D36               	rlf	??_measure_force,w
  1175  0290  00B6               	movwf	??_measure_force
  1176  0291  1C03               	skipc
  1177  0292  03B6               	decf	??_measure_force,f
  1178  0293  02B6               	subwf	??_measure_force,f
  1179  0294  0936               	comf	??_measure_force,w
  1180  0295  00B2               	movwf	write_dec@value+3
  1181  0296  2020               	fcall	_write_dec
  1182  0297  0008               	return
  1183  0298                     __end_of_measure_force:	
  1184                           
  1185                           	psect	text5
  1186  0020                     __ptext5:	
  1187 ;; *************** function _write_dec *****************
  1188 ;; Defined at:
  1189 ;;		line 255 in file "tarti.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;  value           4   15[BANK0 ] long 
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;  i               2   20[BANK0 ] int 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1203 ;;      Params:         0       4       0       0
  1204 ;;      Locals:         0       2       0       0
  1205 ;;      Temps:          0       1       0       0
  1206 ;;      Totals:         0       7       0       0
  1207 ;;Total ram usage:        7 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    2
  1210 ;; This function calls:
  1211 ;;		___aldiv
  1212 ;;		___almod
  1213 ;;		___lmul
  1214 ;; This function is called by:
  1215 ;;		_set_offset
  1216 ;;		_measure_force
  1217 ;;		_bin_to_dec
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           
  1222                           ;psect for function _write_dec
  1223  0020                     _write_dec:	
  1224                           
  1225                           ;tarti.c: 256: int i=0;
  1226                           
  1227                           ;incstack = 0
  1228                           ; Regs used in _write_dec: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1229  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1230  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1231  0022  01B4               	clrf	write_dec@i
  1232  0023  01B5               	clrf	write_dec@i+1
  1233                           
  1234                           ;tarti.c: 257: value *=22;
  1235  0024  3000               	movlw	0
  1236  0025  00A3               	movwf	___lmul@multiplier+3
  1237  0026  3000               	movlw	0
  1238  0027  00A2               	movwf	___lmul@multiplier+2
  1239  0028  3000               	movlw	0
  1240  0029  00A1               	movwf	___lmul@multiplier+1
  1241  002A  3016               	movlw	22
  1242  002B  00A0               	movwf	___lmul@multiplier
  1243  002C  0832               	movf	write_dec@value+3,w
  1244  002D  00A7               	movwf	___lmul@multiplicand+3
  1245  002E  0831               	movf	write_dec@value+2,w
  1246  002F  00A6               	movwf	___lmul@multiplicand+2
  1247  0030  0830               	movf	write_dec@value+1,w
  1248  0031  00A5               	movwf	___lmul@multiplicand+1
  1249  0032  082F               	movf	write_dec@value,w
  1250  0033  00A4               	movwf	___lmul@multiplicand
  1251  0034  245C               	fcall	___lmul
  1252  0035  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0036  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0037  0823               	movf	?___lmul+3,w
  1255  0038  00B2               	movwf	write_dec@value+3
  1256  0039  0822               	movf	?___lmul+2,w
  1257  003A  00B1               	movwf	write_dec@value+2
  1258  003B  0821               	movf	?___lmul+1,w
  1259  003C  00B0               	movwf	write_dec@value+1
  1260  003D  0820               	movf	?___lmul,w
  1261  003E  00AF               	movwf	write_dec@value
  1262                           
  1263                           ;tarti.c: 258: value /=10000;
  1264  003F  3000               	movlw	0
  1265  0040  00A3               	movwf	___aldiv@divisor+3
  1266  0041  3000               	movlw	0
  1267  0042  00A2               	movwf	___aldiv@divisor+2
  1268  0043  3027               	movlw	39
  1269  0044  00A1               	movwf	___aldiv@divisor+1
  1270  0045  3010               	movlw	16
  1271  0046  00A0               	movwf	___aldiv@divisor
  1272  0047  0832               	movf	write_dec@value+3,w
  1273  0048  00A7               	movwf	___aldiv@dividend+3
  1274  0049  0831               	movf	write_dec@value+2,w
  1275  004A  00A6               	movwf	___aldiv@dividend+2
  1276  004B  0830               	movf	write_dec@value+1,w
  1277  004C  00A5               	movwf	___aldiv@dividend+1
  1278  004D  082F               	movf	write_dec@value,w
  1279  004E  00A4               	movwf	___aldiv@dividend
  1280  004F  217D               	fcall	___aldiv
  1281  0050  1283               	bcf	3,5	;RP0=0, select bank0
  1282  0051  1303               	bcf	3,6	;RP1=0, select bank0
  1283  0052  0823               	movf	?___aldiv+3,w
  1284  0053  00B2               	movwf	write_dec@value+3
  1285  0054  0822               	movf	?___aldiv+2,w
  1286  0055  00B1               	movwf	write_dec@value+2
  1287  0056  0821               	movf	?___aldiv+1,w
  1288  0057  00B0               	movwf	write_dec@value+1
  1289  0058  0820               	movf	?___aldiv,w
  1290  0059  00AF               	movwf	write_dec@value
  1291                           
  1292                           ;tarti.c: 259: if(value < 0)
  1293  005A  1FB2               	btfss	write_dec@value+3,7
  1294  005B  286C               	goto	l1322
  1295                           
  1296                           ;tarti.c: 260: {
  1297                           ;tarti.c: 261: dec_array[0] = '-';
  1298  005C  302D               	movlw	45
  1299  005D  00B3               	movwf	??_write_dec
  1300  005E  0833               	movf	??_write_dec,w
  1301  005F  00CA               	movwf	_dec_array
  1302                           
  1303                           ;tarti.c: 262: value = -value;
  1304  0060  09AF               	comf	write_dec@value,f
  1305  0061  09B0               	comf	write_dec@value+1,f
  1306  0062  09B1               	comf	write_dec@value+2,f
  1307  0063  09B2               	comf	write_dec@value+3,f
  1308  0064  0AAF               	incf	write_dec@value,f
  1309  0065  1903               	skipnz
  1310  0066  0AB0               	incf	write_dec@value+1,f
  1311  0067  1903               	skipnz
  1312  0068  0AB1               	incf	write_dec@value+2,f
  1313  0069  1903               	skipnz
  1314  006A  0AB2               	incf	write_dec@value+3,f
  1315                           
  1316                           ;tarti.c: 263: }
  1317  006B  2870               	goto	l1324
  1318  006C                     l1322:	
  1319                           
  1320                           ;tarti.c: 264: else
  1321                           ;tarti.c: 265: dec_array[0] = '+';
  1322  006C  302B               	movlw	43
  1323  006D  00B3               	movwf	??_write_dec
  1324  006E  0833               	movf	??_write_dec,w
  1325  006F  00CA               	movwf	_dec_array
  1326  0070                     l1324:	
  1327                           
  1328                           ;tarti.c: 267: dec_array[12 - 1] = (0);
  1329  0070  01D5               	clrf	_dec_array+11
  1330                           
  1331                           ;tarti.c: 268: i=12 - 2;
  1332  0071  300A               	movlw	10
  1333  0072  00B4               	movwf	write_dec@i
  1334  0073  3000               	movlw	0
  1335  0074  00B5               	movwf	write_dec@i+1
  1336  0075                     l1334:	
  1337                           ;tarti.c: 270: while(value){
  1338                           
  1339  0075  0832               	movf	write_dec@value+3,w
  1340  0076  0431               	iorwf	write_dec@value+2,w
  1341  0077  0430               	iorwf	write_dec@value+1,w
  1342  0078  042F               	iorwf	write_dec@value,w
  1343  0079  1903               	btfsc	3,2
  1344  007A  28B9               	goto	l1336
  1345                           
  1346                           ;tarti.c: 271: dec_array[i--]= value%10 + '0';
  1347  007B  3000               	movlw	0
  1348  007C  00A3               	movwf	___almod@divisor+3
  1349  007D  3000               	movlw	0
  1350  007E  00A2               	movwf	___almod@divisor+2
  1351  007F  3000               	movlw	0
  1352  0080  00A1               	movwf	___almod@divisor+1
  1353  0081  300A               	movlw	10
  1354  0082  00A0               	movwf	___almod@divisor
  1355  0083  0832               	movf	write_dec@value+3,w
  1356  0084  00A7               	movwf	___almod@dividend+3
  1357  0085  0831               	movf	write_dec@value+2,w
  1358  0086  00A6               	movwf	___almod@dividend+2
  1359  0087  0830               	movf	write_dec@value+1,w
  1360  0088  00A5               	movwf	___almod@dividend+1
  1361  0089  082F               	movf	write_dec@value,w
  1362  008A  00A4               	movwf	___almod@dividend
  1363  008B  231F               	fcall	___almod
  1364  008C  1283               	bcf	3,5	;RP0=0, select bank0
  1365  008D  1303               	bcf	3,6	;RP1=0, select bank0
  1366  008E  0820               	movf	?___almod,w
  1367  008F  3E30               	addlw	48
  1368  0090  00B3               	movwf	??_write_dec
  1369  0091  0834               	movf	write_dec@i,w
  1370  0092  3E4A               	addlw	(low (_dec_array| 0))& (0+255)
  1371  0093  0084               	movwf	4
  1372  0094  0833               	movf	??_write_dec,w
  1373  0095  1383               	bcf	3,7	;select IRP bank0
  1374  0096  0080               	movwf	0
  1375  0097  30FF               	movlw	255
  1376  0098  07B4               	addwf	write_dec@i,f
  1377  0099  1803               	skipnc
  1378  009A  0AB5               	incf	write_dec@i+1,f
  1379  009B  30FF               	movlw	255
  1380  009C  07B5               	addwf	write_dec@i+1,f
  1381                           
  1382                           ;tarti.c: 272: value /= 10;
  1383  009D  3000               	movlw	0
  1384  009E  00A3               	movwf	___aldiv@divisor+3
  1385  009F  3000               	movlw	0
  1386  00A0  00A2               	movwf	___aldiv@divisor+2
  1387  00A1  3000               	movlw	0
  1388  00A2  00A1               	movwf	___aldiv@divisor+1
  1389  00A3  300A               	movlw	10
  1390  00A4  00A0               	movwf	___aldiv@divisor
  1391  00A5  0832               	movf	write_dec@value+3,w
  1392  00A6  00A7               	movwf	___aldiv@dividend+3
  1393  00A7  0831               	movf	write_dec@value+2,w
  1394  00A8  00A6               	movwf	___aldiv@dividend+2
  1395  00A9  0830               	movf	write_dec@value+1,w
  1396  00AA  00A5               	movwf	___aldiv@dividend+1
  1397  00AB  082F               	movf	write_dec@value,w
  1398  00AC  00A4               	movwf	___aldiv@dividend
  1399  00AD  217D               	fcall	___aldiv
  1400  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1401  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  1402  00B0  0823               	movf	?___aldiv+3,w
  1403  00B1  00B2               	movwf	write_dec@value+3
  1404  00B2  0822               	movf	?___aldiv+2,w
  1405  00B3  00B1               	movwf	write_dec@value+2
  1406  00B4  0821               	movf	?___aldiv+1,w
  1407  00B5  00B0               	movwf	write_dec@value+1
  1408  00B6  0820               	movf	?___aldiv,w
  1409  00B7  00AF               	movwf	write_dec@value
  1410  00B8  2875               	goto	l1334
  1411  00B9                     l1336:	
  1412                           
  1413                           ;tarti.c: 273: }
  1414                           ;tarti.c: 275: for(;i>0;i--)
  1415  00B9  0835               	movf	write_dec@i+1,w
  1416  00BA  3A80               	xorlw	128
  1417  00BB  00FF               	movwf	127
  1418  00BC  3080               	movlw	128
  1419  00BD  027F               	subwf	127,w
  1420  00BE  1D03               	skipz
  1421  00BF  28C2               	goto	u1505
  1422  00C0  3001               	movlw	1
  1423  00C1  0234               	subwf	write_dec@i,w
  1424  00C2                     u1505:	
  1425  00C2  1C03               	btfss	3,0
  1426  00C3  0008               	return
  1427                           
  1428                           ;tarti.c: 276: dec_array[i] = '0';
  1429  00C4  3030               	movlw	48
  1430  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1431  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  1432  00C7  00B3               	movwf	??_write_dec
  1433  00C8  0834               	movf	write_dec@i,w
  1434  00C9  3E4A               	addlw	(low (_dec_array| 0))& (0+255)
  1435  00CA  0084               	movwf	4
  1436  00CB  0833               	movf	??_write_dec,w
  1437  00CC  1383               	bcf	3,7	;select IRP bank0
  1438  00CD  0080               	movwf	0
  1439  00CE  30FF               	movlw	255
  1440  00CF  07B4               	addwf	write_dec@i,f
  1441  00D0  1803               	skipnc
  1442  00D1  0AB5               	incf	write_dec@i+1,f
  1443  00D2  30FF               	movlw	255
  1444  00D3  07B5               	addwf	write_dec@i+1,f
  1445  00D4  28B9               	goto	l1336
  1446  00D5                     __end_of_write_dec:	
  1447                           
  1448                           	psect	text6
  1449  045C                     __ptext6:	
  1450 ;; *************** function ___lmul *****************
  1451 ;; Defined at:
  1452 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1455 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  product         4    9[BANK0 ] unsigned long 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  4    0[BANK0 ] unsigned long 
  1460 ;; Registers used:
  1461 ;;		wreg, status,2, status,0
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1467 ;;      Params:         0       8       0       0
  1468 ;;      Locals:         0       4       0       0
  1469 ;;      Temps:          0       1       0       0
  1470 ;;      Totals:         0      13       0       0
  1471 ;;Total ram usage:       13 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    1
  1474 ;; This function calls:
  1475 ;;		Nothing
  1476 ;; This function is called by:
  1477 ;;		_write_dec
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           
  1482                           ;psect for function ___lmul
  1483  045C                     ___lmul:	
  1484                           
  1485                           ;incstack = 0
  1486                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1487  045C  3000               	movlw	0
  1488  045D  1283               	bcf	3,5	;RP0=0, select bank0
  1489  045E  1303               	bcf	3,6	;RP1=0, select bank0
  1490  045F  00AC               	movwf	___lmul@product+3
  1491  0460  3000               	movlw	0
  1492  0461  00AB               	movwf	___lmul@product+2
  1493  0462  3000               	movlw	0
  1494  0463  00AA               	movwf	___lmul@product+1
  1495  0464  3000               	movlw	0
  1496  0465  00A9               	movwf	___lmul@product
  1497  0466                     l1194:	
  1498  0466  1C20               	btfss	___lmul@multiplier,0
  1499  0467  2C7C               	goto	l1198
  1500  0468  0824               	movf	___lmul@multiplicand,w
  1501  0469  07A9               	addwf	___lmul@product,f
  1502  046A  0825               	movf	___lmul@multiplicand+1,w
  1503  046B  1103               	clrz
  1504  046C  1803               	skipnc
  1505  046D  3E01               	addlw	1
  1506  046E  1D03               	btfss	3,2
  1507  046F  07AA               	addwf	___lmul@product+1,f
  1508  0470  0826               	movf	___lmul@multiplicand+2,w
  1509  0471  1103               	clrz
  1510  0472  1803               	skipnc
  1511  0473  3E01               	addlw	1
  1512  0474  1D03               	btfss	3,2
  1513  0475  07AB               	addwf	___lmul@product+2,f
  1514  0476  0827               	movf	___lmul@multiplicand+3,w
  1515  0477  1103               	clrz
  1516  0478  1803               	skipnc
  1517  0479  3E01               	addlw	1
  1518  047A  1D03               	btfss	3,2
  1519  047B  07AC               	addwf	___lmul@product+3,f
  1520  047C                     l1198:	
  1521  047C  3001               	movlw	1
  1522  047D  00A8               	movwf	??___lmul
  1523  047E                     u1195:	
  1524  047E  1003               	clrc
  1525  047F  0DA4               	rlf	___lmul@multiplicand,f
  1526  0480  0DA5               	rlf	___lmul@multiplicand+1,f
  1527  0481  0DA6               	rlf	___lmul@multiplicand+2,f
  1528  0482  0DA7               	rlf	___lmul@multiplicand+3,f
  1529  0483  0BA8               	decfsz	??___lmul,f
  1530  0484  2C7E               	goto	u1195
  1531  0485  3001               	movlw	1
  1532  0486                     u1205:	
  1533  0486  1003               	clrc
  1534  0487  0CA3               	rrf	___lmul@multiplier+3,f
  1535  0488  0CA2               	rrf	___lmul@multiplier+2,f
  1536  0489  0CA1               	rrf	___lmul@multiplier+1,f
  1537  048A  0CA0               	rrf	___lmul@multiplier,f
  1538  048B  3EFF               	addlw	-1
  1539  048C  1D03               	skipz
  1540  048D  2C86               	goto	u1205
  1541  048E  0823               	movf	___lmul@multiplier+3,w
  1542  048F  0422               	iorwf	___lmul@multiplier+2,w
  1543  0490  0421               	iorwf	___lmul@multiplier+1,w
  1544  0491  0420               	iorwf	___lmul@multiplier,w
  1545  0492  1D03               	skipz
  1546  0493  2C66               	goto	l1194
  1547  0494  082C               	movf	___lmul@product+3,w
  1548  0495  00A3               	movwf	?___lmul+3
  1549  0496  082B               	movf	___lmul@product+2,w
  1550  0497  00A2               	movwf	?___lmul+2
  1551  0498  082A               	movf	___lmul@product+1,w
  1552  0499  00A1               	movwf	?___lmul+1
  1553  049A  0829               	movf	___lmul@product,w
  1554  049B  00A0               	movwf	?___lmul
  1555  049C  0008               	return
  1556  049D                     __end_of___lmul:	
  1557                           
  1558                           	psect	text7
  1559  031F                     __ptext7:	
  1560 ;; *************** function ___almod *****************
  1561 ;; Defined at:
  1562 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  divisor         4    0[BANK0 ] long 
  1565 ;;  dividend        4    4[BANK0 ] long 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  sign            1   10[BANK0 ] unsigned char 
  1568 ;;  counter         1    9[BANK0 ] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  4    0[BANK0 ] long 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1578 ;;      Params:         0       8       0       0
  1579 ;;      Locals:         0       2       0       0
  1580 ;;      Temps:          0       1       0       0
  1581 ;;      Totals:         0      11       0       0
  1582 ;;Total ram usage:       11 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    1
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_write_dec
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           
  1593                           ;psect for function ___almod
  1594  031F                     ___almod:	
  1595                           
  1596                           ;incstack = 0
  1597                           ; Regs used in ___almod: [wreg+status,2+status,0]
  1598  031F  1283               	bcf	3,5	;RP0=0, select bank0
  1599  0320  1303               	bcf	3,6	;RP1=0, select bank0
  1600  0321  01AA               	clrf	___almod@sign
  1601  0322  1FA7               	btfss	___almod@dividend+3,7
  1602  0323  2B31               	goto	l300
  1603  0324  09A4               	comf	___almod@dividend,f
  1604  0325  09A5               	comf	___almod@dividend+1,f
  1605  0326  09A6               	comf	___almod@dividend+2,f
  1606  0327  09A7               	comf	___almod@dividend+3,f
  1607  0328  0AA4               	incf	___almod@dividend,f
  1608  0329  1903               	skipnz
  1609  032A  0AA5               	incf	___almod@dividend+1,f
  1610  032B  1903               	skipnz
  1611  032C  0AA6               	incf	___almod@dividend+2,f
  1612  032D  1903               	skipnz
  1613  032E  0AA7               	incf	___almod@dividend+3,f
  1614  032F  01AA               	clrf	___almod@sign
  1615  0330  0AAA               	incf	___almod@sign,f
  1616  0331                     l300:	
  1617  0331  1FA3               	btfss	___almod@divisor+3,7
  1618  0332  2B3E               	goto	l1254
  1619  0333  09A0               	comf	___almod@divisor,f
  1620  0334  09A1               	comf	___almod@divisor+1,f
  1621  0335  09A2               	comf	___almod@divisor+2,f
  1622  0336  09A3               	comf	___almod@divisor+3,f
  1623  0337  0AA0               	incf	___almod@divisor,f
  1624  0338  1903               	skipnz
  1625  0339  0AA1               	incf	___almod@divisor+1,f
  1626  033A  1903               	skipnz
  1627  033B  0AA2               	incf	___almod@divisor+2,f
  1628  033C  1903               	skipnz
  1629  033D  0AA3               	incf	___almod@divisor+3,f
  1630  033E                     l1254:	
  1631  033E  0823               	movf	___almod@divisor+3,w
  1632  033F  0422               	iorwf	___almod@divisor+2,w
  1633  0340  0421               	iorwf	___almod@divisor+1,w
  1634  0341  0420               	iorwf	___almod@divisor,w
  1635  0342  1903               	skipnz
  1636  0343  2B81               	goto	l1270
  1637  0344  01A9               	clrf	___almod@counter
  1638  0345  0AA9               	incf	___almod@counter,f
  1639  0346                     l1260:	
  1640  0346  1BA3               	btfsc	___almod@divisor+3,7
  1641  0347  2B56               	goto	l1262
  1642  0348  3001               	movlw	1
  1643  0349  00A8               	movwf	??___almod
  1644  034A                     u1355:	
  1645  034A  1003               	clrc
  1646  034B  0DA0               	rlf	___almod@divisor,f
  1647  034C  0DA1               	rlf	___almod@divisor+1,f
  1648  034D  0DA2               	rlf	___almod@divisor+2,f
  1649  034E  0DA3               	rlf	___almod@divisor+3,f
  1650  034F  0BA8               	decfsz	??___almod,f
  1651  0350  2B4A               	goto	u1355
  1652  0351  3001               	movlw	1
  1653  0352  00A8               	movwf	??___almod
  1654  0353  0828               	movf	??___almod,w
  1655  0354  07A9               	addwf	___almod@counter,f
  1656  0355  2B46               	goto	l1260
  1657  0356                     l1262:	
  1658  0356  0823               	movf	___almod@divisor+3,w
  1659  0357  0227               	subwf	___almod@dividend+3,w
  1660  0358  1D03               	skipz
  1661  0359  2B64               	goto	u1375
  1662  035A  0822               	movf	___almod@divisor+2,w
  1663  035B  0226               	subwf	___almod@dividend+2,w
  1664  035C  1D03               	skipz
  1665  035D  2B64               	goto	u1375
  1666  035E  0821               	movf	___almod@divisor+1,w
  1667  035F  0225               	subwf	___almod@dividend+1,w
  1668  0360  1D03               	skipz
  1669  0361  2B64               	goto	u1375
  1670  0362  0820               	movf	___almod@divisor,w
  1671  0363  0224               	subwf	___almod@dividend,w
  1672  0364                     u1375:	
  1673  0364  1C03               	skipc
  1674  0365  2B74               	goto	l1266
  1675  0366  0820               	movf	___almod@divisor,w
  1676  0367  02A4               	subwf	___almod@dividend,f
  1677  0368  0821               	movf	___almod@divisor+1,w
  1678  0369  1C03               	skipc
  1679  036A  0F21               	incfsz	___almod@divisor+1,w
  1680  036B  02A5               	subwf	___almod@dividend+1,f
  1681  036C  0822               	movf	___almod@divisor+2,w
  1682  036D  1C03               	skipc
  1683  036E  0F22               	incfsz	___almod@divisor+2,w
  1684  036F  02A6               	subwf	___almod@dividend+2,f
  1685  0370  0823               	movf	___almod@divisor+3,w
  1686  0371  1C03               	skipc
  1687  0372  0F23               	incfsz	___almod@divisor+3,w
  1688  0373  02A7               	subwf	___almod@dividend+3,f
  1689  0374                     l1266:	
  1690  0374  3001               	movlw	1
  1691  0375                     u1385:	
  1692  0375  1003               	clrc
  1693  0376  0CA3               	rrf	___almod@divisor+3,f
  1694  0377  0CA2               	rrf	___almod@divisor+2,f
  1695  0378  0CA1               	rrf	___almod@divisor+1,f
  1696  0379  0CA0               	rrf	___almod@divisor,f
  1697  037A  3EFF               	addlw	-1
  1698  037B  1D03               	skipz
  1699  037C  2B75               	goto	u1385
  1700  037D  3001               	movlw	1
  1701  037E  02A9               	subwf	___almod@counter,f
  1702  037F  1D03               	btfss	3,2
  1703  0380  2B56               	goto	l1262
  1704  0381                     l1270:	
  1705  0381  082A               	movf	___almod@sign,w
  1706  0382  1903               	btfsc	3,2
  1707  0383  2B8F               	goto	l1274
  1708  0384  09A4               	comf	___almod@dividend,f
  1709  0385  09A5               	comf	___almod@dividend+1,f
  1710  0386  09A6               	comf	___almod@dividend+2,f
  1711  0387  09A7               	comf	___almod@dividend+3,f
  1712  0388  0AA4               	incf	___almod@dividend,f
  1713  0389  1903               	skipnz
  1714  038A  0AA5               	incf	___almod@dividend+1,f
  1715  038B  1903               	skipnz
  1716  038C  0AA6               	incf	___almod@dividend+2,f
  1717  038D  1903               	skipnz
  1718  038E  0AA7               	incf	___almod@dividend+3,f
  1719  038F                     l1274:	
  1720  038F  0827               	movf	___almod@dividend+3,w
  1721  0390  00A3               	movwf	?___almod+3
  1722  0391  0826               	movf	___almod@dividend+2,w
  1723  0392  00A2               	movwf	?___almod+2
  1724  0393  0825               	movf	___almod@dividend+1,w
  1725  0394  00A1               	movwf	?___almod+1
  1726  0395  0824               	movf	___almod@dividend,w
  1727  0396  00A0               	movwf	?___almod
  1728  0397  0008               	return
  1729  0398                     __end_of___almod:	
  1730                           
  1731                           	psect	text8
  1732  017D                     __ptext8:	
  1733 ;; *************** function ___aldiv *****************
  1734 ;; Defined at:
  1735 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  divisor         4    0[BANK0 ] long 
  1738 ;;  dividend        4    4[BANK0 ] long 
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  quotient        4   11[BANK0 ] long 
  1741 ;;  sign            1   10[BANK0 ] unsigned char 
  1742 ;;  counter         1    9[BANK0 ] unsigned char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  4    0[BANK0 ] long 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1752 ;;      Params:         0       8       0       0
  1753 ;;      Locals:         0       6       0       0
  1754 ;;      Temps:          0       1       0       0
  1755 ;;      Totals:         0      15       0       0
  1756 ;;Total ram usage:       15 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    1
  1759 ;; This function calls:
  1760 ;;		Nothing
  1761 ;; This function is called by:
  1762 ;;		_set_offset
  1763 ;;		_measure_force
  1764 ;;		_write_dec
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           
  1769                           ;psect for function ___aldiv
  1770  017D                     ___aldiv:	
  1771                           
  1772                           ;incstack = 0
  1773                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1774  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1775  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1776  017F  01AA               	clrf	___aldiv@sign
  1777  0180  1FA3               	btfss	___aldiv@divisor+3,7
  1778  0181  298F               	goto	l287
  1779  0182  09A0               	comf	___aldiv@divisor,f
  1780  0183  09A1               	comf	___aldiv@divisor+1,f
  1781  0184  09A2               	comf	___aldiv@divisor+2,f
  1782  0185  09A3               	comf	___aldiv@divisor+3,f
  1783  0186  0AA0               	incf	___aldiv@divisor,f
  1784  0187  1903               	skipnz
  1785  0188  0AA1               	incf	___aldiv@divisor+1,f
  1786  0189  1903               	skipnz
  1787  018A  0AA2               	incf	___aldiv@divisor+2,f
  1788  018B  1903               	skipnz
  1789  018C  0AA3               	incf	___aldiv@divisor+3,f
  1790  018D  01AA               	clrf	___aldiv@sign
  1791  018E  0AAA               	incf	___aldiv@sign,f
  1792  018F                     l287:	
  1793  018F  1FA7               	btfss	___aldiv@dividend+3,7
  1794  0190  29A0               	goto	l1216
  1795  0191  09A4               	comf	___aldiv@dividend,f
  1796  0192  09A5               	comf	___aldiv@dividend+1,f
  1797  0193  09A6               	comf	___aldiv@dividend+2,f
  1798  0194  09A7               	comf	___aldiv@dividend+3,f
  1799  0195  0AA4               	incf	___aldiv@dividend,f
  1800  0196  1903               	skipnz
  1801  0197  0AA5               	incf	___aldiv@dividend+1,f
  1802  0198  1903               	skipnz
  1803  0199  0AA6               	incf	___aldiv@dividend+2,f
  1804  019A  1903               	skipnz
  1805  019B  0AA7               	incf	___aldiv@dividend+3,f
  1806  019C  3001               	movlw	1
  1807  019D  00A8               	movwf	??___aldiv
  1808  019E  0828               	movf	??___aldiv,w
  1809  019F  06AA               	xorwf	___aldiv@sign,f
  1810  01A0                     l1216:	
  1811  01A0  3000               	movlw	0
  1812  01A1  00AE               	movwf	___aldiv@quotient+3
  1813  01A2  3000               	movlw	0
  1814  01A3  00AD               	movwf	___aldiv@quotient+2
  1815  01A4  3000               	movlw	0
  1816  01A5  00AC               	movwf	___aldiv@quotient+1
  1817  01A6  3000               	movlw	0
  1818  01A7  00AB               	movwf	___aldiv@quotient
  1819  01A8  0823               	movf	___aldiv@divisor+3,w
  1820  01A9  0422               	iorwf	___aldiv@divisor+2,w
  1821  01AA  0421               	iorwf	___aldiv@divisor+1,w
  1822  01AB  0420               	iorwf	___aldiv@divisor,w
  1823  01AC  1903               	skipnz
  1824  01AD  29F5               	goto	l1238
  1825  01AE  01A9               	clrf	___aldiv@counter
  1826  01AF  0AA9               	incf	___aldiv@counter,f
  1827  01B0                     l1224:	
  1828  01B0  1BA3               	btfsc	___aldiv@divisor+3,7
  1829  01B1  29C0               	goto	l1226
  1830  01B2  3001               	movlw	1
  1831  01B3  00A8               	movwf	??___aldiv
  1832  01B4                     u1255:	
  1833  01B4  1003               	clrc
  1834  01B5  0DA0               	rlf	___aldiv@divisor,f
  1835  01B6  0DA1               	rlf	___aldiv@divisor+1,f
  1836  01B7  0DA2               	rlf	___aldiv@divisor+2,f
  1837  01B8  0DA3               	rlf	___aldiv@divisor+3,f
  1838  01B9  0BA8               	decfsz	??___aldiv,f
  1839  01BA  29B4               	goto	u1255
  1840  01BB  3001               	movlw	1
  1841  01BC  00A8               	movwf	??___aldiv
  1842  01BD  0828               	movf	??___aldiv,w
  1843  01BE  07A9               	addwf	___aldiv@counter,f
  1844  01BF  29B0               	goto	l1224
  1845  01C0                     l1226:	
  1846  01C0  3001               	movlw	1
  1847  01C1  00A8               	movwf	??___aldiv
  1848  01C2                     u1275:	
  1849  01C2  1003               	clrc
  1850  01C3  0DAB               	rlf	___aldiv@quotient,f
  1851  01C4  0DAC               	rlf	___aldiv@quotient+1,f
  1852  01C5  0DAD               	rlf	___aldiv@quotient+2,f
  1853  01C6  0DAE               	rlf	___aldiv@quotient+3,f
  1854  01C7  0BA8               	decfsz	??___aldiv,f
  1855  01C8  29C2               	goto	u1275
  1856  01C9  0823               	movf	___aldiv@divisor+3,w
  1857  01CA  0227               	subwf	___aldiv@dividend+3,w
  1858  01CB  1D03               	skipz
  1859  01CC  29D7               	goto	u1285
  1860  01CD  0822               	movf	___aldiv@divisor+2,w
  1861  01CE  0226               	subwf	___aldiv@dividend+2,w
  1862  01CF  1D03               	skipz
  1863  01D0  29D7               	goto	u1285
  1864  01D1  0821               	movf	___aldiv@divisor+1,w
  1865  01D2  0225               	subwf	___aldiv@dividend+1,w
  1866  01D3  1D03               	skipz
  1867  01D4  29D7               	goto	u1285
  1868  01D5  0820               	movf	___aldiv@divisor,w
  1869  01D6  0224               	subwf	___aldiv@dividend,w
  1870  01D7                     u1285:	
  1871  01D7  1C03               	skipc
  1872  01D8  29E8               	goto	l1234
  1873  01D9  0820               	movf	___aldiv@divisor,w
  1874  01DA  02A4               	subwf	___aldiv@dividend,f
  1875  01DB  0821               	movf	___aldiv@divisor+1,w
  1876  01DC  1C03               	skipc
  1877  01DD  0F21               	incfsz	___aldiv@divisor+1,w
  1878  01DE  02A5               	subwf	___aldiv@dividend+1,f
  1879  01DF  0822               	movf	___aldiv@divisor+2,w
  1880  01E0  1C03               	skipc
  1881  01E1  0F22               	incfsz	___aldiv@divisor+2,w
  1882  01E2  02A6               	subwf	___aldiv@dividend+2,f
  1883  01E3  0823               	movf	___aldiv@divisor+3,w
  1884  01E4  1C03               	skipc
  1885  01E5  0F23               	incfsz	___aldiv@divisor+3,w
  1886  01E6  02A7               	subwf	___aldiv@dividend+3,f
  1887  01E7  142B               	bsf	___aldiv@quotient,0
  1888  01E8                     l1234:	
  1889  01E8  3001               	movlw	1
  1890  01E9                     u1295:	
  1891  01E9  1003               	clrc
  1892  01EA  0CA3               	rrf	___aldiv@divisor+3,f
  1893  01EB  0CA2               	rrf	___aldiv@divisor+2,f
  1894  01EC  0CA1               	rrf	___aldiv@divisor+1,f
  1895  01ED  0CA0               	rrf	___aldiv@divisor,f
  1896  01EE  3EFF               	addlw	-1
  1897  01EF  1D03               	skipz
  1898  01F0  29E9               	goto	u1295
  1899  01F1  3001               	movlw	1
  1900  01F2  02A9               	subwf	___aldiv@counter,f
  1901  01F3  1D03               	btfss	3,2
  1902  01F4  29C0               	goto	l1226
  1903  01F5                     l1238:	
  1904  01F5  082A               	movf	___aldiv@sign,w
  1905  01F6  1903               	btfsc	3,2
  1906  01F7  2A03               	goto	l1242
  1907  01F8  09AB               	comf	___aldiv@quotient,f
  1908  01F9  09AC               	comf	___aldiv@quotient+1,f
  1909  01FA  09AD               	comf	___aldiv@quotient+2,f
  1910  01FB  09AE               	comf	___aldiv@quotient+3,f
  1911  01FC  0AAB               	incf	___aldiv@quotient,f
  1912  01FD  1903               	skipnz
  1913  01FE  0AAC               	incf	___aldiv@quotient+1,f
  1914  01FF  1903               	skipnz
  1915  0200  0AAD               	incf	___aldiv@quotient+2,f
  1916  0201  1903               	skipnz
  1917  0202  0AAE               	incf	___aldiv@quotient+3,f
  1918  0203                     l1242:	
  1919  0203  082E               	movf	___aldiv@quotient+3,w
  1920  0204  00A3               	movwf	?___aldiv+3
  1921  0205  082D               	movf	___aldiv@quotient+2,w
  1922  0206  00A2               	movwf	?___aldiv+2
  1923  0207  082C               	movf	___aldiv@quotient+1,w
  1924  0208  00A1               	movwf	?___aldiv+1
  1925  0209  082B               	movf	___aldiv@quotient,w
  1926  020A  00A0               	movwf	?___aldiv
  1927  020B  0008               	return
  1928  020C                     __end_of___aldiv:	
  1929                           
  1930                           	psect	text9
  1931  0398                     __ptext9:	
  1932 ;; *************** function _read_tarti *****************
  1933 ;; Defined at:
  1934 ;;		line 171 in file "tarti.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  i               2    6[BANK0 ] int 
  1939 ;;  kl              2    4[BANK0 ] int 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0, btemp+1
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1949 ;;      Params:         0       0       0       0
  1950 ;;      Locals:         0       4       0       0
  1951 ;;      Temps:          0       4       0       0
  1952 ;;      Totals:         0       8       0       0
  1953 ;;Total ram usage:        8 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    1
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;;		_set_offset
  1961 ;;		_measure_force
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           
  1966                           ;psect for function _read_tarti
  1967  0398                     _read_tarti:	
  1968                           
  1969                           ;tarti.c: 173: PORTAbits.RA0=0;
  1970                           
  1971                           ;incstack = 0
  1972                           ; Regs used in _read_tarti: [wreg+status,2+status,0+btemp+1]
  1973  0398  1283               	bcf	3,5	;RP0=0, select bank0
  1974  0399  1303               	bcf	3,6	;RP1=0, select bank0
  1975  039A  1005               	bcf	5,0	;volatile
  1976  039B                     l112:	
  1977                           ;tarti.c: 174: while(PORTAbits.RA3==1);
  1978                           
  1979  039B  1985               	btfsc	5,3	;volatile
  1980  039C  2B9B               	goto	l112
  1981                           
  1982                           ;tarti.c: 176: for(int kl=0;kl<25;kl++){
  1983  039D  01A4               	clrf	read_tarti@kl
  1984  039E  01A5               	clrf	read_tarti@kl+1
  1985  039F  0825               	movf	read_tarti@kl+1,w
  1986  03A0  3A80               	xorlw	128
  1987  03A1  00FF               	movwf	127
  1988  03A2  3080               	movlw	128
  1989  03A3  027F               	subwf	127,w
  1990  03A4  1D03               	skipz
  1991  03A5  2BA8               	goto	u1425
  1992  03A6  3019               	movlw	25
  1993  03A7  0224               	subwf	read_tarti@kl,w
  1994  03A8                     u1425:	
  1995  03A8  1803               	btfsc	3,0
  1996  03A9  2BBF               	goto	l117
  1997  03AA                     l115:	
  1998                           
  1999                           ;tarti.c: 177: PORTAbits.RA0=1;
  2000  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2001  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2002  03AC  1405               	bsf	5,0	;volatile
  2003                           
  2004                           ;tarti.c: 178: PORTAbits.RA0=0;
  2005  03AD  1005               	bcf	5,0	;volatile
  2006  03AE  3001               	movlw	1
  2007  03AF  07A4               	addwf	read_tarti@kl,f
  2008  03B0  1803               	skipnc
  2009  03B1  0AA5               	incf	read_tarti@kl+1,f
  2010  03B2  3000               	movlw	0
  2011  03B3  07A5               	addwf	read_tarti@kl+1,f
  2012  03B4  0825               	movf	read_tarti@kl+1,w
  2013  03B5  3A80               	xorlw	128
  2014  03B6  00FF               	movwf	127
  2015  03B7  3080               	movlw	128
  2016  03B8  027F               	subwf	127,w
  2017  03B9  1D03               	skipz
  2018  03BA  2BBD               	goto	u1435
  2019  03BB  3019               	movlw	25
  2020  03BC  0224               	subwf	read_tarti@kl,w
  2021  03BD                     u1435:	
  2022  03BD  1C03               	skipc
  2023  03BE  2BAA               	goto	l115
  2024  03BF                     l117:	
  2025                           ;tarti.c: 179: }
  2026                           ;tarti.c: 181: while(PORTAbits.RA3==1);
  2027                           
  2028  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2029  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2030  03C1  1985               	btfsc	5,3	;volatile
  2031  03C2  2BBF               	goto	l117
  2032                           
  2033                           ;tarti.c: 182: measure_val = 0;
  2034  03C3  3000               	movlw	0
  2035  03C4  00DC               	movwf	_measure_val
  2036  03C5  3000               	movlw	0
  2037  03C6  00DD               	movwf	_measure_val+1
  2038  03C7  3000               	movlw	0
  2039  03C8  00DE               	movwf	_measure_val+2
  2040                           
  2041                           ;tarti.c: 183: for(int i=0; i<24; i++){
  2042  03C9  01A6               	clrf	read_tarti@i
  2043  03CA  01A7               	clrf	read_tarti@i+1
  2044  03CB  0827               	movf	read_tarti@i+1,w
  2045  03CC  3A80               	xorlw	128
  2046  03CD  00FF               	movwf	127
  2047  03CE  3080               	movlw	128
  2048  03CF  027F               	subwf	127,w
  2049  03D0  1D03               	skipz
  2050  03D1  2BD4               	goto	u1455
  2051  03D2  3018               	movlw	24
  2052  03D3  0226               	subwf	read_tarti@i,w
  2053  03D4                     u1455:	
  2054  03D4  1803               	btfsc	3,0
  2055  03D5  2C01               	goto	l121
  2056  03D6                     l120:	
  2057                           
  2058                           ;tarti.c: 184: PORTAbits.RA0=1;
  2059  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2060  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2061  03D8  1405               	bsf	5,0	;volatile
  2062                           
  2063                           ;tarti.c: 185: measure_val <<= 1;
  2064  03D9  3001               	movlw	1
  2065  03DA                     u1465:	
  2066  03DA  1003               	clrc
  2067  03DB  0DDC               	rlf	_measure_val,f
  2068  03DC  0DDD               	rlf	_measure_val+1,f
  2069  03DD  0DDE               	rlf	_measure_val+2,f
  2070  03DE  3EFF               	addlw	-1
  2071  03DF  1D03               	skipz
  2072  03E0  2BDA               	goto	u1465
  2073                           
  2074                           ;tarti.c: 187: PORTAbits.RA0=0;
  2075  03E1  1005               	bcf	5,0	;volatile
  2076                           
  2077                           ;tarti.c: 188: measure_val |= PORTAbits.RA3;
  2078  03E2  0C05               	rrf	5,w	;volatile
  2079  03E3  00A0               	movwf	??_read_tarti
  2080  03E4  0CA0               	rrf	??_read_tarti,f
  2081  03E5  0C20               	rrf	??_read_tarti,w
  2082  03E6  3901               	andlw	1
  2083  03E7  00A1               	movwf	??_read_tarti+1
  2084  03E8  01A2               	clrf	??_read_tarti+2
  2085  03E9  01A3               	clrf	??_read_tarti+3
  2086  03EA  0821               	movf	??_read_tarti+1,w
  2087  03EB  04DC               	iorwf	_measure_val,f
  2088  03EC  0822               	movf	??_read_tarti+2,w
  2089  03ED  04DD               	iorwf	_measure_val+1,f
  2090  03EE  0823               	movf	??_read_tarti+3,w
  2091  03EF  04DE               	iorwf	_measure_val+2,f
  2092  03F0  3001               	movlw	1
  2093  03F1  07A6               	addwf	read_tarti@i,f
  2094  03F2  1803               	skipnc
  2095  03F3  0AA7               	incf	read_tarti@i+1,f
  2096  03F4  3000               	movlw	0
  2097  03F5  07A7               	addwf	read_tarti@i+1,f
  2098  03F6  0827               	movf	read_tarti@i+1,w
  2099  03F7  3A80               	xorlw	128
  2100  03F8  00FF               	movwf	127
  2101  03F9  3080               	movlw	128
  2102  03FA  027F               	subwf	127,w
  2103  03FB  1D03               	skipz
  2104  03FC  2BFF               	goto	u1475
  2105  03FD  3018               	movlw	24
  2106  03FE  0226               	subwf	read_tarti@i,w
  2107  03FF                     u1475:	
  2108  03FF  1C03               	skipc
  2109  0400  2BD6               	goto	l120
  2110  0401                     l121:	
  2111                           
  2112                           ;tarti.c: 189: }
  2113                           ;tarti.c: 191: PORTAbits.RA0=1;
  2114  0401  1283               	bcf	3,5	;RP0=0, select bank0
  2115  0402  1303               	bcf	3,6	;RP1=0, select bank0
  2116  0403  1405               	bsf	5,0	;volatile
  2117                           
  2118                           ;tarti.c: 192: measure_val ^=0x800000;
  2119  0404  3080               	movlw	128
  2120  0405  06DE               	xorwf	_measure_val+2,f
  2121                           
  2122                           ;tarti.c: 193: PORTAbits.RA0=0;
  2123  0406  1005               	bcf	5,0	;volatile
  2124  0407  0008               	return
  2125  0408                     __end_of_read_tarti:	
  2126                           
  2127                           	psect	text10
  2128  04B3                     __ptext10:	
  2129 ;; *************** function _T0_init *****************
  2130 ;; Defined at:
  2131 ;;		line 107 in file "tarti.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		None
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2145 ;;      Params:         0       0       0       0
  2146 ;;      Locals:         0       0       0       0
  2147 ;;      Temps:          0       0       0       0
  2148 ;;      Totals:         0       0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    1
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           
  2160                           ;psect for function _T0_init
  2161  04B3                     _T0_init:	
  2162                           
  2163                           ;tarti.c: 108: INTCONbits.GIE=1;
  2164                           
  2165                           ;incstack = 0
  2166                           ; Regs used in _T0_init: []
  2167  04B3  178B               	bsf	11,7	;volatile
  2168                           
  2169                           ;tarti.c: 109: INTCONbits.T0IE=1;
  2170  04B4  168B               	bsf	11,5	;volatile
  2171                           
  2172                           ;tarti.c: 110: INTCONbits.T0IF=0;
  2173  04B5  110B               	bcf	11,2	;volatile
  2174                           
  2175                           ;tarti.c: 112: OPTION_REGbits.T0CS=0;
  2176  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  2177  04B7  1303               	bcf	3,6	;RP1=0, select bank1
  2178  04B8  1281               	bcf	1,5	;volatile
  2179                           
  2180                           ;tarti.c: 113: OPTION_REGbits.T0SE=0;
  2181  04B9  1201               	bcf	1,4	;volatile
  2182                           
  2183                           ;tarti.c: 114: OPTION_REGbits.PSA=0;
  2184  04BA  1181               	bcf	1,3	;volatile
  2185                           
  2186                           ;tarti.c: 115: OPTION_REGbits.PS0=0;
  2187  04BB  1001               	bcf	1,0	;volatile
  2188                           
  2189                           ;tarti.c: 116: OPTION_REGbits.PS1=0;
  2190  04BC  1081               	bcf	1,1	;volatile
  2191                           
  2192                           ;tarti.c: 117: OPTION_REGbits.PS2=0;
  2193  04BD  1101               	bcf	1,2	;volatile
  2194  04BE  0008               	return
  2195  04BF                     __end_of_T0_init:	
  2196                           
  2197                           	psect	text11
  2198  0408                     __ptext11:	
  2199 ;; *************** function _kes *****************
  2200 ;; Defined at:
  2201 ;;		line 140 in file "tarti.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;		None
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2215 ;;      Params:         0       0       0       0
  2216 ;;      Locals:         0       0       0       0
  2217 ;;      Temps:          5       0       0       0
  2218 ;;      Totals:         5       0       0       0
  2219 ;;Total ram usage:        5 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; This function calls:
  2222 ;;		Nothing
  2223 ;; This function is called by:
  2224 ;;		Interrupt level 1
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           
  2229                           ;psect for function _kes
  2230  0408                     _kes:	
  2231                           
  2232                           ;tarti.c: 141: if(INTCONbits.T0IF && INTCONbits.T0IE){
  2233  0408  190B               	btfsc	11,2	;volatile
  2234  0409  1E8B               	btfss	11,5	;volatile
  2235  040A  2C1A               	goto	i1l1176
  2236                           
  2237                           ;tarti.c: 142: timetick++;
  2238  040B  3001               	movlw	1
  2239  040C  07F5               	addwf	_timetick,f
  2240  040D  3000               	movlw	0
  2241  040E  1803               	skipnc
  2242  040F  3001               	movlw	1
  2243  0410  07F6               	addwf	_timetick+1,f
  2244  0411  3000               	movlw	0
  2245  0412  1803               	skipnc
  2246  0413  3001               	movlw	1
  2247  0414  07F7               	addwf	_timetick+2,f
  2248  0415  3000               	movlw	0
  2249  0416  1803               	skipnc
  2250  0417  3001               	movlw	1
  2251  0418  07F8               	addwf	_timetick+3,f
  2252                           
  2253                           ;tarti.c: 143: INTCONbits.T0IF=0;
  2254  0419  110B               	bcf	11,2	;volatile
  2255  041A                     i1l1176:	
  2256                           
  2257                           ;tarti.c: 145: }
  2258                           ;tarti.c: 147: if(timetick>=10000){
  2259  041A  0878               	movf	_timetick+3,w
  2260  041B  1D03               	btfss	3,2
  2261  041C  2C2A               	goto	i1l1178
  2262  041D  0877               	movf	_timetick+2,w
  2263  041E  1D03               	btfss	3,2
  2264  041F  2C2A               	goto	i1l1178
  2265  0420  3027               	movlw	39
  2266  0421  0276               	subwf	_timetick+1,w
  2267  0422  1D03               	skipz
  2268  0423  2C28               	goto	u114_23
  2269  0424  3010               	movlw	16
  2270  0425  0275               	subwf	_timetick,w
  2271  0426  1D03               	skipz
  2272  0427  2C28               	goto	u114_23
  2273  0428                     u114_23:	
  2274  0428  1C03               	btfss	3,0
  2275  0429  2C32               	goto	i1l1180
  2276  042A                     i1l1178:	
  2277                           
  2278                           ;tarti.c: 148: timetick=0;
  2279  042A  3000               	movlw	0
  2280  042B  00F8               	movwf	_timetick+3
  2281  042C  3000               	movlw	0
  2282  042D  00F7               	movwf	_timetick+2
  2283  042E  3000               	movlw	0
  2284  042F  00F6               	movwf	_timetick+1
  2285  0430  3000               	movlw	0
  2286  0431  00F5               	movwf	_timetick
  2287  0432                     i1l1180:	
  2288                           
  2289                           ;tarti.c: 149: }
  2290                           ;tarti.c: 151: if(PIR1bits.RCIF){
  2291  0432  1E8C               	btfss	12,5	;volatile
  2292  0433  2C44               	goto	i1l1186
  2293                           
  2294                           ;tarti.c: 152: tarti.command[tarti.wr_index]=RCREG;
  2295  0434  081A               	movf	26,w	;volatile
  2296  0435  00F0               	movwf	??_kes
  2297  0436  1683               	bsf	3,5	;RP0=1, select bank1
  2298  0437  1303               	bcf	3,6	;RP1=0, select bank1
  2299  0438  0838               	movf	(_tarti^(0+128)+24),w
  2300  0439  3EA0               	addlw	(low (_tarti| 0))& (0+255)
  2301  043A  0084               	movwf	4
  2302  043B  0870               	movf	??_kes,w
  2303  043C  1383               	bcf	3,7	;select IRP bank1
  2304  043D  0080               	movwf	0
  2305                           
  2306                           ;tarti.c: 154: tarti.wr_index++;
  2307  043E  3001               	movlw	1
  2308  043F  07B8               	addwf	(_tarti^(0+128)+24),f
  2309  0440  1803               	skipnc
  2310  0441  0AB9               	incf	((_tarti+1)^(0+128)+24),f
  2311  0442  3000               	movlw	0
  2312  0443  07B9               	addwf	((_tarti+1)^(0+128)+24),f
  2313  0444                     i1l1186:	
  2314                           
  2315                           ;tarti.c: 155: }
  2316                           ;tarti.c: 157: if(tarti.wr_index>=24)
  2317  0444  3000               	movlw	0
  2318  0445  1683               	bsf	3,5	;RP0=1, select bank1
  2319  0446  1303               	bcf	3,6	;RP1=0, select bank1
  2320  0447  0239               	subwf	((_tarti+1)^(0+128)+24),w
  2321  0448  3018               	movlw	24
  2322  0449  1903               	skipnz
  2323  044A  0238               	subwf	(_tarti^(0+128)+24),w
  2324  044B  1C03               	skipc
  2325  044C  2C4F               	goto	i1l106
  2326                           
  2327                           ;tarti.c: 158: tarti.wr_index=0;
  2328  044D  01B8               	clrf	(_tarti^(0+128)+24)
  2329  044E  01B9               	clrf	((_tarti+1)^(0+128)+24)
  2330  044F                     i1l106:	
  2331  044F  0874               	movf	??_kes+4,w
  2332  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2333  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2334  0452  00FF               	movwf	127
  2335  0453  0873               	movf	??_kes+3,w
  2336  0454  008A               	movwf	10
  2337  0455  0872               	movf	??_kes+2,w
  2338  0456  0084               	movwf	4
  2339  0457  0E71               	swapf	(??_kes+1)^(0+-128),w
  2340  0458  0083               	movwf	3
  2341  0459  0EFE               	swapf	126,f
  2342  045A  0E7E               	swapf	126,w
  2343  045B  0009               	retfie
  2344  045C                     __end_of_kes:	
  2345  007E                     btemp	set	126	;btemp
  2346  007E                     wtemp0	set	126
  2347                           
  2348                           	psect	intentry
  2349  0004                     __pintentry:	
  2350                           ;incstack = 0
  2351                           ; Regs used in _kes: [wreg-fsr0h+status,2+status,0]
  2352                           
  2353  0004                     interrupt_function:	
  2354  007E                     saved_w	set	btemp
  2355  0004  00FE               	movwf	btemp
  2356  0005  0E03               	swapf	3,w
  2357  0006  00F1               	movwf	??_kes+1
  2358  0007  0804               	movf	4,w
  2359  0008  00F2               	movwf	??_kes+2
  2360  0009  080A               	movf	10,w
  2361  000A  00F3               	movwf	??_kes+3
  2362  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2363  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2364  000D  087F               	movf	btemp+1,w
  2365  000E  00F4               	movwf	??_kes+4
  2366  000F  2C08               	ljmp	_kes


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     42      63
    BANK1            80      0      28
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _kes in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_set_offset
    _set_offset->_write_dec
    _measure_force->_write_dec
    _write_dec->___aldiv

Critical Paths under _kes in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _kes in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _kes in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    7522
                                             35 BANK0      7     7      0
                            _T0_init
                      _measure_force
                         _read_tarti
                        _serial_init
                         _set_offset
                         _tarti_init
 ---------------------------------------------------------------------------------
 (1) _tarti_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_offset                                          13    13      0    3594
                                             22 BANK0     13    13      0
                            ___aldiv
                         _read_tarti
                          _write_dec
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_force                                       10    10      0    3594
                                             22 BANK0     10    10      0
                            ___aldiv
                         _read_tarti
                          _write_dec
 ---------------------------------------------------------------------------------
 (2) _write_dec                                            7     3      4    2354
                                             15 BANK0      7     3      4
                            ___aldiv
                            ___almod
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     266
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     563
                                              0 BANK0     11     3      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     965
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _read_tarti                                           8     8      0     136
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _T0_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _kes                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _T0_init
   _measure_force
     ___aldiv
     _read_tarti
     _write_dec
       ___aldiv
       ___almod
       ___lmul
   _read_tarti
   _serial_init
   _set_offset
     ___aldiv
     _read_tarti
     _write_dec
       ___aldiv
       ___almod
       ___lmul
   _tarti_init

 _kes (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     2A      3F       3       78.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      64       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      1C       7       35.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      64      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 02 18:33:42 2018

            __CFG_CP$OFF 0000                       l71 0132                       l80 0152  
                     l65 010D                       l74 013A                       l83 016F  
                     l68 012A                       l86 0177                       fsr 0004  
                    l120 03D6                      l112 039B                      l121 0401  
                    l115 03AA                      l300 0331                      l117 03BF  
                    l287 018F             __CFG_CPD$OFF 0000                      _kes 0408  
                    fsr0 0004                      indf 0000             __CFG_FOSC$HS 0000  
            main@cnt_335 0048             __CFG_LVP$OFF 0000                     l1224 01B0  
                   l1216 01A0                     l1242 0203                     l1234 01E8  
                   l1226 01C0                     l1322 006C                     l1260 0346  
                   l1324 0070                     l1238 01F5                     l1262 0356  
                   l1270 0381                     l1254 033E                     l1334 0075  
                   l1336 00B9                     l1274 038F                     l1266 0374  
                   l1194 0466                     l1362 02EC                     l1354 02AF  
                   l1198 047C                     l1384 0255                     l1376 0223  
                   ?_kes 0070                     u1205 0486                     u1255 01B4  
                   u1425 03A8                     u1505 00C2                     u1435 03BD  
                   u1275 01C2                     u1355 034A                     u1195 047E  
                   u1285 01D7                     u1525 02AD                     u1455 03D4  
                   u1295 01E9                     u1375 0364                     u1615 0128  
                   u1465 03DA                     u1385 0375                     u1545 02EA  
                   u1475 03FF                     u1555 0221                     u1707 00F2  
                   u1575 0253                     u1655 0150                     u1675 016D  
                   u1595 010B          __end_of_T0_init 04BF           write_dec@value 002F  
                   _main 00D5                     btemp 007E                     start 0010  
                  ??_kes 0070          __end_of___aldiv 020C          __end_of___almod 0398  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _CMCON 001F  
                  i1l106 044F                    _RCREG 001A                    _SPBRG 0099  
                  _TRISB 0086                    _TXREG 0019      ___lmul@multiplicand 0024  
                  _force 0056                    _tarti 00A0           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
 __size_of_measure_force 008C           __CFG_MCLRE$OFF 0000          __initialization 0011  
           __end_of_main 017D                   ??_main 0043                ??_T0_init 0075  
                 i1l1180 0432                   i1l1176 041A                   i1l1186 0444  
                 i1l1178 042A                   u114_23 0428           __CFG_PWRTE$OFF 0000  
           ?_serial_init 0070                   ___lmul 045C                ??___aldiv 0028  
              ??___almod 0028                   _offset 0059            _measure_force 020C  
                 saved_w 007E              read_tarti@i 0026  __end_of__initialization 001E  
         __pcstackCOMMON 0070           ?_measure_force 0070           _OPTION_REGbits 0081  
             __pbssBANK0 004A               __pbssBANK1 00A0               __pmaintext 00D5  
                ?___lmul 0020               __pintentry 0004           ___lmul@product 0029  
                _T0_init 04B3       __size_of_write_dec 00B5                  ___aldiv 017D  
                ___almod 031F          __size_of___lmul 0041     __size_of_serial_init 0016  
        ??_measure_force 0036                  __ptext1 04BF                  __ptext2 0298  
                __ptext3 049D                  __ptext4 020C                  __ptext5 0020  
                __ptext6 045C                  __ptext7 031F                  __ptext8 017D  
                __ptext9 0398               _read_tarti 0398             __size_of_kes 0054  
       ___aldiv@dividend 0024                  main@cnt 0046              set_offset@i 003D  
                clrloop0 04C9     end_of_initialization 001E           measure_force@i 003A  
             _set_offset 0298                _RCSTAbits 0018         ___aldiv@quotient 002B  
             _tarti_init 04BF                _PORTAbits 0005                _PORTBbits 0006  
           read_tarti@kl 0024        __end_of_write_dec 00D5                _TRISAbits 0085  
              _TRISBbits 0086                _TXSTAbits 0098           __end_of___lmul 049D  
            ?_read_tarti 0070      start_initialization 0011              __end_of_kes 045C  
            ?_set_offset 0070                 ??___lmul 0028              ?_tarti_init 0070  
            __pbssCOMMON 0075                ___latbits 0000            __pcstackBANK0 0020  
               ?_T0_init 0070                _dec_array 004A      __size_of_read_tarti 0070  
               ?___aldiv 0020                 ?___almod 0020         ___almod@dividend 0024  
    __size_of_set_offset 0087      __size_of_tarti_init 0009          ___aldiv@divisor 0020  
      interrupt_function 0004          ___aldiv@counter 0029                clear_ram0 04C8  
               _PIE1bits 008C                 _PIR1bits 000C            ??_serial_init 0075  
  __end_of_measure_force 0298            set_offset@sum 003F         __size_of_T0_init 000C  
              _write_dec 0020        ___lmul@multiplier 0020              _measure_val 005C  
       __size_of___aldiv 008F         __size_of___almod 0079      __end_of_serial_init 04B3  
           ??_read_tarti 0020         measure_force@sum 003C                 __ptext10 04B3  
               __ptext11 0408               ?_write_dec 002F          ___almod@divisor 0020  
        ___almod@counter 0029            __size_of_main 00A8       __end_of_read_tarti 0408  
           ??_set_offset 0036             ??_tarti_init 0075                 _timetick 0075  
             write_dec@i 0034               _INTCONbits 000B       __end_of_set_offset 031F  
               intlevel1 0000       __end_of_tarti_init 04C8              _serial_init 049D  
           ___aldiv@sign 002A              ??_write_dec 0033             ___almod@sign 002A  
