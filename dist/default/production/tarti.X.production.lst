

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Feb 03 09:28:26 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F628A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009F                     	;# 
    97  001A                     _RCREG	set	26
    98  000C                     _PIR1bits	set	12
    99  0018                     _RCSTAbits	set	24
   100  000B                     _INTCONbits	set	11
   101  0019                     _TXREG	set	25
   102  0006                     _PORTBbits	set	6
   103  0005                     _PORTAbits	set	5
   104  001F                     _CMCON	set	31
   105  0085                     _TRISAbits	set	133
   106  0099                     _SPBRG	set	153
   107  008C                     _PIE1bits	set	140
   108  0086                     _TRISBbits	set	134
   109  0081                     _OPTION_REGbits	set	129
   110  0098                     _TXSTAbits	set	152
   111  0086                     _TRISB	set	134
   112                           
   113                           ; #config settings
   114  0000                     
   115                           	psect	cinit
   116  0011                     start_initialization:	
   117  0011                     __initialization:	
   118                           
   119                           ; Clear objects allocated to COMMON
   120  0011  3075               	movlw	low __pbssCOMMON
   121  0012  0084               	movwf	4
   122  0013  3079               	movlw	low (__pbssCOMMON+4)
   123  0014  24DE               	fcall	clear_ram0
   124                           
   125                           ; Clear objects allocated to BANK0
   126  0015  1383               	bcf	3,7	;select IRP bank0
   127  0016  304A               	movlw	low __pbssBANK0
   128  0017  0084               	movwf	4
   129  0018  305D               	movlw	low (__pbssBANK0+19)
   130  0019  24DE               	fcall	clear_ram0
   131                           
   132                           ; Clear objects allocated to BANK1
   133  001A  30A0               	movlw	low __pbssBANK1
   134  001B  0084               	movwf	4
   135  001C  30BC               	movlw	low (__pbssBANK1+28)
   136  001D  24DE               	fcall	clear_ram0
   137  001E                     end_of_initialization:	
   138                           ;End of C runtime variable initialization code
   139                           
   140  001E                     __end_of__initialization:	
   141  001E  0183               	clrf	3
   142  001F  2820               	ljmp	_main	;jump to C main() function
   143                           
   144                           	psect	bssCOMMON
   145  0075                     __pbssCOMMON:	
   146  0075                     _timetick:	
   147  0075                     	ds	4
   148                           
   149                           	psect	bssBANK0
   150  004A                     __pbssBANK0:	
   151  004A                     _dec_array:	
   152  004A                     	ds	10
   153  0054                     _force:	
   154  0054                     	ds	3
   155  0057                     _offset:	
   156  0057                     	ds	3
   157  005A                     _measure_val:	
   158  005A                     	ds	3
   159                           
   160                           	psect	bssBANK1
   161  00A0                     __pbssBANK1:	
   162  00A0                     _tarti:	
   163  00A0                     	ds	28
   164                           
   165                           	psect	clrtext
   166  04DE                     clear_ram0:	
   167                           ;	Called with FSR containing the base address, and
   168                           ;	W with the last address+1
   169                           
   170  04DE  0064               	clrwdt	;clear the watchdog before getting into this loop
   171  04DF                     clrloop0:	
   172  04DF  0180               	clrf	0	;clear RAM location pointed to by FSR
   173  04E0  0A84               	incf	4,f	;increment pointer
   174  04E1  0604               	xorwf	4,w	;XOR with final address
   175  04E2  1903               	btfsc	3,2	;have we reached the end yet?
   176  04E3  3400               	retlw	0	;all done for this memory range, return
   177  04E4  0604               	xorwf	4,w	;XOR again to restore value
   178  04E5  2CDF               	goto	clrloop0	;do the next byte
   179                           
   180                           	psect	cstackCOMMON
   181  0070                     __pcstackCOMMON:	
   182  0070                     ?_T0_init:	
   183  0070                     ?_serial_init:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?_tarti_init:	
   187                           ; 1 bytes @ 0x0
   188                           
   189  0070                     ?_read_tarti:	
   190                           ; 1 bytes @ 0x0
   191                           
   192  0070                     ?_set_offset:	
   193                           ; 1 bytes @ 0x0
   194                           
   195  0070                     ?_measure_force:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_main:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_kes:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ??_kes:	
   205                           ; 1 bytes @ 0x0
   206                           
   207                           
   208                           ; 1 bytes @ 0x0
   209  0070                     	ds	5
   210  0075                     ??_T0_init:	
   211  0075                     ??_serial_init:	
   212                           ; 1 bytes @ 0x5
   213                           
   214  0075                     ??_tarti_init:	
   215                           ; 1 bytes @ 0x5
   216                           
   217                           
   218                           	psect	cstackBANK0
   219  0020                     __pcstackBANK0:	
   220                           ; 1 bytes @ 0x5
   221                           
   222  0020                     ??_read_tarti:	
   223  0020                     ?___lmul:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0020                     ?___aldiv:	
   227                           ; 4 bytes @ 0x0
   228                           
   229  0020                     ?___almod:	
   230                           ; 4 bytes @ 0x0
   231                           
   232  0020                     ___lmul@multiplier:	
   233                           ; 4 bytes @ 0x0
   234                           
   235  0020                     ___aldiv@divisor:	
   236                           ; 4 bytes @ 0x0
   237                           
   238  0020                     ___almod@divisor:	
   239                           ; 4 bytes @ 0x0
   240                           
   241                           
   242                           ; 4 bytes @ 0x0
   243  0020                     	ds	4
   244  0024                     read_tarti@kl:	
   245  0024                     ___lmul@multiplicand:	
   246                           ; 2 bytes @ 0x4
   247                           
   248  0024                     ___aldiv@dividend:	
   249                           ; 4 bytes @ 0x4
   250                           
   251  0024                     ___almod@dividend:	
   252                           ; 4 bytes @ 0x4
   253                           
   254                           
   255                           ; 4 bytes @ 0x4
   256  0024                     	ds	2
   257  0026                     read_tarti@i:	
   258                           
   259                           ; 2 bytes @ 0x6
   260  0026                     	ds	2
   261  0028                     ??___lmul:	
   262  0028                     ??___aldiv:	
   263                           ; 1 bytes @ 0x8
   264                           
   265  0028                     ??___almod:	
   266                           ; 1 bytes @ 0x8
   267                           
   268                           
   269                           ; 1 bytes @ 0x8
   270  0028                     	ds	1
   271  0029                     ___aldiv@counter:	
   272  0029                     ___almod@counter:	
   273                           ; 1 bytes @ 0x9
   274                           
   275  0029                     ___lmul@product:	
   276                           ; 1 bytes @ 0x9
   277                           
   278                           
   279                           ; 4 bytes @ 0x9
   280  0029                     	ds	1
   281  002A                     ___aldiv@sign:	
   282  002A                     ___almod@sign:	
   283                           ; 1 bytes @ 0xA
   284                           
   285                           
   286                           ; 1 bytes @ 0xA
   287  002A                     	ds	1
   288  002B                     ___aldiv@quotient:	
   289                           
   290                           ; 4 bytes @ 0xB
   291  002B                     	ds	4
   292  002F                     ?_write_dec:	
   293  002F                     write_dec@value:	
   294                           ; 1 bytes @ 0xF
   295                           
   296                           
   297                           ; 4 bytes @ 0xF
   298  002F                     	ds	4
   299  0033                     ??_write_dec:	
   300                           
   301                           ; 1 bytes @ 0x13
   302  0033                     	ds	1
   303  0034                     write_dec@i:	
   304                           
   305                           ; 2 bytes @ 0x14
   306  0034                     	ds	2
   307  0036                     ??_set_offset:	
   308  0036                     ??_measure_force:	
   309                           ; 1 bytes @ 0x16
   310                           
   311                           
   312                           ; 1 bytes @ 0x16
   313  0036                     	ds	4
   314  003A                     measure_force@i:	
   315                           
   316                           ; 2 bytes @ 0x1A
   317  003A                     	ds	2
   318  003C                     measure_force@sum:	
   319                           
   320                           ; 4 bytes @ 0x1C
   321  003C                     	ds	1
   322  003D                     set_offset@i:	
   323                           
   324                           ; 2 bytes @ 0x1D
   325  003D                     	ds	2
   326  003F                     set_offset@sum:	
   327                           
   328                           ; 4 bytes @ 0x1F
   329  003F                     	ds	4
   330  0043                     ??_main:	
   331                           
   332                           ; 1 bytes @ 0x23
   333  0043                     	ds	3
   334  0046                     main@cnt:	
   335                           
   336                           ; 2 bytes @ 0x26
   337  0046                     	ds	2
   338  0048                     main@cnt_335:	
   339                           
   340                           ; 2 bytes @ 0x28
   341  0048                     	ds	2
   342                           
   343                           	psect	maintext
   344  0020                     __pmaintext:	
   345 ;;
   346 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   347 ;;
   348 ;; *************** function _main *****************
   349 ;; Defined at:
   350 ;;		line 49 in file "tarti.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;		None
   353 ;; Auto vars:     Size  Location     Type
   354 ;;  cnt             2   40[BANK0 ] int 
   355 ;;  cnt             2   38[BANK0 ] int 
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : B00/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   365 ;;      Params:         0       0       0       0
   366 ;;      Locals:         0       4       0       0
   367 ;;      Temps:          0       3       0       0
   368 ;;      Totals:         0       7       0       0
   369 ;;Total ram usage:        7 bytes
   370 ;; Hardware stack levels required when called:    4
   371 ;; This function calls:
   372 ;;		_T0_init
   373 ;;		_measure_force
   374 ;;		_read_tarti
   375 ;;		_serial_init
   376 ;;		_set_offset
   377 ;;		_tarti_init
   378 ;; This function is called by:
   379 ;;		Startup code after reset
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           
   384                           ;psect for function _main
   385  0020                     _main:	
   386                           
   387                           ;tarti.c: 50: CMCON = 0x07;
   388                           
   389                           ;incstack = 0
   390                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   391  0020  3007               	movlw	7
   392  0021  1283               	bcf	3,5	;RP0=0, select bank0
   393  0022  1303               	bcf	3,6	;RP1=0, select bank0
   394  0023  009F               	movwf	31	;volatile
   395                           
   396                           ;tarti.c: 51: TRISB = 0b00000110;
   397  0024  3006               	movlw	6
   398  0025  1683               	bsf	3,5	;RP0=1, select bank1
   399  0026  1303               	bcf	3,6	;RP1=0, select bank1
   400  0027  0086               	movwf	6	;volatile
   401                           
   402                           ;tarti.c: 53: T0_init();
   403  0028  24C9               	fcall	_T0_init
   404                           
   405                           ;tarti.c: 54: serial_init();
   406  0029  24B3               	fcall	_serial_init
   407                           
   408                           ;tarti.c: 55: tarti_init();
   409  002A  24D5               	fcall	_tarti_init
   410                           
   411                           ;tarti.c: 57: tarti.wr_index = 0;
   412  002B  1683               	bsf	3,5	;RP0=1, select bank1
   413  002C  1303               	bcf	3,6	;RP1=0, select bank1
   414  002D  01B8               	clrf	(_tarti^(0+128)+24)
   415  002E  01B9               	clrf	((_tarti+1)^(0+128)+24)
   416                           
   417                           ;tarti.c: 58: tarti.rd_index = 0;
   418  002F  01BA               	clrf	(_tarti^(0+128)+26)
   419  0030  01BB               	clrf	((_tarti+1)^(0+128)+26)
   420                           
   421                           ;tarti.c: 60: PORTAbits.RA0 = 0;
   422  0031  1283               	bcf	3,5	;RP0=0, select bank0
   423  0032  1303               	bcf	3,6	;RP1=0, select bank0
   424  0033  1005               	bcf	5,0	;volatile
   425                           
   426                           ;tarti.c: 61: PORTBbits.RB7 = 1;
   427  0034  1786               	bsf	6,7	;volatile
   428                           
   429                           ;tarti.c: 63: _delay((unsigned long)((4000)*(20000000/4000.0)));
   430  0035  3066               	movlw	102
   431  0036  1283               	bcf	3,5	;RP0=0, select bank0
   432  0037  1303               	bcf	3,6	;RP1=0, select bank0
   433  0038  00C5               	movwf	??_main+2
   434  0039  3076               	movlw	118
   435  003A  00C4               	movwf	??_main+1
   436  003B  30C0               	movlw	192
   437  003C  00C3               	movwf	??_main
   438  003D                     u1797:	
   439  003D  0BC3               	decfsz	??_main,f
   440  003E  283D               	goto	u1797
   441  003F  0BC4               	decfsz	??_main+1,f
   442  0040  283D               	goto	u1797
   443  0041  0BC5               	decfsz	??_main+2,f
   444  0042  283D               	goto	u1797
   445  0043  2844               	nop2
   446                           
   447                           ;tarti.c: 64: read_tarti();
   448  0044  23AE               	fcall	_read_tarti
   449                           
   450                           ;tarti.c: 65: set_offset();
   451  0045  22AE               	fcall	_set_offset
   452                           
   453                           ;tarti.c: 66: set_offset();
   454  0046  22AE               	fcall	_set_offset
   455                           
   456                           ;tarti.c: 67: set_offset();
   457  0047  22AE               	fcall	_set_offset
   458                           
   459                           ;tarti.c: 68: set_offset();
   460  0048  22AE               	fcall	_set_offset
   461                           
   462                           ;tarti.c: 71: for(int cnt=0; cnt<10; cnt++){
   463  0049  1283               	bcf	3,5	;RP0=0, select bank0
   464  004A  1303               	bcf	3,6	;RP1=0, select bank0
   465  004B  01C6               	clrf	main@cnt
   466  004C  01C7               	clrf	main@cnt+1
   467  004D  0847               	movf	main@cnt+1,w
   468  004E  3A80               	xorlw	128
   469  004F  00FF               	movwf	127
   470  0050  3080               	movlw	128
   471  0051  027F               	subwf	127,w
   472  0052  1D03               	skipz
   473  0053  2856               	goto	u1655
   474  0054  300A               	movlw	10
   475  0055  0246               	subwf	main@cnt,w
   476  0056                     u1655:	
   477  0056  1803               	btfsc	3,0
   478  0057  2875               	goto	l68
   479  0058                     l65:	
   480                           ;tarti.c: 72: while(!TXSTAbits.TRMT);
   481                           
   482  0058  1683               	bsf	3,5	;RP0=1, select bank1
   483  0059  1303               	bcf	3,6	;RP1=0, select bank1
   484  005A  1C98               	btfss	24,1	;volatile
   485  005B  2858               	goto	l65
   486                           
   487                           ;tarti.c: 73: TXREG=(dec_array[cnt]);
   488  005C  1283               	bcf	3,5	;RP0=0, select bank0
   489  005D  1303               	bcf	3,6	;RP1=0, select bank0
   490  005E  0846               	movf	main@cnt,w
   491  005F  3E4A               	addlw	(low (_dec_array| 0))& (0+255)
   492  0060  0084               	movwf	4
   493  0061  1383               	bcf	3,7	;select IRP bank0
   494  0062  0800               	movf	0,w
   495  0063  0099               	movwf	25	;volatile
   496  0064  3001               	movlw	1
   497  0065  07C6               	addwf	main@cnt,f
   498  0066  1803               	skipnc
   499  0067  0AC7               	incf	main@cnt+1,f
   500  0068  3000               	movlw	0
   501  0069  07C7               	addwf	main@cnt+1,f
   502  006A  0847               	movf	main@cnt+1,w
   503  006B  3A80               	xorlw	128
   504  006C  00FF               	movwf	127
   505  006D  3080               	movlw	128
   506  006E  027F               	subwf	127,w
   507  006F  1D03               	skipz
   508  0070  2873               	goto	u1675
   509  0071  300A               	movlw	10
   510  0072  0246               	subwf	main@cnt,w
   511  0073                     u1675:	
   512  0073  1C03               	skipc
   513  0074  2858               	goto	l65
   514  0075                     l68:	
   515                           ;tarti.c: 74: }
   516                           ;tarti.c: 76: while(!TXSTAbits.TRMT);
   517                           
   518  0075  1683               	bsf	3,5	;RP0=1, select bank1
   519  0076  1303               	bcf	3,6	;RP1=0, select bank1
   520  0077  1C98               	btfss	24,1	;volatile
   521  0078  2875               	goto	l68
   522                           
   523                           ;tarti.c: 77: TXREG='\r';
   524  0079  300D               	movlw	13
   525  007A  1283               	bcf	3,5	;RP0=0, select bank0
   526  007B  1303               	bcf	3,6	;RP1=0, select bank0
   527  007C  0099               	movwf	25	;volatile
   528  007D                     l71:	
   529                           ;tarti.c: 78: while(!TXSTAbits.TRMT);
   530                           
   531  007D  1683               	bsf	3,5	;RP0=1, select bank1
   532  007E  1303               	bcf	3,6	;RP1=0, select bank1
   533  007F  1C98               	btfss	24,1	;volatile
   534  0080  287D               	goto	l71
   535                           
   536                           ;tarti.c: 79: TXREG='\n';
   537  0081  300A               	movlw	10
   538  0082  1283               	bcf	3,5	;RP0=0, select bank0
   539  0083  1303               	bcf	3,6	;RP1=0, select bank0
   540  0084  0099               	movwf	25	;volatile
   541  0085                     l74:	
   542                           ;tarti.c: 80: while(!TXSTAbits.TRMT);
   543                           
   544  0085  1683               	bsf	3,5	;RP0=1, select bank1
   545  0086  1303               	bcf	3,6	;RP1=0, select bank1
   546  0087  1C98               	btfss	24,1	;volatile
   547  0088  2885               	goto	l74
   548                           
   549                           ;tarti.c: 81: TXREG='p';
   550  0089  3070               	movlw	112
   551  008A                     L1:	
   552  008A  1283               	bcf	3,5	;RP0=0, select bank0
   553  008B  1303               	bcf	3,6	;RP1=0, select bank0
   554  008C  0099               	movwf	25	;volatile
   555                           
   556                           ;tarti.c: 89: measure_force();
   557                           
   558                           ;tarti.c: 82: while (1) {
   559  008D  2222               	fcall	_measure_force
   560                           
   561                           ;tarti.c: 91: for(int cnt=5; cnt<10; cnt++){
   562  008E  3005               	movlw	5
   563  008F  1283               	bcf	3,5	;RP0=0, select bank0
   564  0090  1303               	bcf	3,6	;RP1=0, select bank0
   565  0091  00C8               	movwf	main@cnt_335
   566  0092  3000               	movlw	0
   567  0093  00C9               	movwf	main@cnt_335+1
   568  0094  0849               	movf	main@cnt_335+1,w
   569  0095  3A80               	xorlw	128
   570  0096  00FF               	movwf	127
   571  0097  3080               	movlw	128
   572  0098  027F               	subwf	127,w
   573  0099  1D03               	skipz
   574  009A  289D               	goto	u1715
   575  009B  300A               	movlw	10
   576  009C  0248               	subwf	main@cnt_335,w
   577  009D                     u1715:	
   578  009D  1803               	btfsc	3,0
   579  009E  28D0               	goto	l88
   580  009F                     l1461:	
   581                           
   582                           ;tarti.c: 92: if(cnt==8){
   583  009F  3008               	movlw	8
   584  00A0  1283               	bcf	3,5	;RP0=0, select bank0
   585  00A1  1303               	bcf	3,6	;RP1=0, select bank0
   586  00A2  0648               	xorwf	main@cnt_335,w
   587  00A3  0449               	iorwf	main@cnt_335+1,w
   588  00A4  1903               	btfsc	3,2
   589  00A5  28D0               	goto	l88
   590  00A6                     l81:	
   591                           ;tarti.c: 94: }
   592                           ;tarti.c: 96: while(!TXSTAbits.TRMT);
   593                           
   594                           ;tarti.c: 93: break;
   595                           
   596  00A6  1683               	bsf	3,5	;RP0=1, select bank1
   597  00A7  1303               	bcf	3,6	;RP1=0, select bank1
   598  00A8  1C98               	btfss	24,1	;volatile
   599  00A9  28A6               	goto	l81
   600                           
   601                           ;tarti.c: 97: TXREG=(dec_array[cnt]);
   602  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   603  00AB  1303               	bcf	3,6	;RP1=0, select bank0
   604  00AC  0848               	movf	main@cnt_335,w
   605  00AD  3E4A               	addlw	(low (_dec_array| 0))& (0+255)
   606  00AE  0084               	movwf	4
   607  00AF  1383               	bcf	3,7	;select IRP bank0
   608  00B0  0800               	movf	0,w
   609  00B1  0099               	movwf	25	;volatile
   610                           
   611                           ;tarti.c: 98: if(cnt==5){
   612  00B2  3005               	movlw	5
   613  00B3  0648               	xorwf	main@cnt_335,w
   614  00B4  0449               	iorwf	main@cnt_335+1,w
   615  00B5  1D03               	btfss	3,2
   616  00B6  28BF               	goto	l84
   617  00B7                     l85:	
   618                           ;tarti.c: 99: while(!TXSTAbits.TRMT);
   619                           
   620  00B7  1683               	bsf	3,5	;RP0=1, select bank1
   621  00B8  1303               	bcf	3,6	;RP1=0, select bank1
   622  00B9  1C98               	btfss	24,1	;volatile
   623  00BA  28B7               	goto	l85
   624                           
   625                           ;tarti.c: 100: TXREG='.';
   626  00BB  302E               	movlw	46
   627  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   628  00BD  1303               	bcf	3,6	;RP1=0, select bank0
   629  00BE  0099               	movwf	25	;volatile
   630  00BF                     l84:	
   631  00BF  3001               	movlw	1
   632  00C0  07C8               	addwf	main@cnt_335,f
   633  00C1  1803               	skipnc
   634  00C2  0AC9               	incf	main@cnt_335+1,f
   635  00C3  3000               	movlw	0
   636  00C4  07C9               	addwf	main@cnt_335+1,f
   637  00C5  0849               	movf	main@cnt_335+1,w
   638  00C6  3A80               	xorlw	128
   639  00C7  00FF               	movwf	127
   640  00C8  3080               	movlw	128
   641  00C9  027F               	subwf	127,w
   642  00CA  1D03               	skipz
   643  00CB  28CE               	goto	u1765
   644  00CC  300A               	movlw	10
   645  00CD  0248               	subwf	main@cnt_335,w
   646  00CE                     u1765:	
   647  00CE  1C03               	skipc
   648  00CF  289F               	goto	l1461
   649  00D0                     l88:	
   650                           ;tarti.c: 101: }
   651                           ;tarti.c: 102: }
   652                           ;tarti.c: 103: while(!TXSTAbits.TRMT);
   653                           
   654  00D0  1683               	bsf	3,5	;RP0=1, select bank1
   655  00D1  1303               	bcf	3,6	;RP1=0, select bank1
   656  00D2  1C98               	btfss	24,1	;volatile
   657  00D3  28D0               	goto	l88
   658                           
   659                           ;tarti.c: 104: TXREG='\r';
   660  00D4  300D               	movlw	13
   661  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   662  00D6  1303               	bcf	3,6	;RP1=0, select bank0
   663  00D7  0099               	movwf	25	;volatile
   664  00D8                     l91:	
   665                           ;tarti.c: 105: while(!TXSTAbits.TRMT);
   666                           
   667  00D8  1683               	bsf	3,5	;RP0=1, select bank1
   668  00D9  1303               	bcf	3,6	;RP1=0, select bank1
   669  00DA  1C98               	btfss	24,1	;volatile
   670  00DB  28D8               	goto	l91
   671                           
   672                           ;tarti.c: 106: TXREG='\n';
   673  00DC  300A               	movlw	10
   674  00DD  288A               	goto	L1
   675  00DE                     __end_of_main:	
   676                           ;tarti.c: 110: }
   677                           ;tarti.c: 112: return;
   678                           
   679                           
   680                           	psect	text1
   681  04D5                     __ptext1:	
   682 ;; *************** function _tarti_init *****************
   683 ;; Defined at:
   684 ;;		line 170 in file "tarti.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		None
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   698 ;;      Params:         0       0       0       0
   699 ;;      Locals:         0       0       0       0
   700 ;;      Temps:          0       0       0       0
   701 ;;      Totals:         0       0       0       0
   702 ;;Total ram usage:        0 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    1
   705 ;; This function calls:
   706 ;;		Nothing
   707 ;; This function is called by:
   708 ;;		_main
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           
   713                           ;psect for function _tarti_init
   714  04D5                     _tarti_init:	
   715                           
   716                           ;tarti.c: 172: TRISAbits.TRISA0=0;
   717                           
   718                           ;incstack = 0
   719                           ; Regs used in _tarti_init: []
   720  04D5  1683               	bsf	3,5	;RP0=1, select bank1
   721  04D6  1303               	bcf	3,6	;RP1=0, select bank1
   722  04D7  1005               	bcf	5,0	;volatile
   723                           
   724                           ;tarti.c: 173: TRISAbits.TRISA3=1;
   725  04D8  1585               	bsf	5,3	;volatile
   726                           
   727                           ;tarti.c: 174: TRISAbits.TRISA4=0;
   728  04D9  1205               	bcf	5,4	;volatile
   729                           
   730                           ;tarti.c: 175: PORTAbits.RA0=0;
   731  04DA  1283               	bcf	3,5	;RP0=0, select bank0
   732  04DB  1303               	bcf	3,6	;RP1=0, select bank0
   733  04DC  1005               	bcf	5,0	;volatile
   734  04DD  0008               	return
   735  04DE                     __end_of_tarti_init:	
   736                           
   737                           	psect	text2
   738  02AE                     __ptext2:	
   739 ;; *************** function _set_offset *****************
   740 ;; Defined at:
   741 ;;		line 211 in file "tarti.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;		None
   744 ;; Auto vars:     Size  Location     Type
   745 ;;  i               2   29[BANK0 ] int 
   746 ;;  sum             4   31[BANK0 ] long 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   756 ;;      Params:         0       0       0       0
   757 ;;      Locals:         0       6       0       0
   758 ;;      Temps:          0       7       0       0
   759 ;;      Totals:         0      13       0       0
   760 ;;Total ram usage:       13 bytes
   761 ;; Hardware stack levels used:    1
   762 ;; Hardware stack levels required when called:    3
   763 ;; This function calls:
   764 ;;		___aldiv
   765 ;;		_read_tarti
   766 ;;		_write_dec
   767 ;; This function is called by:
   768 ;;		_main
   769 ;; This function uses a non-reentrant model
   770 ;;
   771                           
   772                           
   773                           ;psect for function _set_offset
   774  02AE                     _set_offset:	
   775                           
   776                           ;tarti.c: 212: int32_t sum=0;
   777                           
   778                           ;incstack = 0
   779                           ; Regs used in _set_offset: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   780  02AE  3000               	movlw	0
   781  02AF  1283               	bcf	3,5	;RP0=0, select bank0
   782  02B0  1303               	bcf	3,6	;RP1=0, select bank0
   783  02B1  00C2               	movwf	set_offset@sum+3
   784  02B2  3000               	movlw	0
   785  02B3  00C1               	movwf	set_offset@sum+2
   786  02B4  3000               	movlw	0
   787  02B5  00C0               	movwf	set_offset@sum+1
   788  02B6  3000               	movlw	0
   789  02B7  00BF               	movwf	set_offset@sum
   790                           
   791                           ;tarti.c: 213: for(int i=0;i<5;i++){
   792  02B8  01BD               	clrf	set_offset@i
   793  02B9  01BE               	clrf	set_offset@i+1
   794  02BA  083E               	movf	set_offset@i+1,w
   795  02BB  3A80               	xorlw	128
   796  02BC  00FF               	movwf	127
   797  02BD  3080               	movlw	128
   798  02BE  027F               	subwf	127,w
   799  02BF  1D03               	skipz
   800  02C0  2AC3               	goto	u1585
   801  02C1  3005               	movlw	5
   802  02C2  023D               	subwf	set_offset@i,w
   803  02C3                     u1585:	
   804  02C3  1803               	btfsc	3,0
   805  02C4  2B02               	goto	l1383
   806  02C5                     l1375:	
   807                           
   808                           ;tarti.c: 214: read_tarti();
   809  02C5  23AE               	fcall	_read_tarti
   810                           
   811                           ;tarti.c: 215: sum += -measure_val;
   812  02C6  1283               	bcf	3,5	;RP0=0, select bank0
   813  02C7  1303               	bcf	3,6	;RP1=0, select bank0
   814  02C8  095A               	comf	_measure_val,w
   815  02C9  00B6               	movwf	??_set_offset
   816  02CA  095B               	comf	_measure_val+1,w
   817  02CB  00B7               	movwf	??_set_offset+1
   818  02CC  095C               	comf	_measure_val+2,w
   819  02CD  00B8               	movwf	??_set_offset+2
   820  02CE  0AB6               	incf	??_set_offset,f
   821  02CF  1903               	skipnz
   822  02D0  0AB7               	incf	??_set_offset+1,f
   823  02D1  1903               	skipnz
   824  02D2  0AB8               	incf	??_set_offset+2,f
   825  02D3  0836               	movf	??_set_offset,w
   826  02D4  00B9               	movwf	??_set_offset+3
   827  02D5  0837               	movf	??_set_offset+1,w
   828  02D6  00BA               	movwf	??_set_offset+4
   829  02D7  0838               	movf	??_set_offset+2,w
   830  02D8  00BB               	movwf	??_set_offset+5
   831  02D9  3000               	movlw	0
   832  02DA  1BBB               	btfsc	??_set_offset+5,7
   833  02DB  30FF               	movlw	255
   834  02DC  00BC               	movwf	??_set_offset+6
   835  02DD  0839               	movf	??_set_offset+3,w
   836  02DE  07BF               	addwf	set_offset@sum,f
   837  02DF  083A               	movf	??_set_offset+4,w
   838  02E0  1103               	clrz
   839  02E1  1803               	skipnc
   840  02E2  3E01               	addlw	1
   841  02E3  1D03               	btfss	3,2
   842  02E4  07C0               	addwf	set_offset@sum+1,f
   843  02E5  083B               	movf	??_set_offset+5,w
   844  02E6  1103               	clrz
   845  02E7  1803               	skipnc
   846  02E8  3E01               	addlw	1
   847  02E9  1D03               	btfss	3,2
   848  02EA  07C1               	addwf	set_offset@sum+2,f
   849  02EB  083C               	movf	??_set_offset+6,w
   850  02EC  1103               	clrz
   851  02ED  1803               	skipnc
   852  02EE  3E01               	addlw	1
   853  02EF  1D03               	btfss	3,2
   854  02F0  07C2               	addwf	set_offset@sum+3,f
   855  02F1  3001               	movlw	1
   856  02F2  07BD               	addwf	set_offset@i,f
   857  02F3  1803               	skipnc
   858  02F4  0ABE               	incf	set_offset@i+1,f
   859  02F5  3000               	movlw	0
   860  02F6  07BE               	addwf	set_offset@i+1,f
   861  02F7  083E               	movf	set_offset@i+1,w
   862  02F8  3A80               	xorlw	128
   863  02F9  00FF               	movwf	127
   864  02FA  3080               	movlw	128
   865  02FB  027F               	subwf	127,w
   866  02FC  1D03               	skipz
   867  02FD  2B00               	goto	u1605
   868  02FE  3005               	movlw	5
   869  02FF  023D               	subwf	set_offset@i,w
   870  0300                     u1605:	
   871  0300  1C03               	skipc
   872  0301  2AC5               	goto	l1375
   873  0302                     l1383:	
   874                           
   875                           ;tarti.c: 216: }
   876                           ;tarti.c: 217: sum /= 5;
   877  0302  3000               	movlw	0
   878  0303  1283               	bcf	3,5	;RP0=0, select bank0
   879  0304  1303               	bcf	3,6	;RP1=0, select bank0
   880  0305  00A3               	movwf	___aldiv@divisor+3
   881  0306  3000               	movlw	0
   882  0307  00A2               	movwf	___aldiv@divisor+2
   883  0308  3000               	movlw	0
   884  0309  00A1               	movwf	___aldiv@divisor+1
   885  030A  3005               	movlw	5
   886  030B  00A0               	movwf	___aldiv@divisor
   887  030C  0842               	movf	set_offset@sum+3,w
   888  030D  00A7               	movwf	___aldiv@dividend+3
   889  030E  0841               	movf	set_offset@sum+2,w
   890  030F  00A6               	movwf	___aldiv@dividend+2
   891  0310  0840               	movf	set_offset@sum+1,w
   892  0311  00A5               	movwf	___aldiv@dividend+1
   893  0312  083F               	movf	set_offset@sum,w
   894  0313  00A4               	movwf	___aldiv@dividend
   895  0314  2193               	fcall	___aldiv
   896  0315  1283               	bcf	3,5	;RP0=0, select bank0
   897  0316  1303               	bcf	3,6	;RP1=0, select bank0
   898  0317  0823               	movf	?___aldiv+3,w
   899  0318  00C2               	movwf	set_offset@sum+3
   900  0319  0822               	movf	?___aldiv+2,w
   901  031A  00C1               	movwf	set_offset@sum+2
   902  031B  0821               	movf	?___aldiv+1,w
   903  031C  00C0               	movwf	set_offset@sum+1
   904  031D  0820               	movf	?___aldiv,w
   905  031E  00BF               	movwf	set_offset@sum
   906                           
   907                           ;tarti.c: 218: offset=sum;
   908  031F  083F               	movf	set_offset@sum,w
   909  0320  00D7               	movwf	_offset
   910  0321  0840               	movf	set_offset@sum+1,w
   911  0322  00D8               	movwf	_offset+1
   912  0323  0841               	movf	set_offset@sum+2,w
   913  0324  00D9               	movwf	_offset+2
   914                           
   915                           ;tarti.c: 219: write_dec(offset);
   916  0325  0857               	movf	_offset,w
   917  0326  00AF               	movwf	write_dec@value
   918  0327  0858               	movf	_offset+1,w
   919  0328  00B0               	movwf	write_dec@value+1
   920  0329  0859               	movf	_offset+2,w
   921  032A  00B1               	movwf	write_dec@value+2
   922  032B  00B6               	movwf	??_set_offset
   923  032C  0D36               	rlf	??_set_offset,w
   924  032D  00B6               	movwf	??_set_offset
   925  032E  1C03               	skipc
   926  032F  03B6               	decf	??_set_offset,f
   927  0330  02B6               	subwf	??_set_offset,f
   928  0331  0936               	comf	??_set_offset,w
   929  0332  00B2               	movwf	write_dec@value+3
   930  0333  20DE               	fcall	_write_dec
   931  0334  0008               	return
   932  0335                     __end_of_set_offset:	
   933                           
   934                           	psect	text3
   935  04B3                     __ptext3:	
   936 ;; *************** function _serial_init *****************
   937 ;; Defined at:
   938 ;;		line 129 in file "tarti.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   952 ;;      Params:         0       0       0       0
   953 ;;      Locals:         0       0       0       0
   954 ;;      Temps:          0       0       0       0
   955 ;;      Totals:         0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; Hardware stack levels required when called:    1
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_main
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           
   967                           ;psect for function _serial_init
   968  04B3                     _serial_init:	
   969                           
   970                           ;tarti.c: 130: TXSTAbits.TX9=0;
   971                           
   972                           ;incstack = 0
   973                           ; Regs used in _serial_init: [wreg]
   974  04B3  1683               	bsf	3,5	;RP0=1, select bank1
   975  04B4  1303               	bcf	3,6	;RP1=0, select bank1
   976  04B5  1318               	bcf	24,6	;volatile
   977                           
   978                           ;tarti.c: 131: TXSTAbits.TXEN=1;
   979  04B6  1698               	bsf	24,5	;volatile
   980                           
   981                           ;tarti.c: 132: TXSTAbits.SYNC=0;
   982  04B7  1218               	bcf	24,4	;volatile
   983                           
   984                           ;tarti.c: 133: TXSTAbits.BRGH=1;
   985  04B8  1518               	bsf	24,2	;volatile
   986                           
   987                           ;tarti.c: 135: RCSTAbits.SPEN=1;
   988  04B9  1283               	bcf	3,5	;RP0=0, select bank0
   989  04BA  1303               	bcf	3,6	;RP1=0, select bank0
   990  04BB  1798               	bsf	24,7	;volatile
   991                           
   992                           ;tarti.c: 136: RCSTAbits.RX9=0;
   993  04BC  1318               	bcf	24,6	;volatile
   994                           
   995                           ;tarti.c: 137: RCSTAbits.CREN=1;
   996  04BD  1618               	bsf	24,4	;volatile
   997                           
   998                           ;tarti.c: 139: TRISBbits.TRISB1=1;
   999  04BE  1683               	bsf	3,5	;RP0=1, select bank1
  1000  04BF  1303               	bcf	3,6	;RP1=0, select bank1
  1001  04C0  1486               	bsf	6,1	;volatile
  1002                           
  1003                           ;tarti.c: 140: TRISBbits.TRISB2=1;
  1004  04C1  1506               	bsf	6,2	;volatile
  1005                           
  1006                           ;tarti.c: 142: PIE1bits.RCIE=1;
  1007  04C2  168C               	bsf	12,5	;volatile
  1008                           
  1009                           ;tarti.c: 143: SPBRG=129;
  1010  04C3  3081               	movlw	129
  1011  04C4  0099               	movwf	25	;volatile
  1012                           
  1013                           ;tarti.c: 145: PIR1bits.RCIF=0;
  1014  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  1015  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  1016  04C7  128C               	bcf	12,5	;volatile
  1017  04C8  0008               	return
  1018  04C9                     __end_of_serial_init:	
  1019                           
  1020                           	psect	text4
  1021  0222                     __ptext4:	
  1022 ;; *************** function _measure_force *****************
  1023 ;; Defined at:
  1024 ;;		line 222 in file "tarti.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  i               2   26[BANK0 ] int 
  1029 ;;  sum             4   28[BANK0 ] long 
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      void 
  1032 ;; Registers used:
  1033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1039 ;;      Params:         0       0       0       0
  1040 ;;      Locals:         0       6       0       0
  1041 ;;      Temps:          0       4       0       0
  1042 ;;      Totals:         0      10       0       0
  1043 ;;Total ram usage:       10 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; Hardware stack levels required when called:    3
  1046 ;; This function calls:
  1047 ;;		___aldiv
  1048 ;;		_read_tarti
  1049 ;;		_write_dec
  1050 ;; This function is called by:
  1051 ;;		_main
  1052 ;; This function uses a non-reentrant model
  1053 ;;
  1054                           
  1055                           
  1056                           ;psect for function _measure_force
  1057  0222                     _measure_force:	
  1058                           
  1059                           ;tarti.c: 223: int32_t sum=0;
  1060                           
  1061                           ;incstack = 0
  1062                           ; Regs used in _measure_force: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1063  0222  3000               	movlw	0
  1064  0223  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0224  1303               	bcf	3,6	;RP1=0, select bank0
  1066  0225  00BF               	movwf	measure_force@sum+3
  1067  0226  3000               	movlw	0
  1068  0227  00BE               	movwf	measure_force@sum+2
  1069  0228  3000               	movlw	0
  1070  0229  00BD               	movwf	measure_force@sum+1
  1071  022A  3000               	movlw	0
  1072  022B  00BC               	movwf	measure_force@sum
  1073                           
  1074                           ;tarti.c: 224: for(int i=0;i<5;i++){
  1075  022C  01BA               	clrf	measure_force@i
  1076  022D  01BB               	clrf	measure_force@i+1
  1077  022E  083B               	movf	measure_force@i+1,w
  1078  022F  3A80               	xorlw	128
  1079  0230  00FF               	movwf	127
  1080  0231  3080               	movlw	128
  1081  0232  027F               	subwf	127,w
  1082  0233  1D03               	skipz
  1083  0234  2A37               	goto	u1615
  1084  0235  3005               	movlw	5
  1085  0236  023A               	subwf	measure_force@i,w
  1086  0237                     u1615:	
  1087  0237  1803               	btfsc	3,0
  1088  0238  2A6B               	goto	l1405
  1089  0239                     l1397:	
  1090                           
  1091                           ;tarti.c: 225: read_tarti();
  1092  0239  23AE               	fcall	_read_tarti
  1093                           
  1094                           ;tarti.c: 227: sum += measure_val;
  1095  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1096  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1097  023C  085A               	movf	_measure_val,w
  1098  023D  00B6               	movwf	??_measure_force
  1099  023E  085B               	movf	_measure_val+1,w
  1100  023F  00B7               	movwf	??_measure_force+1
  1101  0240  085C               	movf	_measure_val+2,w
  1102  0241  00B8               	movwf	??_measure_force+2
  1103  0242  3000               	movlw	0
  1104  0243  1BB8               	btfsc	??_measure_force+2,7
  1105  0244  30FF               	movlw	255
  1106  0245  00B9               	movwf	??_measure_force+3
  1107  0246  0836               	movf	??_measure_force,w
  1108  0247  07BC               	addwf	measure_force@sum,f
  1109  0248  0837               	movf	??_measure_force+1,w
  1110  0249  1103               	clrz
  1111  024A  1803               	skipnc
  1112  024B  3E01               	addlw	1
  1113  024C  1D03               	btfss	3,2
  1114  024D  07BD               	addwf	measure_force@sum+1,f
  1115  024E  0838               	movf	??_measure_force+2,w
  1116  024F  1103               	clrz
  1117  0250  1803               	skipnc
  1118  0251  3E01               	addlw	1
  1119  0252  1D03               	btfss	3,2
  1120  0253  07BE               	addwf	measure_force@sum+2,f
  1121  0254  0839               	movf	??_measure_force+3,w
  1122  0255  1103               	clrz
  1123  0256  1803               	skipnc
  1124  0257  3E01               	addlw	1
  1125  0258  1D03               	btfss	3,2
  1126  0259  07BF               	addwf	measure_force@sum+3,f
  1127  025A  3001               	movlw	1
  1128  025B  07BA               	addwf	measure_force@i,f
  1129  025C  1803               	skipnc
  1130  025D  0ABB               	incf	measure_force@i+1,f
  1131  025E  3000               	movlw	0
  1132  025F  07BB               	addwf	measure_force@i+1,f
  1133  0260  083B               	movf	measure_force@i+1,w
  1134  0261  3A80               	xorlw	128
  1135  0262  00FF               	movwf	127
  1136  0263  3080               	movlw	128
  1137  0264  027F               	subwf	127,w
  1138  0265  1D03               	skipz
  1139  0266  2A69               	goto	u1635
  1140  0267  3005               	movlw	5
  1141  0268  023A               	subwf	measure_force@i,w
  1142  0269                     u1635:	
  1143  0269  1C03               	skipc
  1144  026A  2A39               	goto	l1397
  1145  026B                     l1405:	
  1146                           
  1147                           ;tarti.c: 228: }
  1148                           ;tarti.c: 229: sum /=5;
  1149  026B  3000               	movlw	0
  1150  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1151  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1152  026E  00A3               	movwf	___aldiv@divisor+3
  1153  026F  3000               	movlw	0
  1154  0270  00A2               	movwf	___aldiv@divisor+2
  1155  0271  3000               	movlw	0
  1156  0272  00A1               	movwf	___aldiv@divisor+1
  1157  0273  3005               	movlw	5
  1158  0274  00A0               	movwf	___aldiv@divisor
  1159  0275  083F               	movf	measure_force@sum+3,w
  1160  0276  00A7               	movwf	___aldiv@dividend+3
  1161  0277  083E               	movf	measure_force@sum+2,w
  1162  0278  00A6               	movwf	___aldiv@dividend+2
  1163  0279  083D               	movf	measure_force@sum+1,w
  1164  027A  00A5               	movwf	___aldiv@dividend+1
  1165  027B  083C               	movf	measure_force@sum,w
  1166  027C  00A4               	movwf	___aldiv@dividend
  1167  027D  2193               	fcall	___aldiv
  1168  027E  1283               	bcf	3,5	;RP0=0, select bank0
  1169  027F  1303               	bcf	3,6	;RP1=0, select bank0
  1170  0280  0823               	movf	?___aldiv+3,w
  1171  0281  00BF               	movwf	measure_force@sum+3
  1172  0282  0822               	movf	?___aldiv+2,w
  1173  0283  00BE               	movwf	measure_force@sum+2
  1174  0284  0821               	movf	?___aldiv+1,w
  1175  0285  00BD               	movwf	measure_force@sum+1
  1176  0286  0820               	movf	?___aldiv,w
  1177  0287  00BC               	movwf	measure_force@sum
  1178                           
  1179                           ;tarti.c: 230: force=sum + offset;
  1180  0288  0857               	movf	_offset,w
  1181  0289  073C               	addwf	measure_force@sum,w
  1182  028A  00B6               	movwf	??_measure_force
  1183  028B  083D               	movf	measure_force@sum+1,w
  1184  028C  00B7               	movwf	??_measure_force+1
  1185  028D  0858               	movf	_offset+1,w
  1186  028E  1803               	skipnc
  1187  028F  0A58               	incf	_offset+1,w
  1188  0290  1D03               	btfss	3,2
  1189  0291  07B7               	addwf	??_measure_force+1,f
  1190  0292  083E               	movf	measure_force@sum+2,w
  1191  0293  00B8               	movwf	??_measure_force+2
  1192  0294  0859               	movf	_offset+2,w
  1193  0295  1803               	skipnc
  1194  0296  0A59               	incf	_offset+2,w
  1195  0297  07B8               	addwf	??_measure_force+2,f
  1196  0298  0836               	movf	??_measure_force,w
  1197  0299  00D4               	movwf	_force
  1198  029A  0837               	movf	??_measure_force+1,w
  1199  029B  00D5               	movwf	_force+1
  1200  029C  0838               	movf	??_measure_force+2,w
  1201  029D  00D6               	movwf	_force+2
  1202                           
  1203                           ;tarti.c: 231: write_dec(force);
  1204  029E  0854               	movf	_force,w
  1205  029F  00AF               	movwf	write_dec@value
  1206  02A0  0855               	movf	_force+1,w
  1207  02A1  00B0               	movwf	write_dec@value+1
  1208  02A2  0856               	movf	_force+2,w
  1209  02A3  00B1               	movwf	write_dec@value+2
  1210  02A4  00B6               	movwf	??_measure_force
  1211  02A5  0D36               	rlf	??_measure_force,w
  1212  02A6  00B6               	movwf	??_measure_force
  1213  02A7  1C03               	skipc
  1214  02A8  03B6               	decf	??_measure_force,f
  1215  02A9  02B6               	subwf	??_measure_force,f
  1216  02AA  0936               	comf	??_measure_force,w
  1217  02AB  00B2               	movwf	write_dec@value+3
  1218  02AC  20DE               	fcall	_write_dec
  1219  02AD  0008               	return
  1220  02AE                     __end_of_measure_force:	
  1221                           
  1222                           	psect	text5
  1223  00DE                     __ptext5:	
  1224 ;; *************** function _write_dec *****************
  1225 ;; Defined at:
  1226 ;;		line 263 in file "tarti.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  value           4   15[BANK0 ] long 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;  i               2   20[BANK0 ] int 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1240 ;;      Params:         0       4       0       0
  1241 ;;      Locals:         0       2       0       0
  1242 ;;      Temps:          0       1       0       0
  1243 ;;      Totals:         0       7       0       0
  1244 ;;Total ram usage:        7 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    2
  1247 ;; This function calls:
  1248 ;;		___aldiv
  1249 ;;		___almod
  1250 ;;		___lmul
  1251 ;; This function is called by:
  1252 ;;		_set_offset
  1253 ;;		_measure_force
  1254 ;;		_bin_to_dec
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _write_dec
  1260  00DE                     _write_dec:	
  1261                           
  1262                           ;tarti.c: 264: int i=0;
  1263                           
  1264                           ;incstack = 0
  1265                           ; Regs used in _write_dec: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1266  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1267  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  1268  00E0  01B4               	clrf	write_dec@i
  1269  00E1  01B5               	clrf	write_dec@i+1
  1270                           
  1271                           ;tarti.c: 265: value *=22;
  1272  00E2  3000               	movlw	0
  1273  00E3  00A3               	movwf	___lmul@multiplier+3
  1274  00E4  3000               	movlw	0
  1275  00E5  00A2               	movwf	___lmul@multiplier+2
  1276  00E6  3000               	movlw	0
  1277  00E7  00A1               	movwf	___lmul@multiplier+1
  1278  00E8  3016               	movlw	22
  1279  00E9  00A0               	movwf	___lmul@multiplier
  1280  00EA  0832               	movf	write_dec@value+3,w
  1281  00EB  00A7               	movwf	___lmul@multiplicand+3
  1282  00EC  0831               	movf	write_dec@value+2,w
  1283  00ED  00A6               	movwf	___lmul@multiplicand+2
  1284  00EE  0830               	movf	write_dec@value+1,w
  1285  00EF  00A5               	movwf	___lmul@multiplicand+1
  1286  00F0  082F               	movf	write_dec@value,w
  1287  00F1  00A4               	movwf	___lmul@multiplicand
  1288  00F2  2472               	fcall	___lmul
  1289  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1290  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1291  00F5  0823               	movf	?___lmul+3,w
  1292  00F6  00B2               	movwf	write_dec@value+3
  1293  00F7  0822               	movf	?___lmul+2,w
  1294  00F8  00B1               	movwf	write_dec@value+2
  1295  00F9  0821               	movf	?___lmul+1,w
  1296  00FA  00B0               	movwf	write_dec@value+1
  1297  00FB  0820               	movf	?___lmul,w
  1298  00FC  00AF               	movwf	write_dec@value
  1299                           
  1300                           ;tarti.c: 266: value /=10000;
  1301  00FD  3000               	movlw	0
  1302  00FE  00A3               	movwf	___aldiv@divisor+3
  1303  00FF  3000               	movlw	0
  1304  0100  00A2               	movwf	___aldiv@divisor+2
  1305  0101  3027               	movlw	39
  1306  0102  00A1               	movwf	___aldiv@divisor+1
  1307  0103  3010               	movlw	16
  1308  0104  00A0               	movwf	___aldiv@divisor
  1309  0105  0832               	movf	write_dec@value+3,w
  1310  0106  00A7               	movwf	___aldiv@dividend+3
  1311  0107  0831               	movf	write_dec@value+2,w
  1312  0108  00A6               	movwf	___aldiv@dividend+2
  1313  0109  0830               	movf	write_dec@value+1,w
  1314  010A  00A5               	movwf	___aldiv@dividend+1
  1315  010B  082F               	movf	write_dec@value,w
  1316  010C  00A4               	movwf	___aldiv@dividend
  1317  010D  2193               	fcall	___aldiv
  1318  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1319  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1320  0110  0823               	movf	?___aldiv+3,w
  1321  0111  00B2               	movwf	write_dec@value+3
  1322  0112  0822               	movf	?___aldiv+2,w
  1323  0113  00B1               	movwf	write_dec@value+2
  1324  0114  0821               	movf	?___aldiv+1,w
  1325  0115  00B0               	movwf	write_dec@value+1
  1326  0116  0820               	movf	?___aldiv,w
  1327  0117  00AF               	movwf	write_dec@value
  1328                           
  1329                           ;tarti.c: 267: if(value < 0)
  1330  0118  1FB2               	btfss	write_dec@value+3,7
  1331  0119  292A               	goto	l1343
  1332                           
  1333                           ;tarti.c: 268: {
  1334                           ;tarti.c: 269: dec_array[0] = '-';
  1335  011A  302D               	movlw	45
  1336  011B  00B3               	movwf	??_write_dec
  1337  011C  0833               	movf	??_write_dec,w
  1338  011D  00CA               	movwf	_dec_array
  1339                           
  1340                           ;tarti.c: 270: value = -value;
  1341  011E  09AF               	comf	write_dec@value,f
  1342  011F  09B0               	comf	write_dec@value+1,f
  1343  0120  09B1               	comf	write_dec@value+2,f
  1344  0121  09B2               	comf	write_dec@value+3,f
  1345  0122  0AAF               	incf	write_dec@value,f
  1346  0123  1903               	skipnz
  1347  0124  0AB0               	incf	write_dec@value+1,f
  1348  0125  1903               	skipnz
  1349  0126  0AB1               	incf	write_dec@value+2,f
  1350  0127  1903               	skipnz
  1351  0128  0AB2               	incf	write_dec@value+3,f
  1352                           
  1353                           ;tarti.c: 271: }
  1354  0129  292E               	goto	l1345
  1355  012A                     l1343:	
  1356                           
  1357                           ;tarti.c: 272: else
  1358                           ;tarti.c: 273: dec_array[0] = '+';
  1359  012A  302B               	movlw	43
  1360  012B  00B3               	movwf	??_write_dec
  1361  012C  0833               	movf	??_write_dec,w
  1362  012D  00CA               	movwf	_dec_array
  1363  012E                     l1345:	
  1364                           
  1365                           ;tarti.c: 275: dec_array[10 - 1] = (0);
  1366  012E  01D3               	clrf	_dec_array+9
  1367                           
  1368                           ;tarti.c: 276: i=10 - 2;
  1369  012F  3008               	movlw	8
  1370  0130  00B4               	movwf	write_dec@i
  1371  0131  3000               	movlw	0
  1372  0132  00B5               	movwf	write_dec@i+1
  1373  0133                     l1355:	
  1374                           ;tarti.c: 278: while(value){
  1375                           
  1376  0133  0832               	movf	write_dec@value+3,w
  1377  0134  0431               	iorwf	write_dec@value+2,w
  1378  0135  0430               	iorwf	write_dec@value+1,w
  1379  0136  042F               	iorwf	write_dec@value,w
  1380  0137  1903               	btfsc	3,2
  1381  0138  2977               	goto	l1357
  1382                           
  1383                           ;tarti.c: 279: dec_array[i--]= value%10 + '0';
  1384  0139  3000               	movlw	0
  1385  013A  00A3               	movwf	___almod@divisor+3
  1386  013B  3000               	movlw	0
  1387  013C  00A2               	movwf	___almod@divisor+2
  1388  013D  3000               	movlw	0
  1389  013E  00A1               	movwf	___almod@divisor+1
  1390  013F  300A               	movlw	10
  1391  0140  00A0               	movwf	___almod@divisor
  1392  0141  0832               	movf	write_dec@value+3,w
  1393  0142  00A7               	movwf	___almod@dividend+3
  1394  0143  0831               	movf	write_dec@value+2,w
  1395  0144  00A6               	movwf	___almod@dividend+2
  1396  0145  0830               	movf	write_dec@value+1,w
  1397  0146  00A5               	movwf	___almod@dividend+1
  1398  0147  082F               	movf	write_dec@value,w
  1399  0148  00A4               	movwf	___almod@dividend
  1400  0149  2335               	fcall	___almod
  1401  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1402  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1403  014C  0820               	movf	?___almod,w
  1404  014D  3E30               	addlw	48
  1405  014E  00B3               	movwf	??_write_dec
  1406  014F  0834               	movf	write_dec@i,w
  1407  0150  3E4A               	addlw	(low (_dec_array| 0))& (0+255)
  1408  0151  0084               	movwf	4
  1409  0152  0833               	movf	??_write_dec,w
  1410  0153  1383               	bcf	3,7	;select IRP bank0
  1411  0154  0080               	movwf	0
  1412  0155  30FF               	movlw	255
  1413  0156  07B4               	addwf	write_dec@i,f
  1414  0157  1803               	skipnc
  1415  0158  0AB5               	incf	write_dec@i+1,f
  1416  0159  30FF               	movlw	255
  1417  015A  07B5               	addwf	write_dec@i+1,f
  1418                           
  1419                           ;tarti.c: 280: value /= 10;
  1420  015B  3000               	movlw	0
  1421  015C  00A3               	movwf	___aldiv@divisor+3
  1422  015D  3000               	movlw	0
  1423  015E  00A2               	movwf	___aldiv@divisor+2
  1424  015F  3000               	movlw	0
  1425  0160  00A1               	movwf	___aldiv@divisor+1
  1426  0161  300A               	movlw	10
  1427  0162  00A0               	movwf	___aldiv@divisor
  1428  0163  0832               	movf	write_dec@value+3,w
  1429  0164  00A7               	movwf	___aldiv@dividend+3
  1430  0165  0831               	movf	write_dec@value+2,w
  1431  0166  00A6               	movwf	___aldiv@dividend+2
  1432  0167  0830               	movf	write_dec@value+1,w
  1433  0168  00A5               	movwf	___aldiv@dividend+1
  1434  0169  082F               	movf	write_dec@value,w
  1435  016A  00A4               	movwf	___aldiv@dividend
  1436  016B  2193               	fcall	___aldiv
  1437  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1438  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1439  016E  0823               	movf	?___aldiv+3,w
  1440  016F  00B2               	movwf	write_dec@value+3
  1441  0170  0822               	movf	?___aldiv+2,w
  1442  0171  00B1               	movwf	write_dec@value+2
  1443  0172  0821               	movf	?___aldiv+1,w
  1444  0173  00B0               	movwf	write_dec@value+1
  1445  0174  0820               	movf	?___aldiv,w
  1446  0175  00AF               	movwf	write_dec@value
  1447  0176  2933               	goto	l1355
  1448  0177                     l1357:	
  1449                           
  1450                           ;tarti.c: 281: }
  1451                           ;tarti.c: 283: for(;i>0;i--)
  1452  0177  0835               	movf	write_dec@i+1,w
  1453  0178  3A80               	xorlw	128
  1454  0179  00FF               	movwf	127
  1455  017A  3080               	movlw	128
  1456  017B  027F               	subwf	127,w
  1457  017C  1D03               	skipz
  1458  017D  2980               	goto	u1565
  1459  017E  3001               	movlw	1
  1460  017F  0234               	subwf	write_dec@i,w
  1461  0180                     u1565:	
  1462  0180  1C03               	btfss	3,0
  1463  0181  0008               	return
  1464                           
  1465                           ;tarti.c: 284: dec_array[i] = '0';
  1466  0182  3030               	movlw	48
  1467  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1468  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1469  0185  00B3               	movwf	??_write_dec
  1470  0186  0834               	movf	write_dec@i,w
  1471  0187  3E4A               	addlw	(low (_dec_array| 0))& (0+255)
  1472  0188  0084               	movwf	4
  1473  0189  0833               	movf	??_write_dec,w
  1474  018A  1383               	bcf	3,7	;select IRP bank0
  1475  018B  0080               	movwf	0
  1476  018C  30FF               	movlw	255
  1477  018D  07B4               	addwf	write_dec@i,f
  1478  018E  1803               	skipnc
  1479  018F  0AB5               	incf	write_dec@i+1,f
  1480  0190  30FF               	movlw	255
  1481  0191  07B5               	addwf	write_dec@i+1,f
  1482  0192  2977               	goto	l1357
  1483  0193                     __end_of_write_dec:	
  1484                           
  1485                           	psect	text6
  1486  0472                     __ptext6:	
  1487 ;; *************** function ___lmul *****************
  1488 ;; Defined at:
  1489 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  multiplier      4    0[BANK0 ] unsigned long 
  1492 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  product         4    9[BANK0 ] unsigned long 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  4    0[BANK0 ] unsigned long 
  1497 ;; Registers used:
  1498 ;;		wreg, status,2, status,0
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1504 ;;      Params:         0       8       0       0
  1505 ;;      Locals:         0       4       0       0
  1506 ;;      Temps:          0       1       0       0
  1507 ;;      Totals:         0      13       0       0
  1508 ;;Total ram usage:       13 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    1
  1511 ;; This function calls:
  1512 ;;		Nothing
  1513 ;; This function is called by:
  1514 ;;		_write_dec
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function ___lmul
  1520  0472                     ___lmul:	
  1521                           
  1522                           ;incstack = 0
  1523                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1524  0472  3000               	movlw	0
  1525  0473  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0474  1303               	bcf	3,6	;RP1=0, select bank0
  1527  0475  00AC               	movwf	___lmul@product+3
  1528  0476  3000               	movlw	0
  1529  0477  00AB               	movwf	___lmul@product+2
  1530  0478  3000               	movlw	0
  1531  0479  00AA               	movwf	___lmul@product+1
  1532  047A  3000               	movlw	0
  1533  047B  00A9               	movwf	___lmul@product
  1534  047C                     l1215:	
  1535  047C  1C20               	btfss	___lmul@multiplier,0
  1536  047D  2C92               	goto	l1219
  1537  047E  0824               	movf	___lmul@multiplicand,w
  1538  047F  07A9               	addwf	___lmul@product,f
  1539  0480  0825               	movf	___lmul@multiplicand+1,w
  1540  0481  1103               	clrz
  1541  0482  1803               	skipnc
  1542  0483  3E01               	addlw	1
  1543  0484  1D03               	btfss	3,2
  1544  0485  07AA               	addwf	___lmul@product+1,f
  1545  0486  0826               	movf	___lmul@multiplicand+2,w
  1546  0487  1103               	clrz
  1547  0488  1803               	skipnc
  1548  0489  3E01               	addlw	1
  1549  048A  1D03               	btfss	3,2
  1550  048B  07AB               	addwf	___lmul@product+2,f
  1551  048C  0827               	movf	___lmul@multiplicand+3,w
  1552  048D  1103               	clrz
  1553  048E  1803               	skipnc
  1554  048F  3E01               	addlw	1
  1555  0490  1D03               	btfss	3,2
  1556  0491  07AC               	addwf	___lmul@product+3,f
  1557  0492                     l1219:	
  1558  0492  3001               	movlw	1
  1559  0493  00A8               	movwf	??___lmul
  1560  0494                     u1255:	
  1561  0494  1003               	clrc
  1562  0495  0DA4               	rlf	___lmul@multiplicand,f
  1563  0496  0DA5               	rlf	___lmul@multiplicand+1,f
  1564  0497  0DA6               	rlf	___lmul@multiplicand+2,f
  1565  0498  0DA7               	rlf	___lmul@multiplicand+3,f
  1566  0499  0BA8               	decfsz	??___lmul,f
  1567  049A  2C94               	goto	u1255
  1568  049B  3001               	movlw	1
  1569  049C                     u1265:	
  1570  049C  1003               	clrc
  1571  049D  0CA3               	rrf	___lmul@multiplier+3,f
  1572  049E  0CA2               	rrf	___lmul@multiplier+2,f
  1573  049F  0CA1               	rrf	___lmul@multiplier+1,f
  1574  04A0  0CA0               	rrf	___lmul@multiplier,f
  1575  04A1  3EFF               	addlw	-1
  1576  04A2  1D03               	skipz
  1577  04A3  2C9C               	goto	u1265
  1578  04A4  0823               	movf	___lmul@multiplier+3,w
  1579  04A5  0422               	iorwf	___lmul@multiplier+2,w
  1580  04A6  0421               	iorwf	___lmul@multiplier+1,w
  1581  04A7  0420               	iorwf	___lmul@multiplier,w
  1582  04A8  1D03               	skipz
  1583  04A9  2C7C               	goto	l1215
  1584  04AA  082C               	movf	___lmul@product+3,w
  1585  04AB  00A3               	movwf	?___lmul+3
  1586  04AC  082B               	movf	___lmul@product+2,w
  1587  04AD  00A2               	movwf	?___lmul+2
  1588  04AE  082A               	movf	___lmul@product+1,w
  1589  04AF  00A1               	movwf	?___lmul+1
  1590  04B0  0829               	movf	___lmul@product,w
  1591  04B1  00A0               	movwf	?___lmul
  1592  04B2  0008               	return
  1593  04B3                     __end_of___lmul:	
  1594                           
  1595                           	psect	text7
  1596  0335                     __ptext7:	
  1597 ;; *************** function ___almod *****************
  1598 ;; Defined at:
  1599 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\almod.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;  divisor         4    0[BANK0 ] long 
  1602 ;;  dividend        4    4[BANK0 ] long 
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  sign            1   10[BANK0 ] unsigned char 
  1605 ;;  counter         1    9[BANK0 ] unsigned char 
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  4    0[BANK0 ] long 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, status,0
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1615 ;;      Params:         0       8       0       0
  1616 ;;      Locals:         0       2       0       0
  1617 ;;      Temps:          0       1       0       0
  1618 ;;      Totals:         0      11       0       0
  1619 ;;Total ram usage:       11 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    1
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_write_dec
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function ___almod
  1631  0335                     ___almod:	
  1632                           
  1633                           ;incstack = 0
  1634                           ; Regs used in ___almod: [wreg+status,2+status,0]
  1635  0335  1283               	bcf	3,5	;RP0=0, select bank0
  1636  0336  1303               	bcf	3,6	;RP1=0, select bank0
  1637  0337  01AA               	clrf	___almod@sign
  1638  0338  1FA7               	btfss	___almod@dividend+3,7
  1639  0339  2B47               	goto	l305
  1640  033A  09A4               	comf	___almod@dividend,f
  1641  033B  09A5               	comf	___almod@dividend+1,f
  1642  033C  09A6               	comf	___almod@dividend+2,f
  1643  033D  09A7               	comf	___almod@dividend+3,f
  1644  033E  0AA4               	incf	___almod@dividend,f
  1645  033F  1903               	skipnz
  1646  0340  0AA5               	incf	___almod@dividend+1,f
  1647  0341  1903               	skipnz
  1648  0342  0AA6               	incf	___almod@dividend+2,f
  1649  0343  1903               	skipnz
  1650  0344  0AA7               	incf	___almod@dividend+3,f
  1651  0345  01AA               	clrf	___almod@sign
  1652  0346  0AAA               	incf	___almod@sign,f
  1653  0347                     l305:	
  1654  0347  1FA3               	btfss	___almod@divisor+3,7
  1655  0348  2B54               	goto	l1275
  1656  0349  09A0               	comf	___almod@divisor,f
  1657  034A  09A1               	comf	___almod@divisor+1,f
  1658  034B  09A2               	comf	___almod@divisor+2,f
  1659  034C  09A3               	comf	___almod@divisor+3,f
  1660  034D  0AA0               	incf	___almod@divisor,f
  1661  034E  1903               	skipnz
  1662  034F  0AA1               	incf	___almod@divisor+1,f
  1663  0350  1903               	skipnz
  1664  0351  0AA2               	incf	___almod@divisor+2,f
  1665  0352  1903               	skipnz
  1666  0353  0AA3               	incf	___almod@divisor+3,f
  1667  0354                     l1275:	
  1668  0354  0823               	movf	___almod@divisor+3,w
  1669  0355  0422               	iorwf	___almod@divisor+2,w
  1670  0356  0421               	iorwf	___almod@divisor+1,w
  1671  0357  0420               	iorwf	___almod@divisor,w
  1672  0358  1903               	skipnz
  1673  0359  2B97               	goto	l1291
  1674  035A  01A9               	clrf	___almod@counter
  1675  035B  0AA9               	incf	___almod@counter,f
  1676  035C                     l1281:	
  1677  035C  1BA3               	btfsc	___almod@divisor+3,7
  1678  035D  2B6C               	goto	l1283
  1679  035E  3001               	movlw	1
  1680  035F  00A8               	movwf	??___almod
  1681  0360                     u1415:	
  1682  0360  1003               	clrc
  1683  0361  0DA0               	rlf	___almod@divisor,f
  1684  0362  0DA1               	rlf	___almod@divisor+1,f
  1685  0363  0DA2               	rlf	___almod@divisor+2,f
  1686  0364  0DA3               	rlf	___almod@divisor+3,f
  1687  0365  0BA8               	decfsz	??___almod,f
  1688  0366  2B60               	goto	u1415
  1689  0367  3001               	movlw	1
  1690  0368  00A8               	movwf	??___almod
  1691  0369  0828               	movf	??___almod,w
  1692  036A  07A9               	addwf	___almod@counter,f
  1693  036B  2B5C               	goto	l1281
  1694  036C                     l1283:	
  1695  036C  0823               	movf	___almod@divisor+3,w
  1696  036D  0227               	subwf	___almod@dividend+3,w
  1697  036E  1D03               	skipz
  1698  036F  2B7A               	goto	u1435
  1699  0370  0822               	movf	___almod@divisor+2,w
  1700  0371  0226               	subwf	___almod@dividend+2,w
  1701  0372  1D03               	skipz
  1702  0373  2B7A               	goto	u1435
  1703  0374  0821               	movf	___almod@divisor+1,w
  1704  0375  0225               	subwf	___almod@dividend+1,w
  1705  0376  1D03               	skipz
  1706  0377  2B7A               	goto	u1435
  1707  0378  0820               	movf	___almod@divisor,w
  1708  0379  0224               	subwf	___almod@dividend,w
  1709  037A                     u1435:	
  1710  037A  1C03               	skipc
  1711  037B  2B8A               	goto	l1287
  1712  037C  0820               	movf	___almod@divisor,w
  1713  037D  02A4               	subwf	___almod@dividend,f
  1714  037E  0821               	movf	___almod@divisor+1,w
  1715  037F  1C03               	skipc
  1716  0380  0F21               	incfsz	___almod@divisor+1,w
  1717  0381  02A5               	subwf	___almod@dividend+1,f
  1718  0382  0822               	movf	___almod@divisor+2,w
  1719  0383  1C03               	skipc
  1720  0384  0F22               	incfsz	___almod@divisor+2,w
  1721  0385  02A6               	subwf	___almod@dividend+2,f
  1722  0386  0823               	movf	___almod@divisor+3,w
  1723  0387  1C03               	skipc
  1724  0388  0F23               	incfsz	___almod@divisor+3,w
  1725  0389  02A7               	subwf	___almod@dividend+3,f
  1726  038A                     l1287:	
  1727  038A  3001               	movlw	1
  1728  038B                     u1445:	
  1729  038B  1003               	clrc
  1730  038C  0CA3               	rrf	___almod@divisor+3,f
  1731  038D  0CA2               	rrf	___almod@divisor+2,f
  1732  038E  0CA1               	rrf	___almod@divisor+1,f
  1733  038F  0CA0               	rrf	___almod@divisor,f
  1734  0390  3EFF               	addlw	-1
  1735  0391  1D03               	skipz
  1736  0392  2B8B               	goto	u1445
  1737  0393  3001               	movlw	1
  1738  0394  02A9               	subwf	___almod@counter,f
  1739  0395  1D03               	btfss	3,2
  1740  0396  2B6C               	goto	l1283
  1741  0397                     l1291:	
  1742  0397  082A               	movf	___almod@sign,w
  1743  0398  1903               	btfsc	3,2
  1744  0399  2BA5               	goto	l1295
  1745  039A  09A4               	comf	___almod@dividend,f
  1746  039B  09A5               	comf	___almod@dividend+1,f
  1747  039C  09A6               	comf	___almod@dividend+2,f
  1748  039D  09A7               	comf	___almod@dividend+3,f
  1749  039E  0AA4               	incf	___almod@dividend,f
  1750  039F  1903               	skipnz
  1751  03A0  0AA5               	incf	___almod@dividend+1,f
  1752  03A1  1903               	skipnz
  1753  03A2  0AA6               	incf	___almod@dividend+2,f
  1754  03A3  1903               	skipnz
  1755  03A4  0AA7               	incf	___almod@dividend+3,f
  1756  03A5                     l1295:	
  1757  03A5  0827               	movf	___almod@dividend+3,w
  1758  03A6  00A3               	movwf	?___almod+3
  1759  03A7  0826               	movf	___almod@dividend+2,w
  1760  03A8  00A2               	movwf	?___almod+2
  1761  03A9  0825               	movf	___almod@dividend+1,w
  1762  03AA  00A1               	movwf	?___almod+1
  1763  03AB  0824               	movf	___almod@dividend,w
  1764  03AC  00A0               	movwf	?___almod
  1765  03AD  0008               	return
  1766  03AE                     __end_of___almod:	
  1767                           
  1768                           	psect	text8
  1769  0193                     __ptext8:	
  1770 ;; *************** function ___aldiv *****************
  1771 ;; Defined at:
  1772 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  divisor         4    0[BANK0 ] long 
  1775 ;;  dividend        4    4[BANK0 ] long 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  quotient        4   11[BANK0 ] long 
  1778 ;;  sign            1   10[BANK0 ] unsigned char 
  1779 ;;  counter         1    9[BANK0 ] unsigned char 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  4    0[BANK0 ] long 
  1782 ;; Registers used:
  1783 ;;		wreg, status,2, status,0
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1789 ;;      Params:         0       8       0       0
  1790 ;;      Locals:         0       6       0       0
  1791 ;;      Temps:          0       1       0       0
  1792 ;;      Totals:         0      15       0       0
  1793 ;;Total ram usage:       15 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:    1
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		_set_offset
  1800 ;;		_measure_force
  1801 ;;		_write_dec
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           
  1806                           ;psect for function ___aldiv
  1807  0193                     ___aldiv:	
  1808                           
  1809                           ;incstack = 0
  1810                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1811  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0195  01AA               	clrf	___aldiv@sign
  1814  0196  1FA3               	btfss	___aldiv@divisor+3,7
  1815  0197  29A5               	goto	l292
  1816  0198  09A0               	comf	___aldiv@divisor,f
  1817  0199  09A1               	comf	___aldiv@divisor+1,f
  1818  019A  09A2               	comf	___aldiv@divisor+2,f
  1819  019B  09A3               	comf	___aldiv@divisor+3,f
  1820  019C  0AA0               	incf	___aldiv@divisor,f
  1821  019D  1903               	skipnz
  1822  019E  0AA1               	incf	___aldiv@divisor+1,f
  1823  019F  1903               	skipnz
  1824  01A0  0AA2               	incf	___aldiv@divisor+2,f
  1825  01A1  1903               	skipnz
  1826  01A2  0AA3               	incf	___aldiv@divisor+3,f
  1827  01A3  01AA               	clrf	___aldiv@sign
  1828  01A4  0AAA               	incf	___aldiv@sign,f
  1829  01A5                     l292:	
  1830  01A5  1FA7               	btfss	___aldiv@dividend+3,7
  1831  01A6  29B6               	goto	l1237
  1832  01A7  09A4               	comf	___aldiv@dividend,f
  1833  01A8  09A5               	comf	___aldiv@dividend+1,f
  1834  01A9  09A6               	comf	___aldiv@dividend+2,f
  1835  01AA  09A7               	comf	___aldiv@dividend+3,f
  1836  01AB  0AA4               	incf	___aldiv@dividend,f
  1837  01AC  1903               	skipnz
  1838  01AD  0AA5               	incf	___aldiv@dividend+1,f
  1839  01AE  1903               	skipnz
  1840  01AF  0AA6               	incf	___aldiv@dividend+2,f
  1841  01B0  1903               	skipnz
  1842  01B1  0AA7               	incf	___aldiv@dividend+3,f
  1843  01B2  3001               	movlw	1
  1844  01B3  00A8               	movwf	??___aldiv
  1845  01B4  0828               	movf	??___aldiv,w
  1846  01B5  06AA               	xorwf	___aldiv@sign,f
  1847  01B6                     l1237:	
  1848  01B6  3000               	movlw	0
  1849  01B7  00AE               	movwf	___aldiv@quotient+3
  1850  01B8  3000               	movlw	0
  1851  01B9  00AD               	movwf	___aldiv@quotient+2
  1852  01BA  3000               	movlw	0
  1853  01BB  00AC               	movwf	___aldiv@quotient+1
  1854  01BC  3000               	movlw	0
  1855  01BD  00AB               	movwf	___aldiv@quotient
  1856  01BE  0823               	movf	___aldiv@divisor+3,w
  1857  01BF  0422               	iorwf	___aldiv@divisor+2,w
  1858  01C0  0421               	iorwf	___aldiv@divisor+1,w
  1859  01C1  0420               	iorwf	___aldiv@divisor,w
  1860  01C2  1903               	skipnz
  1861  01C3  2A0B               	goto	l1259
  1862  01C4  01A9               	clrf	___aldiv@counter
  1863  01C5  0AA9               	incf	___aldiv@counter,f
  1864  01C6                     l1245:	
  1865  01C6  1BA3               	btfsc	___aldiv@divisor+3,7
  1866  01C7  29D6               	goto	l1247
  1867  01C8  3001               	movlw	1
  1868  01C9  00A8               	movwf	??___aldiv
  1869  01CA                     u1315:	
  1870  01CA  1003               	clrc
  1871  01CB  0DA0               	rlf	___aldiv@divisor,f
  1872  01CC  0DA1               	rlf	___aldiv@divisor+1,f
  1873  01CD  0DA2               	rlf	___aldiv@divisor+2,f
  1874  01CE  0DA3               	rlf	___aldiv@divisor+3,f
  1875  01CF  0BA8               	decfsz	??___aldiv,f
  1876  01D0  29CA               	goto	u1315
  1877  01D1  3001               	movlw	1
  1878  01D2  00A8               	movwf	??___aldiv
  1879  01D3  0828               	movf	??___aldiv,w
  1880  01D4  07A9               	addwf	___aldiv@counter,f
  1881  01D5  29C6               	goto	l1245
  1882  01D6                     l1247:	
  1883  01D6  3001               	movlw	1
  1884  01D7  00A8               	movwf	??___aldiv
  1885  01D8                     u1335:	
  1886  01D8  1003               	clrc
  1887  01D9  0DAB               	rlf	___aldiv@quotient,f
  1888  01DA  0DAC               	rlf	___aldiv@quotient+1,f
  1889  01DB  0DAD               	rlf	___aldiv@quotient+2,f
  1890  01DC  0DAE               	rlf	___aldiv@quotient+3,f
  1891  01DD  0BA8               	decfsz	??___aldiv,f
  1892  01DE  29D8               	goto	u1335
  1893  01DF  0823               	movf	___aldiv@divisor+3,w
  1894  01E0  0227               	subwf	___aldiv@dividend+3,w
  1895  01E1  1D03               	skipz
  1896  01E2  29ED               	goto	u1345
  1897  01E3  0822               	movf	___aldiv@divisor+2,w
  1898  01E4  0226               	subwf	___aldiv@dividend+2,w
  1899  01E5  1D03               	skipz
  1900  01E6  29ED               	goto	u1345
  1901  01E7  0821               	movf	___aldiv@divisor+1,w
  1902  01E8  0225               	subwf	___aldiv@dividend+1,w
  1903  01E9  1D03               	skipz
  1904  01EA  29ED               	goto	u1345
  1905  01EB  0820               	movf	___aldiv@divisor,w
  1906  01EC  0224               	subwf	___aldiv@dividend,w
  1907  01ED                     u1345:	
  1908  01ED  1C03               	skipc
  1909  01EE  29FE               	goto	l1255
  1910  01EF  0820               	movf	___aldiv@divisor,w
  1911  01F0  02A4               	subwf	___aldiv@dividend,f
  1912  01F1  0821               	movf	___aldiv@divisor+1,w
  1913  01F2  1C03               	skipc
  1914  01F3  0F21               	incfsz	___aldiv@divisor+1,w
  1915  01F4  02A5               	subwf	___aldiv@dividend+1,f
  1916  01F5  0822               	movf	___aldiv@divisor+2,w
  1917  01F6  1C03               	skipc
  1918  01F7  0F22               	incfsz	___aldiv@divisor+2,w
  1919  01F8  02A6               	subwf	___aldiv@dividend+2,f
  1920  01F9  0823               	movf	___aldiv@divisor+3,w
  1921  01FA  1C03               	skipc
  1922  01FB  0F23               	incfsz	___aldiv@divisor+3,w
  1923  01FC  02A7               	subwf	___aldiv@dividend+3,f
  1924  01FD  142B               	bsf	___aldiv@quotient,0
  1925  01FE                     l1255:	
  1926  01FE  3001               	movlw	1
  1927  01FF                     u1355:	
  1928  01FF  1003               	clrc
  1929  0200  0CA3               	rrf	___aldiv@divisor+3,f
  1930  0201  0CA2               	rrf	___aldiv@divisor+2,f
  1931  0202  0CA1               	rrf	___aldiv@divisor+1,f
  1932  0203  0CA0               	rrf	___aldiv@divisor,f
  1933  0204  3EFF               	addlw	-1
  1934  0205  1D03               	skipz
  1935  0206  29FF               	goto	u1355
  1936  0207  3001               	movlw	1
  1937  0208  02A9               	subwf	___aldiv@counter,f
  1938  0209  1D03               	btfss	3,2
  1939  020A  29D6               	goto	l1247
  1940  020B                     l1259:	
  1941  020B  082A               	movf	___aldiv@sign,w
  1942  020C  1903               	btfsc	3,2
  1943  020D  2A19               	goto	l1263
  1944  020E  09AB               	comf	___aldiv@quotient,f
  1945  020F  09AC               	comf	___aldiv@quotient+1,f
  1946  0210  09AD               	comf	___aldiv@quotient+2,f
  1947  0211  09AE               	comf	___aldiv@quotient+3,f
  1948  0212  0AAB               	incf	___aldiv@quotient,f
  1949  0213  1903               	skipnz
  1950  0214  0AAC               	incf	___aldiv@quotient+1,f
  1951  0215  1903               	skipnz
  1952  0216  0AAD               	incf	___aldiv@quotient+2,f
  1953  0217  1903               	skipnz
  1954  0218  0AAE               	incf	___aldiv@quotient+3,f
  1955  0219                     l1263:	
  1956  0219  082E               	movf	___aldiv@quotient+3,w
  1957  021A  00A3               	movwf	?___aldiv+3
  1958  021B  082D               	movf	___aldiv@quotient+2,w
  1959  021C  00A2               	movwf	?___aldiv+2
  1960  021D  082C               	movf	___aldiv@quotient+1,w
  1961  021E  00A1               	movwf	?___aldiv+1
  1962  021F  082B               	movf	___aldiv@quotient,w
  1963  0220  00A0               	movwf	?___aldiv
  1964  0221  0008               	return
  1965  0222                     __end_of___aldiv:	
  1966                           
  1967                           	psect	text9
  1968  03AE                     __ptext9:	
  1969 ;; *************** function _read_tarti *****************
  1970 ;; Defined at:
  1971 ;;		line 179 in file "tarti.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  i               2    6[BANK0 ] int 
  1976 ;;  kl              2    4[BANK0 ] int 
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      void 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0, btemp+1
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1986 ;;      Params:         0       0       0       0
  1987 ;;      Locals:         0       4       0       0
  1988 ;;      Temps:          0       4       0       0
  1989 ;;      Totals:         0       8       0       0
  1990 ;;Total ram usage:        8 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    1
  1993 ;; This function calls:
  1994 ;;		Nothing
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;;		_set_offset
  1998 ;;		_measure_force
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           
  2003                           ;psect for function _read_tarti
  2004  03AE                     _read_tarti:	
  2005                           
  2006                           ;tarti.c: 181: PORTAbits.RA0=0;
  2007                           
  2008                           ;incstack = 0
  2009                           ; Regs used in _read_tarti: [wreg+status,2+status,0+btemp+1]
  2010  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  2011  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  2012  03B0  1005               	bcf	5,0	;volatile
  2013  03B1                     l117:	
  2014                           ;tarti.c: 182: while(PORTAbits.RA3==1);
  2015                           
  2016  03B1  1985               	btfsc	5,3	;volatile
  2017  03B2  2BB1               	goto	l117
  2018                           
  2019                           ;tarti.c: 184: for(int kl=0;kl<25;kl++){
  2020  03B3  01A4               	clrf	read_tarti@kl
  2021  03B4  01A5               	clrf	read_tarti@kl+1
  2022  03B5  0825               	movf	read_tarti@kl+1,w
  2023  03B6  3A80               	xorlw	128
  2024  03B7  00FF               	movwf	127
  2025  03B8  3080               	movlw	128
  2026  03B9  027F               	subwf	127,w
  2027  03BA  1D03               	skipz
  2028  03BB  2BBE               	goto	u1485
  2029  03BC  3019               	movlw	25
  2030  03BD  0224               	subwf	read_tarti@kl,w
  2031  03BE                     u1485:	
  2032  03BE  1803               	btfsc	3,0
  2033  03BF  2BD5               	goto	l122
  2034  03C0                     l120:	
  2035                           
  2036                           ;tarti.c: 185: PORTAbits.RA0=1;
  2037  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  2038  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  2039  03C2  1405               	bsf	5,0	;volatile
  2040                           
  2041                           ;tarti.c: 186: PORTAbits.RA0=0;
  2042  03C3  1005               	bcf	5,0	;volatile
  2043  03C4  3001               	movlw	1
  2044  03C5  07A4               	addwf	read_tarti@kl,f
  2045  03C6  1803               	skipnc
  2046  03C7  0AA5               	incf	read_tarti@kl+1,f
  2047  03C8  3000               	movlw	0
  2048  03C9  07A5               	addwf	read_tarti@kl+1,f
  2049  03CA  0825               	movf	read_tarti@kl+1,w
  2050  03CB  3A80               	xorlw	128
  2051  03CC  00FF               	movwf	127
  2052  03CD  3080               	movlw	128
  2053  03CE  027F               	subwf	127,w
  2054  03CF  1D03               	skipz
  2055  03D0  2BD3               	goto	u1495
  2056  03D1  3019               	movlw	25
  2057  03D2  0224               	subwf	read_tarti@kl,w
  2058  03D3                     u1495:	
  2059  03D3  1C03               	skipc
  2060  03D4  2BC0               	goto	l120
  2061  03D5                     l122:	
  2062                           ;tarti.c: 187: }
  2063                           ;tarti.c: 189: while(PORTAbits.RA3==1);
  2064                           
  2065  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  2066  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  2067  03D7  1985               	btfsc	5,3	;volatile
  2068  03D8  2BD5               	goto	l122
  2069                           
  2070                           ;tarti.c: 190: measure_val = 0;
  2071  03D9  3000               	movlw	0
  2072  03DA  00DA               	movwf	_measure_val
  2073  03DB  3000               	movlw	0
  2074  03DC  00DB               	movwf	_measure_val+1
  2075  03DD  3000               	movlw	0
  2076  03DE  00DC               	movwf	_measure_val+2
  2077                           
  2078                           ;tarti.c: 191: for(int i=0; i<24; i++){
  2079  03DF  01A6               	clrf	read_tarti@i
  2080  03E0  01A7               	clrf	read_tarti@i+1
  2081  03E1  0827               	movf	read_tarti@i+1,w
  2082  03E2  3A80               	xorlw	128
  2083  03E3  00FF               	movwf	127
  2084  03E4  3080               	movlw	128
  2085  03E5  027F               	subwf	127,w
  2086  03E6  1D03               	skipz
  2087  03E7  2BEA               	goto	u1515
  2088  03E8  3018               	movlw	24
  2089  03E9  0226               	subwf	read_tarti@i,w
  2090  03EA                     u1515:	
  2091  03EA  1803               	btfsc	3,0
  2092  03EB  2C17               	goto	l126
  2093  03EC                     l125:	
  2094                           
  2095                           ;tarti.c: 192: PORTAbits.RA0=1;
  2096  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2097  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2098  03EE  1405               	bsf	5,0	;volatile
  2099                           
  2100                           ;tarti.c: 193: measure_val <<= 1;
  2101  03EF  3001               	movlw	1
  2102  03F0                     u1525:	
  2103  03F0  1003               	clrc
  2104  03F1  0DDA               	rlf	_measure_val,f
  2105  03F2  0DDB               	rlf	_measure_val+1,f
  2106  03F3  0DDC               	rlf	_measure_val+2,f
  2107  03F4  3EFF               	addlw	-1
  2108  03F5  1D03               	skipz
  2109  03F6  2BF0               	goto	u1525
  2110                           
  2111                           ;tarti.c: 195: PORTAbits.RA0=0;
  2112  03F7  1005               	bcf	5,0	;volatile
  2113                           
  2114                           ;tarti.c: 196: measure_val |= PORTAbits.RA3;
  2115  03F8  0C05               	rrf	5,w	;volatile
  2116  03F9  00A0               	movwf	??_read_tarti
  2117  03FA  0CA0               	rrf	??_read_tarti,f
  2118  03FB  0C20               	rrf	??_read_tarti,w
  2119  03FC  3901               	andlw	1
  2120  03FD  00A1               	movwf	??_read_tarti+1
  2121  03FE  01A2               	clrf	??_read_tarti+2
  2122  03FF  01A3               	clrf	??_read_tarti+3
  2123  0400  0821               	movf	??_read_tarti+1,w
  2124  0401  04DA               	iorwf	_measure_val,f
  2125  0402  0822               	movf	??_read_tarti+2,w
  2126  0403  04DB               	iorwf	_measure_val+1,f
  2127  0404  0823               	movf	??_read_tarti+3,w
  2128  0405  04DC               	iorwf	_measure_val+2,f
  2129  0406  3001               	movlw	1
  2130  0407  07A6               	addwf	read_tarti@i,f
  2131  0408  1803               	skipnc
  2132  0409  0AA7               	incf	read_tarti@i+1,f
  2133  040A  3000               	movlw	0
  2134  040B  07A7               	addwf	read_tarti@i+1,f
  2135  040C  0827               	movf	read_tarti@i+1,w
  2136  040D  3A80               	xorlw	128
  2137  040E  00FF               	movwf	127
  2138  040F  3080               	movlw	128
  2139  0410  027F               	subwf	127,w
  2140  0411  1D03               	skipz
  2141  0412  2C15               	goto	u1535
  2142  0413  3018               	movlw	24
  2143  0414  0226               	subwf	read_tarti@i,w
  2144  0415                     u1535:	
  2145  0415  1C03               	skipc
  2146  0416  2BEC               	goto	l125
  2147  0417                     l126:	
  2148                           
  2149                           ;tarti.c: 197: }
  2150                           ;tarti.c: 199: PORTAbits.RA0=1;
  2151  0417  1283               	bcf	3,5	;RP0=0, select bank0
  2152  0418  1303               	bcf	3,6	;RP1=0, select bank0
  2153  0419  1405               	bsf	5,0	;volatile
  2154                           
  2155                           ;tarti.c: 200: measure_val ^=0x800000;
  2156  041A  3080               	movlw	128
  2157  041B  06DC               	xorwf	_measure_val+2,f
  2158                           
  2159                           ;tarti.c: 201: PORTAbits.RA0=0;
  2160  041C  1005               	bcf	5,0	;volatile
  2161  041D  0008               	return
  2162  041E                     __end_of_read_tarti:	
  2163                           
  2164                           	psect	text10
  2165  04C9                     __ptext10:	
  2166 ;; *************** function _T0_init *****************
  2167 ;; Defined at:
  2168 ;;		line 115 in file "tarti.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;		None
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		None
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2182 ;;      Params:         0       0       0       0
  2183 ;;      Locals:         0       0       0       0
  2184 ;;      Temps:          0       0       0       0
  2185 ;;      Totals:         0       0       0       0
  2186 ;;Total ram usage:        0 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    1
  2189 ;; This function calls:
  2190 ;;		Nothing
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;; This function uses a non-reentrant model
  2194 ;;
  2195                           
  2196                           
  2197                           ;psect for function _T0_init
  2198  04C9                     _T0_init:	
  2199                           
  2200                           ;tarti.c: 116: INTCONbits.GIE=1;
  2201                           
  2202                           ;incstack = 0
  2203                           ; Regs used in _T0_init: []
  2204  04C9  178B               	bsf	11,7	;volatile
  2205                           
  2206                           ;tarti.c: 117: INTCONbits.T0IE=1;
  2207  04CA  168B               	bsf	11,5	;volatile
  2208                           
  2209                           ;tarti.c: 118: INTCONbits.T0IF=0;
  2210  04CB  110B               	bcf	11,2	;volatile
  2211                           
  2212                           ;tarti.c: 120: OPTION_REGbits.T0CS=0;
  2213  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  2214  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  2215  04CE  1281               	bcf	1,5	;volatile
  2216                           
  2217                           ;tarti.c: 121: OPTION_REGbits.T0SE=0;
  2218  04CF  1201               	bcf	1,4	;volatile
  2219                           
  2220                           ;tarti.c: 122: OPTION_REGbits.PSA=0;
  2221  04D0  1181               	bcf	1,3	;volatile
  2222                           
  2223                           ;tarti.c: 123: OPTION_REGbits.PS0=0;
  2224  04D1  1001               	bcf	1,0	;volatile
  2225                           
  2226                           ;tarti.c: 124: OPTION_REGbits.PS1=0;
  2227  04D2  1081               	bcf	1,1	;volatile
  2228                           
  2229                           ;tarti.c: 125: OPTION_REGbits.PS2=0;
  2230  04D3  1101               	bcf	1,2	;volatile
  2231  04D4  0008               	return
  2232  04D5                     __end_of_T0_init:	
  2233                           
  2234                           	psect	text11
  2235  041E                     __ptext11:	
  2236 ;; *************** function _kes *****************
  2237 ;; Defined at:
  2238 ;;		line 148 in file "tarti.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;		None
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;		None
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2252 ;;      Params:         0       0       0       0
  2253 ;;      Locals:         0       0       0       0
  2254 ;;      Temps:          5       0       0       0
  2255 ;;      Totals:         5       0       0       0
  2256 ;;Total ram usage:        5 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		Interrupt level 1
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           
  2266                           ;psect for function _kes
  2267  041E                     _kes:	
  2268                           
  2269                           ;tarti.c: 149: if(INTCONbits.T0IF && INTCONbits.T0IE){
  2270  041E  190B               	btfsc	11,2	;volatile
  2271  041F  1E8B               	btfss	11,5	;volatile
  2272  0420  2C30               	goto	i1l1197
  2273                           
  2274                           ;tarti.c: 150: timetick++;
  2275  0421  3001               	movlw	1
  2276  0422  07F5               	addwf	_timetick,f
  2277  0423  3000               	movlw	0
  2278  0424  1803               	skipnc
  2279  0425  3001               	movlw	1
  2280  0426  07F6               	addwf	_timetick+1,f
  2281  0427  3000               	movlw	0
  2282  0428  1803               	skipnc
  2283  0429  3001               	movlw	1
  2284  042A  07F7               	addwf	_timetick+2,f
  2285  042B  3000               	movlw	0
  2286  042C  1803               	skipnc
  2287  042D  3001               	movlw	1
  2288  042E  07F8               	addwf	_timetick+3,f
  2289                           
  2290                           ;tarti.c: 151: INTCONbits.T0IF=0;
  2291  042F  110B               	bcf	11,2	;volatile
  2292  0430                     i1l1197:	
  2293                           
  2294                           ;tarti.c: 153: }
  2295                           ;tarti.c: 155: if(timetick>=10000){
  2296  0430  0878               	movf	_timetick+3,w
  2297  0431  1D03               	btfss	3,2
  2298  0432  2C40               	goto	i1l1199
  2299  0433  0877               	movf	_timetick+2,w
  2300  0434  1D03               	btfss	3,2
  2301  0435  2C40               	goto	i1l1199
  2302  0436  3027               	movlw	39
  2303  0437  0276               	subwf	_timetick+1,w
  2304  0438  1D03               	skipz
  2305  0439  2C3E               	goto	u120_23
  2306  043A  3010               	movlw	16
  2307  043B  0275               	subwf	_timetick,w
  2308  043C  1D03               	skipz
  2309  043D  2C3E               	goto	u120_23
  2310  043E                     u120_23:	
  2311  043E  1C03               	btfss	3,0
  2312  043F  2C48               	goto	i1l1201
  2313  0440                     i1l1199:	
  2314                           
  2315                           ;tarti.c: 156: timetick=0;
  2316  0440  3000               	movlw	0
  2317  0441  00F8               	movwf	_timetick+3
  2318  0442  3000               	movlw	0
  2319  0443  00F7               	movwf	_timetick+2
  2320  0444  3000               	movlw	0
  2321  0445  00F6               	movwf	_timetick+1
  2322  0446  3000               	movlw	0
  2323  0447  00F5               	movwf	_timetick
  2324  0448                     i1l1201:	
  2325                           
  2326                           ;tarti.c: 157: }
  2327                           ;tarti.c: 159: if(PIR1bits.RCIF){
  2328  0448  1E8C               	btfss	12,5	;volatile
  2329  0449  2C5A               	goto	i1l1207
  2330                           
  2331                           ;tarti.c: 160: tarti.command[tarti.wr_index]=RCREG;
  2332  044A  081A               	movf	26,w	;volatile
  2333  044B  00F0               	movwf	??_kes
  2334  044C  1683               	bsf	3,5	;RP0=1, select bank1
  2335  044D  1303               	bcf	3,6	;RP1=0, select bank1
  2336  044E  0838               	movf	(_tarti^(0+128)+24),w
  2337  044F  3EA0               	addlw	(low (_tarti| 0))& (0+255)
  2338  0450  0084               	movwf	4
  2339  0451  0870               	movf	??_kes,w
  2340  0452  1383               	bcf	3,7	;select IRP bank1
  2341  0453  0080               	movwf	0
  2342                           
  2343                           ;tarti.c: 162: tarti.wr_index++;
  2344  0454  3001               	movlw	1
  2345  0455  07B8               	addwf	(_tarti^(0+128)+24),f
  2346  0456  1803               	skipnc
  2347  0457  0AB9               	incf	((_tarti+1)^(0+128)+24),f
  2348  0458  3000               	movlw	0
  2349  0459  07B9               	addwf	((_tarti+1)^(0+128)+24),f
  2350  045A                     i1l1207:	
  2351                           
  2352                           ;tarti.c: 163: }
  2353                           ;tarti.c: 165: if(tarti.wr_index>=24)
  2354  045A  3000               	movlw	0
  2355  045B  1683               	bsf	3,5	;RP0=1, select bank1
  2356  045C  1303               	bcf	3,6	;RP1=0, select bank1
  2357  045D  0239               	subwf	((_tarti+1)^(0+128)+24),w
  2358  045E  3018               	movlw	24
  2359  045F  1903               	skipnz
  2360  0460  0238               	subwf	(_tarti^(0+128)+24),w
  2361  0461  1C03               	skipc
  2362  0462  2C65               	goto	i1l111
  2363                           
  2364                           ;tarti.c: 166: tarti.wr_index=0;
  2365  0463  01B8               	clrf	(_tarti^(0+128)+24)
  2366  0464  01B9               	clrf	((_tarti+1)^(0+128)+24)
  2367  0465                     i1l111:	
  2368  0465  0874               	movf	??_kes+4,w
  2369  0466  1283               	bcf	3,5	;RP0=0, select bank0
  2370  0467  1303               	bcf	3,6	;RP1=0, select bank0
  2371  0468  00FF               	movwf	127
  2372  0469  0873               	movf	??_kes+3,w
  2373  046A  008A               	movwf	10
  2374  046B  0872               	movf	??_kes+2,w
  2375  046C  0084               	movwf	4
  2376  046D  0E71               	swapf	(??_kes+1)^(0+-128),w
  2377  046E  0083               	movwf	3
  2378  046F  0EFE               	swapf	126,f
  2379  0470  0E7E               	swapf	126,w
  2380  0471  0009               	retfie
  2381  0472                     __end_of_kes:	
  2382  007E                     btemp	set	126	;btemp
  2383  007E                     wtemp0	set	126
  2384                           
  2385                           	psect	intentry
  2386  0004                     __pintentry:	
  2387                           ;incstack = 0
  2388                           ; Regs used in _kes: [wreg-fsr0h+status,2+status,0]
  2389                           
  2390  0004                     interrupt_function:	
  2391  007E                     saved_w	set	btemp
  2392  0004  00FE               	movwf	btemp
  2393  0005  0E03               	swapf	3,w
  2394  0006  00F1               	movwf	??_kes+1
  2395  0007  0804               	movf	4,w
  2396  0008  00F2               	movwf	??_kes+2
  2397  0009  080A               	movf	10,w
  2398  000A  00F3               	movwf	??_kes+3
  2399  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2400  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2401  000D  087F               	movf	btemp+1,w
  2402  000E  00F4               	movwf	??_kes+4
  2403  000F  2C1E               	ljmp	_kes


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80     42      61
    BANK1            80      0      28
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _kes in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_set_offset
    _set_offset->_write_dec
    _measure_force->_write_dec
    _write_dec->___aldiv

Critical Paths under _kes in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _kes in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _kes in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    7584
                                             35 BANK0      7     7      0
                            _T0_init
                      _measure_force
                         _read_tarti
                        _serial_init
                         _set_offset
                         _tarti_init
 ---------------------------------------------------------------------------------
 (1) _tarti_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_offset                                          13    13      0    3594
                                             22 BANK0     13    13      0
                            ___aldiv
                         _read_tarti
                          _write_dec
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _measure_force                                       10    10      0    3594
                                             22 BANK0     10    10      0
                            ___aldiv
                         _read_tarti
                          _write_dec
 ---------------------------------------------------------------------------------
 (2) _write_dec                                            7     3      4    2354
                                             15 BANK0      7     3      4
                            ___aldiv
                            ___almod
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8     266
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___almod                                             11     3      8     563
                                              0 BANK0     11     3      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     965
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (2) _read_tarti                                           8     8      0     136
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (1) _T0_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _kes                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _T0_init
   _measure_force
     ___aldiv
     _read_tarti
     _write_dec
       ___aldiv
       ___almod
       ___lmul
   _read_tarti
   _serial_init
   _set_offset
     ___aldiv
     _read_tarti
     _write_dec
       ___aldiv
       ___almod
       ___lmul
   _tarti_init

 _kes (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     2A      3D       3       76.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      62       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      1C       7       35.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      62      10        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Feb 03 09:28:26 2018

            __CFG_CP$OFF 0000                       l71 007D                       l81 00A6  
                     l65 0058                       l74 0085                       l91 00D8  
                     l84 00BF                       l68 0075                       l85 00B7  
                     l88 00D0                       fsr 0004                      l120 03C0  
                    l122 03D5                      l125 03EC                      l117 03B1  
                    l126 0417                      l305 0347                      l292 01A5  
           __CFG_CPD$OFF 0000                      _kes 041E                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000              main@cnt_335 0048  
           __CFG_LVP$OFF 0000                     l1215 047C                     l1219 0492  
                   l1245 01C6                     l1237 01B6                     l1405 026B  
                   l1263 0219                     l1255 01FE                     l1247 01D6  
                   l1343 012A                     l1281 035C                     l1345 012E  
                   l1259 020B                     l1283 036C                     l1291 0397  
                   l1275 0354                     l1355 0133                     l1357 0177  
                   l1461 009F                     l1295 03A5                     l1287 038A  
                   l1383 0302                     l1375 02C5                     l1397 0239  
                   ?_kes 0070                     u1315 01CA                     u1335 01D8  
                   u1415 0360                     u1255 0494                     u1345 01ED  
                   u1265 049C                     u1515 03EA                     u1355 01FF  
                   u1435 037A                     u1525 03F0                     u1445 038B  
                   u1605 0300                     u1535 0415                     u1615 0237  
                   u1635 0269                     u1715 009D                     u1485 03BE  
                   u1565 0180                     u1495 03D3                     u1655 0056  
                   u1585 02C3                     u1675 0073                     u1765 00CE  
                   u1797 003D          __end_of_T0_init 04D5           write_dec@value 002F  
                   _main 0020                     btemp 007E                     start 0010  
                  ??_kes 0070          __end_of___aldiv 0222          __end_of___almod 03AE  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _CMCON 001F  
                  i1l111 0465                    _RCREG 001A                    _SPBRG 0099  
                  _TRISB 0086                    _TXREG 0019      ___lmul@multiplicand 0024  
                  _force 0054                    _tarti 00A0           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
 __size_of_measure_force 008C           __CFG_MCLRE$OFF 0000          __initialization 0011  
           __end_of_main 00DE                   ??_main 0043                ??_T0_init 0075  
                 i1l1201 0448                   i1l1207 045A                   u120_23 043E  
                 i1l1197 0430                   i1l1199 0440           __CFG_PWRTE$OFF 0000  
           ?_serial_init 0070                   ___lmul 0472                ??___aldiv 0028  
              ??___almod 0028                   _offset 0057            _measure_force 0222  
                 saved_w 007E              read_tarti@i 0026  __end_of__initialization 001E  
         __pcstackCOMMON 0070           ?_measure_force 0070           _OPTION_REGbits 0081  
             __pbssBANK0 004A               __pbssBANK1 00A0               __pmaintext 0020  
                ?___lmul 0020               __pintentry 0004           ___lmul@product 0029  
                _T0_init 04C9       __size_of_write_dec 00B5                  ___aldiv 0193  
                ___almod 0335          __size_of___lmul 0041     __size_of_serial_init 0016  
        ??_measure_force 0036                  __ptext1 04D5                  __ptext2 02AE  
                __ptext3 04B3                  __ptext4 0222                  __ptext5 00DE  
                __ptext6 0472                  __ptext7 0335                  __ptext8 0193  
                __ptext9 03AE               _read_tarti 03AE             __size_of_kes 0054  
       ___aldiv@dividend 0024                  main@cnt 0046              set_offset@i 003D  
                clrloop0 04DF     end_of_initialization 001E           measure_force@i 003A  
             _set_offset 02AE                _RCSTAbits 0018         ___aldiv@quotient 002B  
             _tarti_init 04D5                _PORTAbits 0005                _PORTBbits 0006  
           read_tarti@kl 0024        __end_of_write_dec 0193                _TRISAbits 0085  
              _TRISBbits 0086                _TXSTAbits 0098           __end_of___lmul 04B3  
            ?_read_tarti 0070      start_initialization 0011              __end_of_kes 0472  
            ?_set_offset 0070                 ??___lmul 0028              ?_tarti_init 0070  
            __pbssCOMMON 0075                ___latbits 0000            __pcstackBANK0 0020  
               ?_T0_init 0070                _dec_array 004A      __size_of_read_tarti 0070  
               ?___aldiv 0020                 ?___almod 0020         ___almod@dividend 0024  
    __size_of_set_offset 0087      __size_of_tarti_init 0009          ___aldiv@divisor 0020  
      interrupt_function 0004          ___aldiv@counter 0029                clear_ram0 04DE  
               _PIE1bits 008C                 _PIR1bits 000C            ??_serial_init 0075  
  __end_of_measure_force 02AE            set_offset@sum 003F         __size_of_T0_init 000C  
              _write_dec 00DE        ___lmul@multiplier 0020              _measure_val 005A  
       __size_of___aldiv 008F         __size_of___almod 0079      __end_of_serial_init 04C9  
           ??_read_tarti 0020         measure_force@sum 003C                 __ptext10 04C9  
               __ptext11 041E               ?_write_dec 002F          ___almod@divisor 0020  
        ___almod@counter 0029            __size_of_main 00BE       __end_of_read_tarti 041E  
           ??_set_offset 0036             ??_tarti_init 0075                 _timetick 0075  
             write_dec@i 0034               _INTCONbits 000B       __end_of_set_offset 0335  
               intlevel1 0000       __end_of_tarti_init 04DE              _serial_init 04B3  
           ___aldiv@sign 002A              ??_write_dec 0033             ___almod@sign 002A  
