

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Feb 02 10:22:15 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F628A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009F                     	;# 
    97                           
    98                           	psect	idataCOMMON
    99  0330                     __pidataCOMMON:	
   100                           
   101                           ;initializer for _counter
   102  0330  3418               	retlw	24
   103  0331  3400               	retlw	0
   104                           
   105                           	psect	strings
   106  0300                     __pstrings:	
   107  0300                     stringtab:	
   108  0300                     __stringtab:	
   109  0300                     stringcode:	
   110                           ;	String table - string pointers are 1 byte each
   111                           
   112  0300                     stringdir:	
   113  0300  3003               	movlw	high stringdir
   114  0301  008A               	movwf	10
   115  0302  0804               	movf	4,w
   116  0303  0A84               	incf	4,f
   117  0304  0782               	addwf	2,f
   118  0305                     __stringbase:	
   119  0305  3400               	retlw	0
   120  0306                     __end_of__stringtab:	
   121  0306                     _dpowers:	
   122  0306  3401               	retlw	1
   123  0307  3400               	retlw	0
   124  0308  340A               	retlw	10
   125  0309  3400               	retlw	0
   126  030A  3464               	retlw	100
   127  030B  3400               	retlw	0
   128  030C  34E8               	retlw	232
   129  030D  3403               	retlw	3
   130  030E  3410               	retlw	16
   131  030F  3427               	retlw	39
   132  0310                     __end_of_dpowers:	
   133  001A                     _RCREG	set	26
   134  000C                     _PIR1bits	set	12
   135  0018                     _RCSTAbits	set	24
   136  000B                     _INTCONbits	set	11
   137  0019                     _TXREG	set	25
   138  0006                     _PORTBbits	set	6
   139  0005                     _PORTAbits	set	5
   140  001F                     _CMCON	set	31
   141  0085                     _TRISAbits	set	133
   142  0099                     _SPBRG	set	153
   143  008C                     _PIE1bits	set	140
   144  0081                     _OPTION_REGbits	set	129
   145  0098                     _TXSTAbits	set	152
   146  0086                     _TRISBbits	set	134
   147  0086                     _TRISB	set	134
   148  0310                     STR_1:	
   149  0310  3425               	retlw	37	;'%'
   150  0311  3464               	retlw	100	;'d'
   151  0312  3400               	retlw	0
   152                           
   153                           ; #config settings
   154  0000                     
   155                           	psect	cinit
   156  0011                     start_initialization:	
   157  0011                     __initialization:	
   158                           
   159                           ; Initialize objects allocated to COMMON
   160  0011  2330               	fcall	__pidataCOMMON	;fetch initializer
   161  0012  00F7               	movwf	__pdataCOMMON& (0+127)
   162  0013  2331               	fcall	__pidataCOMMON+1	;fetch initializer
   163  0014  00F8               	movwf	(__pdataCOMMON+1)& (0+127)
   164                           
   165                           ; Clear objects allocated to BANK1
   166  0015  1383               	bcf	3,7	;select IRP bank0
   167  0016  30A0               	movlw	low __pbssBANK1
   168  0017  0084               	movwf	4
   169  0018  30E8               	movlw	low (__pbssBANK1+72)
   170  0019  2328               	fcall	clear_ram0
   171                           
   172                           ; Clear objects allocated to BANK0
   173  001A  3048               	movlw	low __pbssBANK0
   174  001B  0084               	movwf	4
   175  001C  3068               	movlw	low (__pbssBANK0+32)
   176  001D  2328               	fcall	clear_ram0
   177  001E                     end_of_initialization:	
   178                           ;End of C runtime variable initialization code
   179                           
   180  001E                     __end_of__initialization:	
   181  001E  0183               	clrf	3
   182  001F  29C2               	ljmp	_main	;jump to C main() function
   183                           
   184                           	psect	dataCOMMON
   185  0077                     __pdataCOMMON:	
   186  0077                     _counter:	
   187  0077                     	ds	2
   188                           
   189                           	psect	bssBANK0
   190  0048                     __pbssBANK0:	
   191  0048                     _tarti:	
   192  0048                     	ds	28
   193  0064                     _timetick:	
   194  0064                     	ds	4
   195                           
   196                           	psect	bssBANK1
   197  00A0                     __pbssBANK1:	
   198  00A0                     _tarti_data:	
   199  00A0                     	ds	48
   200  00D0                     _dec_array:	
   201  00D0                     	ds	24
   202                           
   203                           	psect	clrtext
   204  0328                     clear_ram0:	
   205                           ;	Called with FSR containing the base address, and
   206                           ;	W with the last address+1
   207                           
   208  0328  0064               	clrwdt	;clear the watchdog before getting into this loop
   209  0329                     clrloop0:	
   210  0329  0180               	clrf	0	;clear RAM location pointed to by FSR
   211  032A  0A84               	incf	4,f	;increment pointer
   212  032B  0604               	xorwf	4,w	;XOR with final address
   213  032C  1903               	btfsc	3,2	;have we reached the end yet?
   214  032D  3400               	retlw	0	;all done for this memory range, return
   215  032E  0604               	xorwf	4,w	;XOR again to restore value
   216  032F  2B29               	goto	clrloop0	;do the next byte
   217                           
   218                           	psect	cstackCOMMON
   219  0070                     __pcstackCOMMON:	
   220  0070                     ?_T0_init:	
   221  0070                     ?_serial_init:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ?_tarti_init:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?_Read_tarti:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ?_main:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0070                     ?_kes:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0070                     ??_kes:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?_bin_to_dec:	
   240                           ; 1 bytes @ 0x0
   241                           
   242                           
   243                           ; 2 bytes @ 0x0
   244  0070                     	ds	5
   245  0075                     ??_T0_init:	
   246  0075                     ??_serial_init:	
   247                           ; 1 bytes @ 0x5
   248                           
   249  0075                     ??_tarti_init:	
   250                           ; 1 bytes @ 0x5
   251                           
   252  0075                     ??___lwdiv:	
   253                           ; 1 bytes @ 0x5
   254                           
   255                           
   256                           ; 1 bytes @ 0x5
   257  0075                     	ds	1
   258  0076                     ??___lwmod:	
   259                           
   260                           ; 1 bytes @ 0x6
   261  0076                     	ds	1
   262  0077                     ??_main:	
   263                           
   264                           	psect	cstackBANK0
   265  0020                     __pcstackBANK0:	
   266                           ; 1 bytes @ 0x7
   267                           
   268  0020                     ??_Read_tarti:	
   269  0020                     ?___lwdiv:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0020                     ___lwdiv@divisor:	
   273                           ; 2 bytes @ 0x0
   274                           
   275                           
   276                           ; 2 bytes @ 0x0
   277  0020                     	ds	2
   278  0022                     ___lwdiv@dividend:	
   279                           
   280                           ; 2 bytes @ 0x2
   281  0022                     	ds	2
   282  0024                     ___lwdiv@counter:	
   283  0024                     Read_tarti@kl:	
   284                           ; 1 bytes @ 0x4
   285                           
   286                           
   287                           ; 2 bytes @ 0x4
   288  0024                     	ds	1
   289  0025                     ___lwdiv@quotient:	
   290                           
   291                           ; 2 bytes @ 0x5
   292  0025                     	ds	1
   293  0026                     Read_tarti@i:	
   294                           
   295                           ; 2 bytes @ 0x6
   296  0026                     	ds	1
   297  0027                     ?___lwmod:	
   298  0027                     ___lwmod@divisor:	
   299                           ; 2 bytes @ 0x7
   300                           
   301                           
   302                           ; 2 bytes @ 0x7
   303  0027                     	ds	2
   304  0029                     ___lwmod@dividend:	
   305                           
   306                           ; 2 bytes @ 0x9
   307  0029                     	ds	2
   308  002B                     ___lwmod@counter:	
   309                           
   310                           ; 1 bytes @ 0xB
   311  002B                     	ds	1
   312  002C                     ?_sprintf:	
   313  002C                     sprintf@f:	
   314                           ; 2 bytes @ 0xC
   315                           
   316                           
   317                           ; 1 bytes @ 0xC
   318  002C                     	ds	3
   319  002F                     ??_sprintf:	
   320                           
   321                           ; 1 bytes @ 0xF
   322  002F                     	ds	3
   323  0032                     sprintf@ap:	
   324                           
   325                           ; 1 bytes @ 0x12
   326  0032                     	ds	1
   327  0033                     sprintf@flag:	
   328                           
   329                           ; 1 bytes @ 0x13
   330  0033                     	ds	1
   331  0034                     sprintf@prec:	
   332                           
   333                           ; 1 bytes @ 0x14
   334  0034                     	ds	1
   335  0035                     sprintf@val:	
   336                           
   337                           ; 2 bytes @ 0x15
   338  0035                     	ds	2
   339  0037                     sprintf@sp:	
   340                           
   341                           ; 1 bytes @ 0x17
   342  0037                     	ds	1
   343  0038                     sprintf@c:	
   344                           
   345                           ; 1 bytes @ 0x18
   346  0038                     	ds	1
   347  0039                     ??_bin_to_dec:	
   348                           
   349                           ; 1 bytes @ 0x19
   350  0039                     	ds	4
   351  003D                     bin_to_dec@actual:	
   352                           
   353                           ; 2 bytes @ 0x1D
   354  003D                     	ds	2
   355  003F                     bin_to_dec@bin:	
   356                           
   357                           ; 1 bytes @ 0x1F
   358  003F                     	ds	1
   359  0040                     bin_to_dec@t:	
   360                           
   361                           ; 2 bytes @ 0x20
   362  0040                     	ds	2
   363  0042                     bin_to_dec@s:	
   364                           
   365                           ; 2 bytes @ 0x22
   366  0042                     	ds	2
   367  0044                     bin_to_dec@i:	
   368                           
   369                           ; 2 bytes @ 0x24
   370  0044                     	ds	2
   371  0046                     main@k:	
   372                           
   373                           ; 2 bytes @ 0x26
   374  0046                     	ds	2
   375                           
   376                           	psect	maintext
   377  01C2                     __pmaintext:	
   378 ;;
   379 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   380 ;;
   381 ;; *************** function _main *****************
   382 ;; Defined at:
   383 ;;		line 40 in file "tarti.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;		None
   386 ;; Auto vars:     Size  Location     Type
   387 ;;  k               2   38[BANK0 ] int 
   388 ;; Return value:  Size  Location     Type
   389 ;;                  1    wreg      void 
   390 ;; Registers used:
   391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : B00/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   397 ;;      Params:         0       0       0       0
   398 ;;      Locals:         0       2       0       0
   399 ;;      Temps:          0       0       0       0
   400 ;;      Totals:         0       2       0       0
   401 ;;Total ram usage:        2 bytes
   402 ;; Hardware stack levels required when called:    4
   403 ;; This function calls:
   404 ;;		_Read_tarti
   405 ;;		_T0_init
   406 ;;		_bin_to_dec
   407 ;;		_serial_init
   408 ;;		_tarti_init
   409 ;; This function is called by:
   410 ;;		Startup code after reset
   411 ;; This function uses a non-reentrant model
   412 ;;
   413                           
   414                           
   415                           ;psect for function _main
   416  01C2                     _main:	
   417                           
   418                           ;tarti.c: 41: CMCON=0x07;
   419                           
   420                           ;incstack = 0
   421                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   422  01C2  3007               	movlw	7
   423  01C3  1283               	bcf	3,5	;RP0=0, select bank0
   424  01C4  1303               	bcf	3,6	;RP1=0, select bank0
   425  01C5  009F               	movwf	31	;volatile
   426                           
   427                           ;tarti.c: 42: TRISB=0b00000110;
   428  01C6  3006               	movlw	6
   429  01C7  1683               	bsf	3,5	;RP0=1, select bank1
   430  01C8  1303               	bcf	3,6	;RP1=0, select bank1
   431  01C9  0086               	movwf	6	;volatile
   432                           
   433                           ;tarti.c: 44: T0_init();
   434  01CA  2313               	fcall	_T0_init
   435                           
   436                           ;tarti.c: 45: serial_init();
   437  01CB  22E6               	fcall	_serial_init
   438                           
   439                           ;tarti.c: 46: tarti_init();
   440  01CC  231F               	fcall	_tarti_init
   441                           
   442                           ;tarti.c: 48: tarti.wr_index=0;
   443  01CD  1283               	bcf	3,5	;RP0=0, select bank0
   444  01CE  1303               	bcf	3,6	;RP1=0, select bank0
   445  01CF  01E0               	clrf	_tarti+24
   446  01D0  01E1               	clrf	_tarti+25
   447                           
   448                           ;tarti.c: 49: tarti.rd_index=0;
   449  01D1  01E2               	clrf	_tarti+26
   450  01D2  01E3               	clrf	_tarti+27
   451                           
   452                           ;tarti.c: 50: PORTAbits.RA0=0;
   453  01D3  1005               	bcf	5,0	;volatile
   454                           
   455                           ;tarti.c: 51: TRISBbits.TRISB7=0;
   456  01D4  1683               	bsf	3,5	;RP0=1, select bank1
   457  01D5  1303               	bcf	3,6	;RP1=0, select bank1
   458  01D6  1386               	bcf	6,7	;volatile
   459                           
   460                           ;tarti.c: 52: PORTBbits.RB7=1;
   461  01D7  1283               	bcf	3,5	;RP0=0, select bank0
   462  01D8  1303               	bcf	3,6	;RP1=0, select bank0
   463  01D9  1786               	bsf	6,7	;volatile
   464  01DA                     l58:	
   465                           ;tarti.c: 82: while(PORTAbits.RA3==1);
   466                           
   467                           ;tarti.c: 53: while (1) {
   468                           
   469  01DA  1985               	btfsc	5,3	;volatile
   470  01DB  29DA               	goto	l58
   471                           
   472                           ;tarti.c: 83: PORTAbits.RA4=1;
   473  01DC  1605               	bsf	5,4	;volatile
   474                           
   475                           ;tarti.c: 84: PORTAbits.RA4=0;
   476  01DD  1205               	bcf	5,4	;volatile
   477                           
   478                           ;tarti.c: 86: Read_tarti();
   479  01DE  2156               	fcall	_Read_tarti
   480                           
   481                           ;tarti.c: 87: bin_to_dec(tarti_data);
   482  01DF  30A0               	movlw	(low (_tarti_data| 0))& (0+255)
   483  01E0  20D6               	fcall	_bin_to_dec
   484                           
   485                           ;tarti.c: 89: for(int k=0;k<24;k++){
   486  01E1  1283               	bcf	3,5	;RP0=0, select bank0
   487  01E2  1303               	bcf	3,6	;RP1=0, select bank0
   488  01E3  01C6               	clrf	main@k
   489  01E4  01C7               	clrf	main@k+1
   490  01E5  0847               	movf	main@k+1,w
   491  01E6  3A80               	xorlw	128
   492  01E7  00FF               	movwf	127
   493  01E8  3080               	movlw	128
   494  01E9  027F               	subwf	127,w
   495  01EA  1D03               	skipz
   496  01EB  29EE               	goto	u1235
   497  01EC  3018               	movlw	24
   498  01ED  0246               	subwf	main@k,w
   499  01EE                     u1235:	
   500  01EE  1803               	btfsc	3,0
   501  01EF  2A0D               	goto	l66
   502  01F0                     l63:	
   503                           ;tarti.c: 90: while(!TXSTAbits.TRMT);
   504                           
   505  01F0  1683               	bsf	3,5	;RP0=1, select bank1
   506  01F1  1303               	bcf	3,6	;RP1=0, select bank1
   507  01F2  1C98               	btfss	24,1	;volatile
   508  01F3  29F0               	goto	l63
   509                           
   510                           ;tarti.c: 91: TXREG=(dec_array[k]);
   511  01F4  1283               	bcf	3,5	;RP0=0, select bank0
   512  01F5  1303               	bcf	3,6	;RP1=0, select bank0
   513  01F6  0846               	movf	main@k,w
   514  01F7  3ED0               	addlw	(low (_dec_array| 0))& (0+255)
   515  01F8  0084               	movwf	4
   516  01F9  1383               	bcf	3,7	;select IRP bank1
   517  01FA  0800               	movf	0,w
   518  01FB  0099               	movwf	25	;volatile
   519  01FC  3001               	movlw	1
   520  01FD  07C6               	addwf	main@k,f
   521  01FE  1803               	skipnc
   522  01FF  0AC7               	incf	main@k+1,f
   523  0200  3000               	movlw	0
   524  0201  07C7               	addwf	main@k+1,f
   525  0202  0847               	movf	main@k+1,w
   526  0203  3A80               	xorlw	128
   527  0204  00FF               	movwf	127
   528  0205  3080               	movlw	128
   529  0206  027F               	subwf	127,w
   530  0207  1D03               	skipz
   531  0208  2A0B               	goto	u1255
   532  0209  3018               	movlw	24
   533  020A  0246               	subwf	main@k,w
   534  020B                     u1255:	
   535  020B  1C03               	skipc
   536  020C  29F0               	goto	l63
   537  020D                     l66:	
   538                           ;tarti.c: 92: }
   539                           ;tarti.c: 93: while(!TXSTAbits.TRMT);
   540                           
   541  020D  1683               	bsf	3,5	;RP0=1, select bank1
   542  020E  1303               	bcf	3,6	;RP1=0, select bank1
   543  020F  1C98               	btfss	24,1	;volatile
   544  0210  2A0D               	goto	l66
   545                           
   546                           ;tarti.c: 94: TXREG='\r';
   547  0211  300D               	movlw	13
   548  0212  1283               	bcf	3,5	;RP0=0, select bank0
   549  0213  1303               	bcf	3,6	;RP1=0, select bank0
   550  0214  0099               	movwf	25	;volatile
   551  0215                     l69:	
   552                           ;tarti.c: 95: while(!TXSTAbits.TRMT);
   553                           
   554  0215  1683               	bsf	3,5	;RP0=1, select bank1
   555  0216  1303               	bcf	3,6	;RP1=0, select bank1
   556  0217  1C98               	btfss	24,1	;volatile
   557  0218  2A15               	goto	l69
   558                           
   559                           ;tarti.c: 96: TXREG='\n';
   560  0219  300A               	movlw	10
   561  021A  1283               	bcf	3,5	;RP0=0, select bank0
   562  021B  1303               	bcf	3,6	;RP1=0, select bank0
   563  021C  0099               	movwf	25	;volatile
   564  021D  29DA               	goto	l58
   565  021E                     __end_of_main:	
   566                           ;tarti.c: 100: }
   567                           ;tarti.c: 102: return;
   568                           
   569                           
   570                           	psect	text1
   571  031F                     __ptext1:	
   572 ;; *************** function _tarti_init *****************
   573 ;; Defined at:
   574 ;;		line 160 in file "tarti.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		None
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   588 ;;      Params:         0       0       0       0
   589 ;;      Locals:         0       0       0       0
   590 ;;      Temps:          0       0       0       0
   591 ;;      Totals:         0       0       0       0
   592 ;;Total ram usage:        0 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; Hardware stack levels required when called:    1
   595 ;; This function calls:
   596 ;;		Nothing
   597 ;; This function is called by:
   598 ;;		_main
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602                           
   603                           ;psect for function _tarti_init
   604  031F                     _tarti_init:	
   605                           
   606                           ;tarti.c: 162: TRISAbits.TRISA0=0;
   607                           
   608                           ;incstack = 0
   609                           ; Regs used in _tarti_init: []
   610  031F  1683               	bsf	3,5	;RP0=1, select bank1
   611  0320  1303               	bcf	3,6	;RP1=0, select bank1
   612  0321  1005               	bcf	5,0	;volatile
   613                           
   614                           ;tarti.c: 163: TRISAbits.TRISA3=1;
   615  0322  1585               	bsf	5,3	;volatile
   616                           
   617                           ;tarti.c: 164: TRISAbits.TRISA4=0;
   618  0323  1205               	bcf	5,4	;volatile
   619                           
   620                           ;tarti.c: 165: PORTAbits.RA0=0;
   621  0324  1283               	bcf	3,5	;RP0=0, select bank0
   622  0325  1303               	bcf	3,6	;RP1=0, select bank0
   623  0326  1005               	bcf	5,0	;volatile
   624  0327  0008               	return
   625  0328                     __end_of_tarti_init:	
   626                           
   627                           	psect	text2
   628  02E6                     __ptext2:	
   629 ;; *************** function _serial_init *****************
   630 ;; Defined at:
   631 ;;		line 119 in file "tarti.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;		None
   634 ;; Auto vars:     Size  Location     Type
   635 ;;		None
   636 ;; Return value:  Size  Location     Type
   637 ;;                  1    wreg      void 
   638 ;; Registers used:
   639 ;;		wreg
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   645 ;;      Params:         0       0       0       0
   646 ;;      Locals:         0       0       0       0
   647 ;;      Temps:          0       0       0       0
   648 ;;      Totals:         0       0       0       0
   649 ;;Total ram usage:        0 bytes
   650 ;; Hardware stack levels used:    1
   651 ;; Hardware stack levels required when called:    1
   652 ;; This function calls:
   653 ;;		Nothing
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           
   660                           ;psect for function _serial_init
   661  02E6                     _serial_init:	
   662                           
   663                           ;tarti.c: 120: TXSTAbits.TX9=0;
   664                           
   665                           ;incstack = 0
   666                           ; Regs used in _serial_init: [wreg]
   667  02E6  1683               	bsf	3,5	;RP0=1, select bank1
   668  02E7  1303               	bcf	3,6	;RP1=0, select bank1
   669  02E8  1318               	bcf	24,6	;volatile
   670                           
   671                           ;tarti.c: 121: TXSTAbits.TXEN=1;
   672  02E9  1698               	bsf	24,5	;volatile
   673                           
   674                           ;tarti.c: 122: TXSTAbits.SYNC=0;
   675  02EA  1218               	bcf	24,4	;volatile
   676                           
   677                           ;tarti.c: 123: TXSTAbits.BRGH=1;
   678  02EB  1518               	bsf	24,2	;volatile
   679                           
   680                           ;tarti.c: 125: RCSTAbits.SPEN=1;
   681  02EC  1283               	bcf	3,5	;RP0=0, select bank0
   682  02ED  1303               	bcf	3,6	;RP1=0, select bank0
   683  02EE  1798               	bsf	24,7	;volatile
   684                           
   685                           ;tarti.c: 126: RCSTAbits.RX9=0;
   686  02EF  1318               	bcf	24,6	;volatile
   687                           
   688                           ;tarti.c: 127: RCSTAbits.CREN=1;
   689  02F0  1618               	bsf	24,4	;volatile
   690                           
   691                           ;tarti.c: 129: TRISBbits.TRISB1=1;
   692  02F1  1683               	bsf	3,5	;RP0=1, select bank1
   693  02F2  1303               	bcf	3,6	;RP1=0, select bank1
   694  02F3  1486               	bsf	6,1	;volatile
   695                           
   696                           ;tarti.c: 130: TRISBbits.TRISB2=1;
   697  02F4  1506               	bsf	6,2	;volatile
   698                           
   699                           ;tarti.c: 132: PIE1bits.RCIE=1;
   700  02F5  168C               	bsf	12,5	;volatile
   701                           
   702                           ;tarti.c: 133: SPBRG=129;
   703  02F6  3081               	movlw	129
   704  02F7  0099               	movwf	25	;volatile
   705                           
   706                           ;tarti.c: 135: PIR1bits.RCIF=0;
   707  02F8  1283               	bcf	3,5	;RP0=0, select bank0
   708  02F9  1303               	bcf	3,6	;RP1=0, select bank0
   709  02FA  128C               	bcf	12,5	;volatile
   710  02FB  0008               	return
   711  02FC                     __end_of_serial_init:	
   712                           
   713                           	psect	text3
   714  00D6                     __ptext3:	
   715 ;; *************** function _bin_to_dec *****************
   716 ;; Defined at:
   717 ;;		line 194 in file "tarti.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;  bin             1    wreg     PTR int 
   720 ;;		 -> tarti_data(48), 
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  bin             1   31[BANK0 ] PTR int 
   723 ;;		 -> tarti_data(48), 
   724 ;;  t               2   32[BANK0 ] int 
   725 ;;  s               2   34[BANK0 ] int 
   726 ;;  i               2   36[BANK0 ] int 
   727 ;;  actual          2   29[BANK0 ] int 
   728 ;; Return value:  Size  Location     Type
   729 ;;                  2   20[None  ] int 
   730 ;; Registers used:
   731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   737 ;;      Params:         0       0       0       0
   738 ;;      Locals:         0       9       0       0
   739 ;;      Temps:          0       4       0       0
   740 ;;      Totals:         0      13       0       0
   741 ;;Total ram usage:       13 bytes
   742 ;; Hardware stack levels used:    1
   743 ;; Hardware stack levels required when called:    3
   744 ;; This function calls:
   745 ;;		_sprintf
   746 ;; This function is called by:
   747 ;;		_main
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           
   752                           ;psect for function _bin_to_dec
   753  00D6                     _bin_to_dec:	
   754                           
   755                           ;incstack = 0
   756                           ; Regs used in _bin_to_dec: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   757                           ;bin_to_dec@bin stored from wreg
   758  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   759  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   760  00D8  00BF               	movwf	bin_to_dec@bin
   761                           
   762                           ;tarti.c: 195: int actual=0;
   763  00D9  01BD               	clrf	bin_to_dec@actual
   764  00DA  01BE               	clrf	bin_to_dec@actual+1
   765                           
   766                           ;tarti.c: 196: for(int i=23;i>=0;i--){
   767  00DB  3017               	movlw	23
   768  00DC  00C4               	movwf	bin_to_dec@i
   769  00DD  3000               	movlw	0
   770  00DE  00C5               	movwf	bin_to_dec@i+1
   771  00DF  1BC5               	btfsc	bin_to_dec@i+1,7
   772  00E0  2938               	goto	l1252
   773  00E1                     l1234:	
   774                           
   775                           ;tarti.c: 197: for(int t=(23-i);t>0;t--){
   776  00E1  0944               	comf	bin_to_dec@i,w
   777  00E2  00B9               	movwf	??_bin_to_dec
   778  00E3  0945               	comf	bin_to_dec@i+1,w
   779  00E4  00BA               	movwf	??_bin_to_dec+1
   780  00E5  0AB9               	incf	??_bin_to_dec,f
   781  00E6  1903               	skipnz
   782  00E7  0ABA               	incf	??_bin_to_dec+1,f
   783  00E8  0839               	movf	??_bin_to_dec,w
   784  00E9  3E17               	addlw	23
   785  00EA  00C0               	movwf	bin_to_dec@t
   786  00EB  083A               	movf	??_bin_to_dec+1,w
   787  00EC  1803               	skipnc
   788  00ED  3E01               	addlw	1
   789  00EE  3E00               	addlw	0
   790  00EF  00C1               	movwf	bin_to_dec@t+1
   791  00F0  0841               	movf	bin_to_dec@t+1,w
   792  00F1  3A80               	xorlw	128
   793  00F2  00FF               	movwf	127
   794  00F3  3080               	movlw	128
   795  00F4  027F               	subwf	127,w
   796  00F5  1D03               	skipz
   797  00F6  28F9               	goto	u1175
   798  00F7  3001               	movlw	1
   799  00F8  0240               	subwf	bin_to_dec@t,w
   800  00F9                     u1175:	
   801  00F9  1C03               	btfss	3,0
   802  00FA  291B               	goto	l1246
   803  00FB                     l1240:	
   804                           
   805                           ;tarti.c: 198: bin[i] *=2;
   806  00FB  1283               	bcf	3,5	;RP0=0, select bank0
   807  00FC  1303               	bcf	3,6	;RP1=0, select bank0
   808  00FD  0844               	movf	bin_to_dec@i,w
   809  00FE  00B9               	movwf	??_bin_to_dec
   810  00FF  0739               	addwf	??_bin_to_dec,w
   811  0100  073F               	addwf	bin_to_dec@bin,w
   812  0101  00BA               	movwf	??_bin_to_dec+1
   813  0102  083A               	movf	??_bin_to_dec+1,w
   814  0103  0084               	movwf	4
   815  0104  1003               	clrc
   816  0105  1383               	bcf	3,7	;select IRP bank0
   817  0106  0D80               	rlf	0,f
   818  0107  0A84               	incf	4,f
   819  0108  0D80               	rlf	0,f
   820  0109  0384               	decf	4,f
   821  010A  30FF               	movlw	255
   822  010B  07C0               	addwf	bin_to_dec@t,f
   823  010C  1803               	skipnc
   824  010D  0AC1               	incf	bin_to_dec@t+1,f
   825  010E  30FF               	movlw	255
   826  010F  07C1               	addwf	bin_to_dec@t+1,f
   827  0110  0841               	movf	bin_to_dec@t+1,w
   828  0111  3A80               	xorlw	128
   829  0112  00FF               	movwf	127
   830  0113  3080               	movlw	128
   831  0114  027F               	subwf	127,w
   832  0115  1D03               	skipz
   833  0116  2919               	goto	u1185
   834  0117  3001               	movlw	1
   835  0118  0240               	subwf	bin_to_dec@t,w
   836  0119                     u1185:	
   837  0119  1803               	skipnc
   838  011A  28FB               	goto	l1240
   839  011B                     l1246:	
   840                           
   841                           ;tarti.c: 199: }
   842                           ;tarti.c: 200: actual += bin[i];
   843  011B  1283               	bcf	3,5	;RP0=0, select bank0
   844  011C  1303               	bcf	3,6	;RP1=0, select bank0
   845  011D  0844               	movf	bin_to_dec@i,w
   846  011E  00B9               	movwf	??_bin_to_dec
   847  011F  0739               	addwf	??_bin_to_dec,w
   848  0120  073F               	addwf	bin_to_dec@bin,w
   849  0121  00BA               	movwf	??_bin_to_dec+1
   850  0122  083A               	movf	??_bin_to_dec+1,w
   851  0123  0084               	movwf	4
   852  0124  1383               	bcf	3,7	;select IRP bank0
   853  0125  0800               	movf	0,w
   854  0126  00BB               	movwf	??_bin_to_dec+2
   855  0127  0A84               	incf	4,f
   856  0128  0800               	movf	0,w
   857  0129  00BC               	movwf	??_bin_to_dec+3
   858  012A  083B               	movf	??_bin_to_dec+2,w
   859  012B  07BD               	addwf	bin_to_dec@actual,f
   860  012C  1803               	skipnc
   861  012D  0ABE               	incf	bin_to_dec@actual+1,f
   862  012E  083C               	movf	??_bin_to_dec+3,w
   863  012F  07BE               	addwf	bin_to_dec@actual+1,f
   864  0130  30FF               	movlw	255
   865  0131  07C4               	addwf	bin_to_dec@i,f
   866  0132  1803               	skipnc
   867  0133  0AC5               	incf	bin_to_dec@i+1,f
   868  0134  30FF               	movlw	255
   869  0135  07C5               	addwf	bin_to_dec@i+1,f
   870  0136  1FC5               	btfss	bin_to_dec@i+1,7
   871  0137  28E1               	goto	l1234
   872  0138                     l1252:	
   873                           
   874                           ;tarti.c: 201: }
   875                           ;tarti.c: 203: for(int s=23;s>=0;s--){
   876  0138  3017               	movlw	23
   877  0139  00C2               	movwf	bin_to_dec@s
   878  013A  3000               	movlw	0
   879  013B  00C3               	movwf	bin_to_dec@s+1
   880  013C  1BC3               	btfsc	bin_to_dec@s+1,7
   881  013D  294B               	goto	l1264
   882  013E                     l1258:	
   883                           
   884                           ;tarti.c: 204: dec_array[s]=0;
   885  013E  0842               	movf	bin_to_dec@s,w
   886  013F  3ED0               	addlw	(low (_dec_array| 0))& (0+255)
   887  0140  0084               	movwf	4
   888  0141  1383               	bcf	3,7	;select IRP bank1
   889  0142  0180               	clrf	0
   890  0143  30FF               	movlw	255
   891  0144  07C2               	addwf	bin_to_dec@s,f
   892  0145  1803               	skipnc
   893  0146  0AC3               	incf	bin_to_dec@s+1,f
   894  0147  30FF               	movlw	255
   895  0148  07C3               	addwf	bin_to_dec@s+1,f
   896  0149  1FC3               	btfss	bin_to_dec@s+1,7
   897  014A  293E               	goto	l1258
   898  014B                     l1264:	
   899                           
   900                           ;tarti.c: 205: }
   901                           ;tarti.c: 211: sprintf(dec_array,"%d",actual);
   902  014B  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   903  014C  00B9               	movwf	??_bin_to_dec
   904  014D  0839               	movf	??_bin_to_dec,w
   905  014E  00AC               	movwf	sprintf@f
   906  014F  083E               	movf	bin_to_dec@actual+1,w
   907  0150  00AE               	movwf	?_sprintf+2
   908  0151  083D               	movf	bin_to_dec@actual,w
   909  0152  00AD               	movwf	?_sprintf+1
   910  0153  30D0               	movlw	(low (_dec_array| 0))& (0+255)
   911  0154  2020               	fcall	_sprintf
   912  0155  0008               	return
   913  0156                     __end_of_bin_to_dec:	
   914                           ;tarti.c: 213: return actual;
   915                           ;	Return value of _bin_to_dec is never used
   916                           
   917                           
   918                           	psect	text4
   919  0020                     __ptext4:	
   920 ;; *************** function _sprintf *****************
   921 ;; Defined at:
   922 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;  sp              1    wreg     PTR unsigned char 
   925 ;;		 -> dec_array(24), 
   926 ;;  f               1   12[BANK0 ] PTR const unsigned char 
   927 ;;		 -> STR_1(3), 
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  sp              1   23[BANK0 ] PTR unsigned char 
   930 ;;		 -> dec_array(24), 
   931 ;;  tmpval          4    0        struct .
   932 ;;  val             2   21[BANK0 ] unsigned int 
   933 ;;  cp              2    0        PTR const unsigned char 
   934 ;;  len             2    0        unsigned int 
   935 ;;  c               1   24[BANK0 ] char 
   936 ;;  prec            1   20[BANK0 ] char 
   937 ;;  flag            1   19[BANK0 ] unsigned char 
   938 ;;  ap              1   18[BANK0 ] PTR void [1]
   939 ;;		 -> ?_sprintf(2), 
   940 ;; Return value:  Size  Location     Type
   941 ;;                  2   12[BANK0 ] int 
   942 ;; Registers used:
   943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   949 ;;      Params:         0       3       0       0
   950 ;;      Locals:         0       7       0       0
   951 ;;      Temps:          0       3       0       0
   952 ;;      Totals:         0      13       0       0
   953 ;;Total ram usage:       13 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    2
   956 ;; This function calls:
   957 ;;		___lwdiv
   958 ;;		___lwmod
   959 ;; This function is called by:
   960 ;;		_bin_to_dec
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           
   965                           ;psect for function _sprintf
   966  0020                     _sprintf:	
   967                           
   968                           ;incstack = 0
   969                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   970                           ;sprintf@sp stored from wreg
   971  0020  1283               	bcf	3,5	;RP0=0, select bank0
   972  0021  1303               	bcf	3,6	;RP1=0, select bank0
   973  0022  00B7               	movwf	sprintf@sp
   974                           
   975                           ;doprnt.c: 494: va_list ap;
   976                           ;doprnt.c: 499: signed char c;
   977                           ;doprnt.c: 506: signed char prec;
   978                           ;doprnt.c: 508: unsigned char flag;
   979                           ;doprnt.c: 523: union {
   980                           ;doprnt.c: 524: unsigned long vd;
   981                           ;doprnt.c: 525: double integ;
   982                           ;doprnt.c: 526: } tmpval;
   983                           ;doprnt.c: 528: unsigned int val;
   984                           ;doprnt.c: 529: unsigned len;
   985                           ;doprnt.c: 530: const char * cp;
   986                           ;doprnt.c: 533: *ap = __va_start();
   987  0023  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   988  0024  00AF               	movwf	??_sprintf
   989  0025  082F               	movf	??_sprintf,w
   990  0026  00B2               	movwf	sprintf@ap
   991  0027                     l1190:	
   992                           ;doprnt.c: 536: while(c = *f++) {
   993                           
   994  0027  3001               	movlw	1
   995  0028  07AC               	addwf	sprintf@f,f
   996  0029  30FF               	movlw	-1
   997  002A  072C               	addwf	sprintf@f,w
   998  002B  0084               	movwf	4
   999  002C  2300               	fcall	stringdir
  1000  002D  00AF               	movwf	??_sprintf
  1001  002E  082F               	movf	??_sprintf,w
  1002  002F  00B8               	movwf	sprintf@c
  1003  0030  0838               	movf	sprintf@c,w
  1004  0031  1903               	btfsc	3,2
  1005  0032  28D1               	goto	l1192
  1006                           
  1007                           ;doprnt.c: 538: if(c != '%')
  1008  0033  3025               	movlw	37
  1009  0034  0638               	xorwf	sprintf@c,w
  1010  0035  1903               	btfsc	3,2
  1011  0036  2843               	goto	l1146
  1012                           
  1013                           ;doprnt.c: 540: {
  1014                           ;doprnt.c: 541: ((*sp++ = (c)));
  1015  0037  0838               	movf	sprintf@c,w
  1016  0038  00AF               	movwf	??_sprintf
  1017  0039  0837               	movf	sprintf@sp,w
  1018  003A  0084               	movwf	4
  1019  003B  082F               	movf	??_sprintf,w
  1020  003C  1383               	bcf	3,7	;select IRP bank0
  1021  003D  0080               	movwf	0
  1022  003E  3001               	movlw	1
  1023  003F  00AF               	movwf	??_sprintf
  1024  0040  082F               	movf	??_sprintf,w
  1025  0041  07B7               	addwf	sprintf@sp,f
  1026                           
  1027                           ;doprnt.c: 542: continue;
  1028  0042  2827               	goto	l1190
  1029  0043                     l1146:	
  1030                           
  1031                           ;doprnt.c: 543: }
  1032                           ;doprnt.c: 548: flag = 0;
  1033  0043  01B3               	clrf	sprintf@flag
  1034                           
  1035                           ;doprnt.c: 822: }
  1036                           
  1037                           ;doprnt.c: 813: continue;
  1038                           
  1039                           ;doprnt.c: 802: default:
  1040                           
  1041                           ;doprnt.c: 698: case 'i':
  1042                           ;doprnt.c: 699: break;
  1043                           
  1044                           ;doprnt.c: 697: case 'd':
  1045                           
  1046                           ;doprnt.c: 638: goto alldone;
  1047                           
  1048                           ;doprnt.c: 637: case 0:
  1049                           
  1050                           ;doprnt.c: 635: switch(c = *f++) {
  1051  0044  3001               	movlw	1
  1052  0045  07AC               	addwf	sprintf@f,f
  1053  0046  30FF               	movlw	-1
  1054  0047  072C               	addwf	sprintf@f,w
  1055  0048  0084               	movwf	4
  1056  0049  2300               	fcall	stringdir
  1057  004A  00B8               	movwf	sprintf@c
  1058                           
  1059                           ; Switch size 1, requested type "space"
  1060                           ; Number of cases is 3, Range of values is 0 to 105
  1061                           ; switch strategies available:
  1062                           ; Name         Instructions Cycles
  1063                           ; simple_byte           10     6 (average)
  1064                           ; direct_byte          112     6 (fixed)
  1065                           ; jumptable            260     6 (fixed)
  1066                           ;	Chosen strategy is simple_byte
  1067  004B  3A00               	xorlw	0	; case 0
  1068  004C  1903               	skipnz
  1069  004D  28D1               	goto	l1192
  1070  004E  3A64               	xorlw	100	; case 100
  1071  004F  1903               	skipnz
  1072  0050  2855               	goto	l1152
  1073  0051  3A0D               	xorlw	13	; case 105
  1074  0052  1903               	skipnz
  1075  0053  2855               	goto	l1152
  1076  0054  2827               	goto	l1190
  1077  0055                     l1152:	
  1078                           
  1079                           ;doprnt.c: 1253: {
  1080                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1081  0055  0832               	movf	sprintf@ap,w
  1082  0056  0084               	movwf	4
  1083  0057  1383               	bcf	3,7	;select IRP bank0
  1084  0058  0800               	movf	0,w
  1085  0059  00B5               	movwf	sprintf@val
  1086  005A  0A84               	incf	4,f
  1087  005B  0800               	movf	0,w
  1088  005C  00B6               	movwf	sprintf@val+1
  1089  005D  3002               	movlw	2
  1090  005E  00AF               	movwf	??_sprintf
  1091  005F  082F               	movf	??_sprintf,w
  1092  0060  07B2               	addwf	sprintf@ap,f
  1093                           
  1094                           ;doprnt.c: 1261: if((int)val < 0) {
  1095  0061  1FB6               	btfss	sprintf@val+1,7
  1096  0062  286C               	goto	l1162
  1097                           
  1098                           ;doprnt.c: 1262: flag |= 0x03;
  1099  0063  3003               	movlw	3
  1100  0064  00AF               	movwf	??_sprintf
  1101  0065  082F               	movf	??_sprintf,w
  1102  0066  04B3               	iorwf	sprintf@flag,f
  1103                           
  1104                           ;doprnt.c: 1263: val = -val;
  1105  0067  09B5               	comf	sprintf@val,f
  1106  0068  09B6               	comf	sprintf@val+1,f
  1107  0069  0AB5               	incf	sprintf@val,f
  1108  006A  1903               	skipnz
  1109  006B  0AB6               	incf	sprintf@val+1,f
  1110  006C                     l1162:	
  1111                           
  1112                           ;doprnt.c: 1264: }
  1113                           ;doprnt.c: 1266: }
  1114                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1115  006C  01B8               	clrf	sprintf@c
  1116  006D  0AB8               	incf	sprintf@c,f
  1117  006E  3005               	movlw	5
  1118  006F  0638               	xorwf	sprintf@c,w
  1119  0070  1903               	btfsc	3,2
  1120  0071  288B               	goto	l1174
  1121  0072                     l1168:	
  1122                           
  1123                           ;doprnt.c: 1306: if(val < dpowers[c])
  1124  0072  0838               	movf	sprintf@c,w
  1125  0073  00AF               	movwf	??_sprintf
  1126  0074  072F               	addwf	??_sprintf,w
  1127  0075  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1128  0076  0084               	movwf	4
  1129  0077  2300               	fcall	stringdir
  1130  0078  00B0               	movwf	??_sprintf+1
  1131  0079  2300               	fcall	stringdir
  1132  007A  00B1               	movwf	??_sprintf+2
  1133  007B  0831               	movf	??_sprintf+2,w
  1134  007C  0236               	subwf	sprintf@val+1,w
  1135  007D  1D03               	skipz
  1136  007E  2881               	goto	u1055
  1137  007F  0830               	movf	??_sprintf+1,w
  1138  0080  0235               	subwf	sprintf@val,w
  1139  0081                     u1055:	
  1140  0081  1C03               	btfss	3,0
  1141  0082  288B               	goto	l1174
  1142                           
  1143                           ;doprnt.c: 1307: break;
  1144  0083  3001               	movlw	1
  1145  0084  00AF               	movwf	??_sprintf
  1146  0085  082F               	movf	??_sprintf,w
  1147  0086  07B8               	addwf	sprintf@c,f
  1148  0087  3005               	movlw	5
  1149  0088  0638               	xorwf	sprintf@c,w
  1150  0089  1D03               	btfss	3,2
  1151  008A  2872               	goto	l1168
  1152  008B                     l1174:	
  1153                           
  1154                           ;doprnt.c: 1422: {
  1155                           ;doprnt.c: 1438: if(flag & 0x03)
  1156  008B  0833               	movf	sprintf@flag,w
  1157  008C  3903               	andlw	3
  1158  008D  1903               	btfsc	3,2
  1159  008E  289A               	goto	l1180
  1160                           
  1161                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1162  008F  302D               	movlw	45
  1163  0090  00AF               	movwf	??_sprintf
  1164  0091  0837               	movf	sprintf@sp,w
  1165  0092  0084               	movwf	4
  1166  0093  082F               	movf	??_sprintf,w
  1167  0094  1383               	bcf	3,7	;select IRP bank0
  1168  0095  0080               	movwf	0
  1169  0096  3001               	movlw	1
  1170  0097  00AF               	movwf	??_sprintf
  1171  0098  082F               	movf	??_sprintf,w
  1172  0099  07B7               	addwf	sprintf@sp,f
  1173  009A                     l1180:	
  1174                           
  1175                           ;doprnt.c: 1469: }
  1176                           ;doprnt.c: 1472: prec = c;
  1177  009A  0838               	movf	sprintf@c,w
  1178  009B  00AF               	movwf	??_sprintf
  1179  009C  082F               	movf	??_sprintf,w
  1180  009D  00B4               	movwf	sprintf@prec
  1181  009E                     l1188:	
  1182                           ;doprnt.c: 1474: while(prec--) {
  1183                           
  1184  009E  30FF               	movlw	255
  1185  009F  00AF               	movwf	??_sprintf
  1186  00A0  082F               	movf	??_sprintf,w
  1187  00A1  07B4               	addwf	sprintf@prec,f
  1188  00A2  0A34               	incf	sprintf@prec,w
  1189  00A3  1903               	btfsc	3,2
  1190  00A4  2827               	goto	l1190
  1191                           
  1192                           ;doprnt.c: 1478: {
  1193                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1194  00A5  300A               	movlw	10
  1195  00A6  00A7               	movwf	___lwmod@divisor
  1196  00A7  3000               	movlw	0
  1197  00A8  00A8               	movwf	___lwmod@divisor+1
  1198  00A9  0834               	movf	sprintf@prec,w
  1199  00AA  00AF               	movwf	??_sprintf
  1200  00AB  072F               	addwf	??_sprintf,w
  1201  00AC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1202  00AD  0084               	movwf	4
  1203  00AE  2300               	fcall	stringdir
  1204  00AF  00A0               	movwf	___lwdiv@divisor
  1205  00B0  2300               	fcall	stringdir
  1206  00B1  00A1               	movwf	___lwdiv@divisor+1
  1207  00B2  0836               	movf	sprintf@val+1,w
  1208  00B3  00A3               	movwf	___lwdiv@dividend+1
  1209  00B4  0835               	movf	sprintf@val,w
  1210  00B5  00A2               	movwf	___lwdiv@dividend
  1211  00B6  2274               	fcall	___lwdiv
  1212  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1213  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1214  00B9  0821               	movf	?___lwdiv+1,w
  1215  00BA  00AA               	movwf	___lwmod@dividend+1
  1216  00BB  0820               	movf	?___lwdiv,w
  1217  00BC  00A9               	movwf	___lwmod@dividend
  1218  00BD  22B2               	fcall	___lwmod
  1219  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1220  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1221  00C0  0827               	movf	?___lwmod,w
  1222  00C1  3E30               	addlw	48
  1223  00C2  00B0               	movwf	??_sprintf+1
  1224  00C3  0830               	movf	??_sprintf+1,w
  1225  00C4  00B8               	movwf	sprintf@c
  1226                           
  1227                           ;doprnt.c: 1523: }
  1228                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1229  00C5  0838               	movf	sprintf@c,w
  1230  00C6  00AF               	movwf	??_sprintf
  1231  00C7  0837               	movf	sprintf@sp,w
  1232  00C8  0084               	movwf	4
  1233  00C9  082F               	movf	??_sprintf,w
  1234  00CA  1383               	bcf	3,7	;select IRP bank0
  1235  00CB  0080               	movwf	0
  1236  00CC  3001               	movlw	1
  1237  00CD  00AF               	movwf	??_sprintf
  1238  00CE  082F               	movf	??_sprintf,w
  1239  00CF  07B7               	addwf	sprintf@sp,f
  1240  00D0  289E               	goto	l1188
  1241  00D1                     l1192:	
  1242                           ;doprnt.c: 1525: }
  1243                           ;doprnt.c: 1533: }
  1244                           ;doprnt.c: 1535: alldone:
  1245                           
  1246                           
  1247                           ;doprnt.c: 1538: *sp = 0;
  1248  00D1  0837               	movf	sprintf@sp,w
  1249  00D2  0084               	movwf	4
  1250  00D3  1383               	bcf	3,7	;select IRP bank0
  1251  00D4  0180               	clrf	0
  1252  00D5  0008               	return
  1253  00D6                     __end_of_sprintf:	
  1254                           ;doprnt.c: 1540: return 0;
  1255                           ;	Return value of _sprintf is never used
  1256                           
  1257                           
  1258                           	psect	text5
  1259  02B2                     __ptext5:	
  1260 ;; *************** function ___lwmod *****************
  1261 ;; Defined at:
  1262 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;  divisor         2    7[BANK0 ] unsigned int 
  1265 ;;  dividend        2    9[BANK0 ] unsigned int 
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;  counter         1   11[BANK0 ] unsigned char 
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  2    7[BANK0 ] unsigned int 
  1270 ;; Registers used:
  1271 ;;		wreg, status,2, status,0
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1277 ;;      Params:         0       4       0       0
  1278 ;;      Locals:         0       1       0       0
  1279 ;;      Temps:          1       0       0       0
  1280 ;;      Totals:         1       5       0       0
  1281 ;;Total ram usage:        6 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    1
  1284 ;; This function calls:
  1285 ;;		Nothing
  1286 ;; This function is called by:
  1287 ;;		_sprintf
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function ___lwmod
  1293  02B2                     ___lwmod:	
  1294                           
  1295                           ;incstack = 0
  1296                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1297  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1298  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1299  02B4  0827               	movf	___lwmod@divisor,w
  1300  02B5  0428               	iorwf	___lwmod@divisor+1,w
  1301  02B6  1903               	btfsc	3,2
  1302  02B7  2AE1               	goto	l1134
  1303  02B8  01AB               	clrf	___lwmod@counter
  1304  02B9  0AAB               	incf	___lwmod@counter,f
  1305  02BA                     l1124:	
  1306  02BA  1BA8               	btfsc	___lwmod@divisor+1,7
  1307  02BB  2AC8               	goto	l1126
  1308  02BC  3001               	movlw	1
  1309  02BD                     u975:	
  1310  02BD  1003               	clrc
  1311  02BE  0DA7               	rlf	___lwmod@divisor,f
  1312  02BF  0DA8               	rlf	___lwmod@divisor+1,f
  1313  02C0  3EFF               	addlw	-1
  1314  02C1  1D03               	skipz
  1315  02C2  2ABD               	goto	u975
  1316  02C3  3001               	movlw	1
  1317  02C4  00F6               	movwf	??___lwmod
  1318  02C5  0876               	movf	??___lwmod,w
  1319  02C6  07AB               	addwf	___lwmod@counter,f
  1320  02C7  2ABA               	goto	l1124
  1321  02C8                     l1126:	
  1322  02C8  0828               	movf	___lwmod@divisor+1,w
  1323  02C9  022A               	subwf	___lwmod@dividend+1,w
  1324  02CA  1D03               	skipz
  1325  02CB  2ACE               	goto	u995
  1326  02CC  0827               	movf	___lwmod@divisor,w
  1327  02CD  0229               	subwf	___lwmod@dividend,w
  1328  02CE                     u995:	
  1329  02CE  1C03               	skipc
  1330  02CF  2AD6               	goto	l1130
  1331  02D0  0827               	movf	___lwmod@divisor,w
  1332  02D1  02A9               	subwf	___lwmod@dividend,f
  1333  02D2  0828               	movf	___lwmod@divisor+1,w
  1334  02D3  1C03               	skipc
  1335  02D4  03AA               	decf	___lwmod@dividend+1,f
  1336  02D5  02AA               	subwf	___lwmod@dividend+1,f
  1337  02D6                     l1130:	
  1338  02D6  3001               	movlw	1
  1339  02D7                     u1005:	
  1340  02D7  1003               	clrc
  1341  02D8  0CA8               	rrf	___lwmod@divisor+1,f
  1342  02D9  0CA7               	rrf	___lwmod@divisor,f
  1343  02DA  3EFF               	addlw	-1
  1344  02DB  1D03               	skipz
  1345  02DC  2AD7               	goto	u1005
  1346  02DD  3001               	movlw	1
  1347  02DE  02AB               	subwf	___lwmod@counter,f
  1348  02DF  1D03               	btfss	3,2
  1349  02E0  2AC8               	goto	l1126
  1350  02E1                     l1134:	
  1351  02E1  082A               	movf	___lwmod@dividend+1,w
  1352  02E2  00A8               	movwf	?___lwmod+1
  1353  02E3  0829               	movf	___lwmod@dividend,w
  1354  02E4  00A7               	movwf	?___lwmod
  1355  02E5  0008               	return
  1356  02E6                     __end_of___lwmod:	
  1357                           
  1358                           	psect	text6
  1359  0274                     __ptext6:	
  1360 ;; *************** function ___lwdiv *****************
  1361 ;; Defined at:
  1362 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  divisor         2    0[BANK0 ] unsigned int 
  1365 ;;  dividend        2    2[BANK0 ] unsigned int 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  quotient        2    5[BANK0 ] unsigned int 
  1368 ;;  counter         1    4[BANK0 ] unsigned char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  2    0[BANK0 ] unsigned int 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1378 ;;      Params:         0       4       0       0
  1379 ;;      Locals:         0       3       0       0
  1380 ;;      Temps:          1       0       0       0
  1381 ;;      Totals:         1       7       0       0
  1382 ;;Total ram usage:        8 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    1
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		_sprintf
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           
  1393                           ;psect for function ___lwdiv
  1394  0274                     ___lwdiv:	
  1395                           
  1396                           ;incstack = 0
  1397                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1398  0274  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0275  1303               	bcf	3,6	;RP1=0, select bank0
  1400  0276  01A5               	clrf	___lwdiv@quotient
  1401  0277  01A6               	clrf	___lwdiv@quotient+1
  1402  0278  0820               	movf	___lwdiv@divisor,w
  1403  0279  0421               	iorwf	___lwdiv@divisor+1,w
  1404  027A  1903               	btfsc	3,2
  1405  027B  2AAD               	goto	l1112
  1406  027C  01A4               	clrf	___lwdiv@counter
  1407  027D  0AA4               	incf	___lwdiv@counter,f
  1408  027E                     l1100:	
  1409  027E  1BA1               	btfsc	___lwdiv@divisor+1,7
  1410  027F  2A8C               	goto	l1102
  1411  0280  3001               	movlw	1
  1412  0281                     u905:	
  1413  0281  1003               	clrc
  1414  0282  0DA0               	rlf	___lwdiv@divisor,f
  1415  0283  0DA1               	rlf	___lwdiv@divisor+1,f
  1416  0284  3EFF               	addlw	-1
  1417  0285  1D03               	skipz
  1418  0286  2A81               	goto	u905
  1419  0287  3001               	movlw	1
  1420  0288  00F5               	movwf	??___lwdiv
  1421  0289  0875               	movf	??___lwdiv,w
  1422  028A  07A4               	addwf	___lwdiv@counter,f
  1423  028B  2A7E               	goto	l1100
  1424  028C                     l1102:	
  1425  028C  3001               	movlw	1
  1426  028D                     u925:	
  1427  028D  1003               	clrc
  1428  028E  0DA5               	rlf	___lwdiv@quotient,f
  1429  028F  0DA6               	rlf	___lwdiv@quotient+1,f
  1430  0290  3EFF               	addlw	-1
  1431  0291  1D03               	skipz
  1432  0292  2A8D               	goto	u925
  1433  0293  0821               	movf	___lwdiv@divisor+1,w
  1434  0294  0223               	subwf	___lwdiv@dividend+1,w
  1435  0295  1D03               	skipz
  1436  0296  2A99               	goto	u935
  1437  0297  0820               	movf	___lwdiv@divisor,w
  1438  0298  0222               	subwf	___lwdiv@dividend,w
  1439  0299                     u935:	
  1440  0299  1C03               	skipc
  1441  029A  2AA2               	goto	l1108
  1442  029B  0820               	movf	___lwdiv@divisor,w
  1443  029C  02A2               	subwf	___lwdiv@dividend,f
  1444  029D  0821               	movf	___lwdiv@divisor+1,w
  1445  029E  1C03               	skipc
  1446  029F  03A3               	decf	___lwdiv@dividend+1,f
  1447  02A0  02A3               	subwf	___lwdiv@dividend+1,f
  1448  02A1  1425               	bsf	___lwdiv@quotient,0
  1449  02A2                     l1108:	
  1450  02A2  3001               	movlw	1
  1451  02A3                     u945:	
  1452  02A3  1003               	clrc
  1453  02A4  0CA1               	rrf	___lwdiv@divisor+1,f
  1454  02A5  0CA0               	rrf	___lwdiv@divisor,f
  1455  02A6  3EFF               	addlw	-1
  1456  02A7  1D03               	skipz
  1457  02A8  2AA3               	goto	u945
  1458  02A9  3001               	movlw	1
  1459  02AA  02A4               	subwf	___lwdiv@counter,f
  1460  02AB  1D03               	btfss	3,2
  1461  02AC  2A8C               	goto	l1102
  1462  02AD                     l1112:	
  1463  02AD  0826               	movf	___lwdiv@quotient+1,w
  1464  02AE  00A1               	movwf	?___lwdiv+1
  1465  02AF  0825               	movf	___lwdiv@quotient,w
  1466  02B0  00A0               	movwf	?___lwdiv
  1467  02B1  0008               	return
  1468  02B2                     __end_of___lwdiv:	
  1469                           
  1470                           	psect	text7
  1471  0313                     __ptext7:	
  1472 ;; *************** function _T0_init *****************
  1473 ;; Defined at:
  1474 ;;		line 105 in file "tarti.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		None
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1488 ;;      Params:         0       0       0       0
  1489 ;;      Locals:         0       0       0       0
  1490 ;;      Temps:          0       0       0       0
  1491 ;;      Totals:         0       0       0       0
  1492 ;;Total ram usage:        0 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    1
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           
  1503                           ;psect for function _T0_init
  1504  0313                     _T0_init:	
  1505                           
  1506                           ;tarti.c: 106: INTCONbits.GIE=1;
  1507                           
  1508                           ;incstack = 0
  1509                           ; Regs used in _T0_init: []
  1510  0313  178B               	bsf	11,7	;volatile
  1511                           
  1512                           ;tarti.c: 107: INTCONbits.T0IE=1;
  1513  0314  168B               	bsf	11,5	;volatile
  1514                           
  1515                           ;tarti.c: 108: INTCONbits.T0IF=0;
  1516  0315  110B               	bcf	11,2	;volatile
  1517                           
  1518                           ;tarti.c: 110: OPTION_REGbits.T0CS=0;
  1519  0316  1683               	bsf	3,5	;RP0=1, select bank1
  1520  0317  1303               	bcf	3,6	;RP1=0, select bank1
  1521  0318  1281               	bcf	1,5	;volatile
  1522                           
  1523                           ;tarti.c: 111: OPTION_REGbits.T0SE=0;
  1524  0319  1201               	bcf	1,4	;volatile
  1525                           
  1526                           ;tarti.c: 112: OPTION_REGbits.PSA=0;
  1527  031A  1181               	bcf	1,3	;volatile
  1528                           
  1529                           ;tarti.c: 113: OPTION_REGbits.PS0=0;
  1530  031B  1001               	bcf	1,0	;volatile
  1531                           
  1532                           ;tarti.c: 114: OPTION_REGbits.PS1=0;
  1533  031C  1081               	bcf	1,1	;volatile
  1534                           
  1535                           ;tarti.c: 115: OPTION_REGbits.PS2=0;
  1536  031D  1101               	bcf	1,2	;volatile
  1537  031E  0008               	return
  1538  031F                     __end_of_T0_init:	
  1539                           
  1540                           	psect	text8
  1541  0156                     __ptext8:	
  1542 ;; *************** function _Read_tarti *****************
  1543 ;; Defined at:
  1544 ;;		line 169 in file "tarti.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;  kl              2    4[BANK0 ] int 
  1549 ;;  i               2    6[BANK0 ] int 
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1559 ;;      Params:         0       0       0       0
  1560 ;;      Locals:         0       4       0       0
  1561 ;;      Temps:          0       4       0       0
  1562 ;;      Totals:         0       8       0       0
  1563 ;;Total ram usage:        8 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    1
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           
  1574                           ;psect for function _Read_tarti
  1575  0156                     _Read_tarti:	
  1576                           
  1577                           ;tarti.c: 171: int i;
  1578                           ;tarti.c: 173: PORTAbits.RA0=0;
  1579                           
  1580                           ;incstack = 0
  1581                           ; Regs used in _Read_tarti: [wreg-fsr0h+status,2+status,0+btemp+1]
  1582  0156  1283               	bcf	3,5	;RP0=0, select bank0
  1583  0157  1303               	bcf	3,6	;RP1=0, select bank0
  1584  0158  1005               	bcf	5,0	;volatile
  1585  0159                     l95:	
  1586                           ;tarti.c: 174: while(PORTAbits.RA3==1);
  1587                           
  1588  0159  1985               	btfsc	5,3	;volatile
  1589  015A  2959               	goto	l95
  1590                           
  1591                           ;tarti.c: 176: for(int kl=0;kl<25;kl++){
  1592  015B  01A4               	clrf	Read_tarti@kl
  1593  015C  01A5               	clrf	Read_tarti@kl+1
  1594  015D  0825               	movf	Read_tarti@kl+1,w
  1595  015E  3A80               	xorlw	128
  1596  015F  00FF               	movwf	127
  1597  0160  3080               	movlw	128
  1598  0161  027F               	subwf	127,w
  1599  0162  1D03               	skipz
  1600  0163  2966               	goto	u1115
  1601  0164  3019               	movlw	25
  1602  0165  0224               	subwf	Read_tarti@kl,w
  1603  0166                     u1115:	
  1604  0166  1803               	btfsc	3,0
  1605  0167  297D               	goto	l100
  1606  0168                     l98:	
  1607                           
  1608                           ;tarti.c: 177: PORTAbits.RA0=1;
  1609  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1610  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1611  016A  1405               	bsf	5,0	;volatile
  1612                           
  1613                           ;tarti.c: 178: PORTAbits.RA0=0;
  1614  016B  1005               	bcf	5,0	;volatile
  1615  016C  3001               	movlw	1
  1616  016D  07A4               	addwf	Read_tarti@kl,f
  1617  016E  1803               	skipnc
  1618  016F  0AA5               	incf	Read_tarti@kl+1,f
  1619  0170  3000               	movlw	0
  1620  0171  07A5               	addwf	Read_tarti@kl+1,f
  1621  0172  0825               	movf	Read_tarti@kl+1,w
  1622  0173  3A80               	xorlw	128
  1623  0174  00FF               	movwf	127
  1624  0175  3080               	movlw	128
  1625  0176  027F               	subwf	127,w
  1626  0177  1D03               	skipz
  1627  0178  297B               	goto	u1125
  1628  0179  3019               	movlw	25
  1629  017A  0224               	subwf	Read_tarti@kl,w
  1630  017B                     u1125:	
  1631  017B  1C03               	skipc
  1632  017C  2968               	goto	l98
  1633  017D                     l100:	
  1634                           ;tarti.c: 179: }
  1635                           ;tarti.c: 181: while(PORTAbits.RA3==1);
  1636                           
  1637  017D  1283               	bcf	3,5	;RP0=0, select bank0
  1638  017E  1303               	bcf	3,6	;RP1=0, select bank0
  1639  017F  1985               	btfsc	5,3	;volatile
  1640  0180  297D               	goto	l100
  1641                           
  1642                           ;tarti.c: 182: for(i=0;i<24;i++){
  1643  0181  01A6               	clrf	Read_tarti@i
  1644  0182  01A7               	clrf	Read_tarti@i+1
  1645  0183  0827               	movf	Read_tarti@i+1,w
  1646  0184  3A80               	xorlw	128
  1647  0185  00FF               	movwf	127
  1648  0186  3080               	movlw	128
  1649  0187  027F               	subwf	127,w
  1650  0188  1D03               	skipz
  1651  0189  298C               	goto	u1145
  1652  018A  3018               	movlw	24
  1653  018B  0226               	subwf	Read_tarti@i,w
  1654  018C                     u1145:	
  1655  018C  1803               	btfsc	3,0
  1656  018D  29B5               	goto	l104
  1657  018E                     l103:	
  1658                           
  1659                           ;tarti.c: 183: PORTAbits.RA0=1;
  1660  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1661  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1662  0190  1405               	bsf	5,0	;volatile
  1663                           
  1664                           ;tarti.c: 184: tarti_data[i]=PORTAbits.RA3;
  1665  0191  0C05               	rrf	5,w	;volatile
  1666  0192  00A0               	movwf	??_Read_tarti
  1667  0193  0CA0               	rrf	??_Read_tarti,f
  1668  0194  0C20               	rrf	??_Read_tarti,w
  1669  0195  3901               	andlw	1
  1670  0196  00A1               	movwf	??_Read_tarti+1
  1671  0197  01A2               	clrf	??_Read_tarti+2
  1672  0198  0826               	movf	Read_tarti@i,w
  1673  0199  00A3               	movwf	??_Read_tarti+3
  1674  019A  0723               	addwf	??_Read_tarti+3,w
  1675  019B  3EA0               	addlw	(low (_tarti_data| 0))& (0+255)
  1676  019C  0084               	movwf	4
  1677  019D  0821               	movf	??_Read_tarti+1,w
  1678  019E  1383               	bcf	3,7	;select IRP bank1
  1679  019F  0080               	movwf	0
  1680  01A0  0A84               	incf	4,f
  1681  01A1  0822               	movf	??_Read_tarti+2,w
  1682  01A2  0080               	movwf	0
  1683                           
  1684                           ;tarti.c: 185: PORTAbits.RA0=0;
  1685  01A3  1005               	bcf	5,0	;volatile
  1686  01A4  3001               	movlw	1
  1687  01A5  07A6               	addwf	Read_tarti@i,f
  1688  01A6  1803               	skipnc
  1689  01A7  0AA7               	incf	Read_tarti@i+1,f
  1690  01A8  3000               	movlw	0
  1691  01A9  07A7               	addwf	Read_tarti@i+1,f
  1692  01AA  0827               	movf	Read_tarti@i+1,w
  1693  01AB  3A80               	xorlw	128
  1694  01AC  00FF               	movwf	127
  1695  01AD  3080               	movlw	128
  1696  01AE  027F               	subwf	127,w
  1697  01AF  1D03               	skipz
  1698  01B0  29B3               	goto	u1155
  1699  01B1  3018               	movlw	24
  1700  01B2  0226               	subwf	Read_tarti@i,w
  1701  01B3                     u1155:	
  1702  01B3  1C03               	skipc
  1703  01B4  298E               	goto	l103
  1704  01B5                     l104:	
  1705                           
  1706                           ;tarti.c: 186: }
  1707                           ;tarti.c: 188: PORTAbits.RA0=1;
  1708  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1709  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1710  01B7  1405               	bsf	5,0	;volatile
  1711                           
  1712                           ;tarti.c: 189: tarti_data[23] ^=1;
  1713  01B8  3001               	movlw	1
  1714  01B9  1683               	bsf	3,5	;RP0=1, select bank1
  1715  01BA  1303               	bcf	3,6	;RP1=0, select bank1
  1716  01BB  06CE               	xorwf	(_tarti_data^(0+128)+46),f
  1717  01BC  3000               	movlw	0
  1718  01BD  06CF               	xorwf	((_tarti_data+1)^(0+128)+46),f
  1719                           
  1720                           ;tarti.c: 190: PORTAbits.RA0=0;
  1721  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  1722  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  1723  01C0  1005               	bcf	5,0	;volatile
  1724  01C1  0008               	return
  1725  01C2                     __end_of_Read_tarti:	
  1726                           
  1727                           	psect	text9
  1728  021E                     __ptext9:	
  1729 ;; *************** function _kes *****************
  1730 ;; Defined at:
  1731 ;;		line 138 in file "tarti.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1745 ;;      Params:         0       0       0       0
  1746 ;;      Locals:         0       0       0       0
  1747 ;;      Temps:          5       0       0       0
  1748 ;;      Totals:         5       0       0       0
  1749 ;;Total ram usage:        5 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		Interrupt level 1
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           
  1759                           ;psect for function _kes
  1760  021E                     _kes:	
  1761                           
  1762                           ;tarti.c: 139: if(INTCONbits.T0IF && INTCONbits.T0IE){
  1763  021E  190B               	btfsc	11,2	;volatile
  1764  021F  1E8B               	btfss	11,5	;volatile
  1765  0220  2A30               	goto	i1l1076
  1766                           
  1767                           ;tarti.c: 140: timetick++;
  1768  0221  3001               	movlw	1
  1769  0222  07E4               	addwf	_timetick,f
  1770  0223  3000               	movlw	0
  1771  0224  1803               	skipnc
  1772  0225  3001               	movlw	1
  1773  0226  07E5               	addwf	_timetick+1,f
  1774  0227  3000               	movlw	0
  1775  0228  1803               	skipnc
  1776  0229  3001               	movlw	1
  1777  022A  07E6               	addwf	_timetick+2,f
  1778  022B  3000               	movlw	0
  1779  022C  1803               	skipnc
  1780  022D  3001               	movlw	1
  1781  022E  07E7               	addwf	_timetick+3,f
  1782                           
  1783                           ;tarti.c: 141: INTCONbits.T0IF=0;
  1784  022F  110B               	bcf	11,2	;volatile
  1785  0230                     i1l1076:	
  1786                           
  1787                           ;tarti.c: 143: }
  1788                           ;tarti.c: 145: if(timetick>=10000){
  1789  0230  0867               	movf	_timetick+3,w
  1790  0231  1D03               	btfss	3,2
  1791  0232  2A40               	goto	i1l1078
  1792  0233  0866               	movf	_timetick+2,w
  1793  0234  1D03               	btfss	3,2
  1794  0235  2A40               	goto	i1l1078
  1795  0236  3027               	movlw	39
  1796  0237  0265               	subwf	_timetick+1,w
  1797  0238  1D03               	skipz
  1798  0239  2A3E               	goto	u86_23
  1799  023A  3010               	movlw	16
  1800  023B  0264               	subwf	_timetick,w
  1801  023C  1D03               	skipz
  1802  023D  2A3E               	goto	u86_23
  1803  023E                     u86_23:	
  1804  023E  1C03               	btfss	3,0
  1805  023F  2A48               	goto	i1l1080
  1806  0240                     i1l1078:	
  1807                           
  1808                           ;tarti.c: 146: timetick=0;
  1809  0240  3000               	movlw	0
  1810  0241  00E7               	movwf	_timetick+3
  1811  0242  3000               	movlw	0
  1812  0243  00E6               	movwf	_timetick+2
  1813  0244  3000               	movlw	0
  1814  0245  00E5               	movwf	_timetick+1
  1815  0246  3000               	movlw	0
  1816  0247  00E4               	movwf	_timetick
  1817  0248                     i1l1080:	
  1818                           
  1819                           ;tarti.c: 147: }
  1820                           ;tarti.c: 149: if(PIR1bits.RCIF){
  1821  0248  1E8C               	btfss	12,5	;volatile
  1822  0249  2A58               	goto	i1l1086
  1823                           
  1824                           ;tarti.c: 150: tarti.command[tarti.wr_index]=RCREG;
  1825  024A  081A               	movf	26,w	;volatile
  1826  024B  00F0               	movwf	??_kes
  1827  024C  0860               	movf	_tarti+24,w
  1828  024D  3E48               	addlw	(low (_tarti| 0))& (0+255)
  1829  024E  0084               	movwf	4
  1830  024F  0870               	movf	??_kes,w
  1831  0250  1383               	bcf	3,7	;select IRP bank0
  1832  0251  0080               	movwf	0
  1833                           
  1834                           ;tarti.c: 152: tarti.wr_index++;
  1835  0252  3001               	movlw	1
  1836  0253  07E0               	addwf	_tarti+24,f
  1837  0254  1803               	skipnc
  1838  0255  0AE1               	incf	_tarti+25,f
  1839  0256  3000               	movlw	0
  1840  0257  07E1               	addwf	_tarti+25,f
  1841  0258                     i1l1086:	
  1842                           
  1843                           ;tarti.c: 153: }
  1844                           ;tarti.c: 155: if(tarti.wr_index>=24)
  1845  0258  0861               	movf	_tarti+25,w
  1846  0259  3A80               	xorlw	128
  1847  025A  00FF               	movwf	127
  1848  025B  3080               	movlw	128
  1849  025C  027F               	subwf	127,w
  1850  025D  1D03               	skipz
  1851  025E  2A61               	goto	u88_25
  1852  025F  3018               	movlw	24
  1853  0260  0260               	subwf	_tarti+24,w
  1854  0261                     u88_25:	
  1855  0261  1C03               	skipc
  1856  0262  2A67               	goto	i1l89
  1857                           
  1858                           ;tarti.c: 156: tarti.wr_index=0;
  1859  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1860  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1861  0265  01E0               	clrf	_tarti+24
  1862  0266  01E1               	clrf	_tarti+25
  1863  0267                     i1l89:	
  1864  0267  0874               	movf	??_kes+4,w
  1865  0268  1283               	bcf	3,5	;RP0=0, select bank0
  1866  0269  1303               	bcf	3,6	;RP1=0, select bank0
  1867  026A  00FF               	movwf	127
  1868  026B  0873               	movf	??_kes+3,w
  1869  026C  008A               	movwf	10
  1870  026D  0872               	movf	??_kes+2,w
  1871  026E  0084               	movwf	4
  1872  026F  0E71               	swapf	(??_kes+1)^(0+-128),w
  1873  0270  0083               	movwf	3
  1874  0271  0EFE               	swapf	126,f
  1875  0272  0E7E               	swapf	126,w
  1876  0273  0009               	retfie
  1877  0274                     __end_of_kes:	
  1878  007E                     btemp	set	126	;btemp
  1879  007E                     wtemp0	set	126
  1880                           
  1881                           	psect	intentry
  1882  0004                     __pintentry:	
  1883                           ;incstack = 0
  1884                           ; Regs used in _kes: [wreg-fsr0h+status,2+status,0+btemp+1]
  1885                           
  1886  0004                     interrupt_function:	
  1887  007E                     saved_w	set	btemp
  1888  0004  00FE               	movwf	btemp
  1889  0005  0E03               	swapf	3,w
  1890  0006  00F1               	movwf	??_kes+1
  1891  0007  0804               	movf	4,w
  1892  0008  00F2               	movwf	??_kes+2
  1893  0009  080A               	movf	10,w
  1894  000A  00F3               	movwf	??_kes+3
  1895  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1896  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1897  000D  087F               	movf	btemp+1,w
  1898  000E  00F4               	movwf	??_kes+4
  1899  000F  2A1E               	ljmp	_kes


Data Sizes:
    Strings     3
    Constant    10
    Data        2
    BSS         104
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80     40      72
    BANK1            80      0      72
    BANK2            48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 24
		 -> dec_array(BANK1[24]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    bin_to_dec@bin	PTR int  size(1) Largest target is 48
		 -> tarti_data(BANK1[48]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _kes in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_bin_to_dec
    _bin_to_dec->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _kes in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _kes in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _kes in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2254
                                             38 BANK0      2     2      0
                         _Read_tarti
                            _T0_init
                         _bin_to_dec
                        _serial_init
                         _tarti_init
 ---------------------------------------------------------------------------------
 (1) _tarti_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bin_to_dec                                          13    13      0    1988
                                             25 BANK0     13    13      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1524
                                             12 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     362
                                              6 COMMON     1     1      0
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     371
                                              5 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _T0_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_tarti                                           8     8      0     167
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _kes                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_tarti
   _T0_init
   _bin_to_dec
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _serial_init
   _tarti_init

 _kes (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      48       7       90.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     28      48       3       90.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      99      10        0.0%
ABS                  0      0      99       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Feb 02 10:22:15 2018

                      pc 0002              __CFG_CP$OFF 0000                       l63 01F0  
                     l66 020D                       l58 01DA                       l69 0215  
                     l95 0159                       l98 0168                       fsr 0004  
                    l100 017D                      l103 018E                      l104 01B5  
           __CFG_CPD$OFF 0000                      u905 0281                      u925 028D  
                    u935 0299                      u945 02A3                      u975 02BD  
                    u995 02CE                      _kes 021E                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000  
                   l1100 027E                     l1102 028C                     l1112 02AD  
                   l1130 02D6                     l1108 02A2                     l1124 02BA  
                   l1126 02C8                     l1134 02E1                     l1152 0055  
                   l1240 00FB                     l1162 006C                     l1146 0043  
                   l1234 00E1                     l1180 009A                     l1252 0138  
                   l1174 008B                     l1190 0027                     l1246 011B  
                   l1168 0072                     l1192 00D1                     l1264 014B  
                   l1258 013E                     l1188 009E                     ?_kes 0070  
                   STR_1 0310                     u1005 02D7                     u1115 0166  
                   u1125 017B                     u1055 0081                     u1145 018C  
                   u1155 01B3                     u1235 01EE                     u1175 00F9  
                   u1255 020B                     u1185 0119                     i1l89 0267  
        __end_of_T0_init 031F                     _main 01C2                     btemp 007E  
                   start 0010                    ??_kes 0070                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _CMCON 001F          __end_of___lwdiv 02B2  
        __end_of___lwmod 02E6                    _RCREG 001A                    _SPBRG 0099  
                  _TRISB 0086                    u86_23 023E                    u88_25 0261  
                  _TXREG 0019          __end_of_dpowers 0310                    _tarti 0048  
                  main@k 0046           __CFG_BOREN$OFF 0000                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 00D6  
         __CFG_MCLRE$OFF 0000          __initialization 0011             __end_of_main 021E  
             _Read_tarti 0156                   ??_main 0077              Read_tarti@i 0026  
              ??_T0_init 0075                   i1l1080 0248                   i1l1076 0230  
                 i1l1086 0258                   i1l1078 0240           __CFG_PWRTE$OFF 0000  
           ?_serial_init 0070                ??___lwdiv 0075                ??___lwmod 0076  
           __pdataCOMMON 0077                   saved_w 007E                ??_sprintf 002F  
__end_of__initialization 001E           __pcstackCOMMON 0070              ?_Read_tarti 0070  
         _OPTION_REGbits 0081               __pbssBANK0 0048               __pbssBANK1 00A0  
           Read_tarti@kl 0024               _bin_to_dec 00D6               __pmaintext 01C2  
             __pintentry 0004                  _T0_init 0313               __stringtab 0300  
    __size_of_Read_tarti 006C                  ___lwdiv 0274                  ___lwmod 02B2  
   __size_of_serial_init 0016                  __ptext1 031F                  __ptext2 02E6  
                __ptext3 00D6                  __ptext4 0020                  __ptext5 02B2  
                __ptext6 0274                  __ptext7 0313                  __ptext8 0156  
                __ptext9 021E                  _counter 0077                  _dpowers 0306  
           __size_of_kes 0056                  _sprintf 0020                  clrloop0 0329  
   end_of_initialization 001E              ?_bin_to_dec 0070                _RCSTAbits 0018  
             _tarti_data 00A0               _tarti_init 031F                _PORTAbits 0005  
              _PORTBbits 0006                _TRISAbits 0085                _TRISBbits 0086  
              _TXSTAbits 0098             ??_Read_tarti 0020            __pidataCOMMON 0330  
    start_initialization 0011              __end_of_kes 0274      __size_of_bin_to_dec 0080  
          bin_to_dec@bin 003F         bin_to_dec@actual 003D       __end_of_Read_tarti 01C2  
            ?_tarti_init 0070                ___latbits 0000            __pcstackBANK0 0020  
               ?_T0_init 0070                _dec_array 00D0              sprintf@flag 0033  
            sprintf@prec 0034         ___lwdiv@dividend 0022                 ?___lwdiv 0020  
               ?___lwmod 0027                __pstrings 0300         ___lwdiv@quotient 0025  
               ?_sprintf 002C      __size_of_tarti_init 0009        interrupt_function 0004  
              clear_ram0 0328                 _PIE1bits 008C             ??_bin_to_dec 0039  
               _PIR1bits 000C            ??_serial_init 0075              __stringbase 0305  
     __end_of_bin_to_dec 0156         __size_of_T0_init 000C         __size_of___lwdiv 003E  
       __size_of___lwmod 0034      __end_of_serial_init 02FC       __end_of__stringtab 0306  
             sprintf@val 0035          ___lwdiv@divisor 0020          ___lwdiv@counter 0024  
       __size_of_sprintf 00B6            __size_of_main 005C             ??_tarti_init 0075  
               _timetick 0064              bin_to_dec@i 0044              bin_to_dec@s 0042  
            bin_to_dec@t 0040               _INTCONbits 000B                 intlevel1 0000  
              sprintf@ap 0032                sprintf@sp 0037       __end_of_tarti_init 0328  
       ___lwmod@dividend 0029                stringcode 0300              _serial_init 02E6  
               sprintf@c 0038                 sprintf@f 002C          ___lwmod@divisor 0027  
        ___lwmod@counter 002B                 stringdir 0300                 stringtab 0300  
